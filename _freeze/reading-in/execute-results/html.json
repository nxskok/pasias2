{
  "hash": "96c7925a6361b481a825c7bbad3714e9",
  "result": {
    "markdown": "\n# Reading in data\n\nIn this chapter, and from here on, the questions are first, and then my answers are in the second appearances of the problems with the same name. \nIt is much better for your learning to spend some time thinking about how you would solve these problems, and after *that* you can see how I did it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n##  Orange juice\n\n\n The quality of orange juice produced by a manufacturer\n(identity unknown) is constantly being monitored. The manufacturer has\ndeveloped a \"sweetness index\" for its orange juice, for which a\nhigher value means sweeter juice. Is the sweetness index related to a\nchemical measure such as the amount of water-soluble pectin (parts per\nmillion) in the\norange juice? Data were obtained from 24 production runs, and the\nsweetness and pectin content were measured for each run. The data are\nin [link](http://ritsokiguess.site/datafiles/ojuice.txt). Open that\nlink up now. You can click on that link just above to open the file.\n\n\n\n(a) The data values are separated by a space. Use the appropriate\nTidyverse function to read the data directly from the course website\ninto a \"tibble\".\n\n\n\n\n(b) Take a look at what got read in. Do you\nhave data for all 24 runs? \n\n\n\n(c) In your data frame, where did the column (variable) names\ncome from? How did R know where to get them from?\n\n\n\n\n\n\n\n\n##  Making soap\n\n\n A company operates two production lines in a factory for\nmaking soap bars. The production lines are\nlabelled A and B. A production line that moves faster may produce more\nsoap, but may possibly also produce more \"scrap\" (that is, bits of\nsoap that \ncan no longer be made into soap bars and will have to be thrown away).  \n\nThe data are in [link](http://ritsokiguess.site/datafiles/soap.txt).\n\n\n\n(a) Read the data into R.  Display the data. \n\n\n\n\n(b) There should be 27\nrows. Are there? What columns are there?\n\n\n\n\n##  Handling shipments\n\n\n A company called Global Electronics from\ntime to time imports shipments of a certain large part used as a\ncomponent in several of its products. The size of the shipment varies\neach time. Each shipment is sent to one of two warehouses (labelled A\nand B) for handling. The data in\n[link](http://ritsokiguess.site/datafiles/global.csv) show the\n`size` of each shipment (in thousands of parts) and the direct\n`cost` of handling it, in thousands of dollars. Also shown is\nthe `warehouse` (A or B) that handled each shipment.\n\n\n\n(a) Read the data into R and display your data frame. \n\n\n \n(b) Describe how many rows and columns your data frame has, and what they contain. \n\n\n\n\n\n\nMy solutions follow:\n\n\n\n\n##  Orange juice\n\n\n The quality of orange juice produced by a manufacturer\n(identity unknown) is constantly being monitored. The manufacturer has\ndeveloped a \"sweetness index\" for its orange juice, for which a\nhigher value means sweeter juice. Is the sweetness index related to a\nchemical measure such as the amount of water-soluble pectin (parts per\nmillion) in the\norange juice? Data were obtained from 24 production runs, and the\nsweetness and pectin content were measured for each run. The data are\nin [link](http://ritsokiguess.site/datafiles/ojuice.txt). Open that\nlink up now. You can click on that link just above to open the file.\n\n\n\n(a) The data values are separated by a space. Use the appropriate\nTidyverse function to read the data directly from the course website\ninto a \"tibble\".\n\n\nSolution\n\n\nStart with this (almost always):\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n \n\nThe appropriate function, the data values being separated by a space,\nwill be `read_delim`. Put the URL as the first thing in\n`read_delim`, or (better) define it into a variable\nfirst:^[I say \"better\" because otherwise the read line gets rather long. This way you read it as \"the URL is some long thing that I don't care about especially, and I what I need to do is to read the data from that URL, separated by spaces.\"]\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"http://ritsokiguess.site/datafiles/ojuice.txt\"\njuice <- read_delim(url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 24 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\ndbl (3): run, sweetness, pectin\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n \n\n`read_delim` (or `read_csv` or any of the others) tell\nyou what variables were read in, and also tell you about any \"parsing errors\" \nwhere it couldn't work out what was what. Here, we have three\nvariables, which is entirely consistent with the three columns of data\nvalues in the file.\n\n`read_delim` can handle data values separated by *any*\ncharacter, not just spaces, but the separating character, known as a\n\"delimiter\", does *not* have a default, so you have to say what\nit is, every time.\n\n$\\blacksquare$\n\n\n(b) Take a look at what got read in. Do you\nhave data for all 24 runs? \n\n\nSolution\n\n\nType the name of the data frame in a code chunk (a new one, or\nadd it to the end of the previous one). Because this is actually\na \"tibble\", which is what `read_delim` reads in,\nyou'll only actually see the first 10 lines, but it will tell\nyou how many lines there are altogether, and you can click on\nthe appropriate thing to see the rest of it.\n\n::: {.cell}\n\n```{.r .cell-code}\njuice\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"run\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sweetness\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pectin\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"5.2\",\"3\":\"220\"},{\"1\":\"2\",\"2\":\"5.5\",\"3\":\"227\"},{\"1\":\"3\",\"2\":\"6.0\",\"3\":\"259\"},{\"1\":\"4\",\"2\":\"5.9\",\"3\":\"210\"},{\"1\":\"5\",\"2\":\"5.8\",\"3\":\"224\"},{\"1\":\"6\",\"2\":\"6.0\",\"3\":\"215\"},{\"1\":\"7\",\"2\":\"5.8\",\"3\":\"231\"},{\"1\":\"8\",\"2\":\"5.6\",\"3\":\"268\"},{\"1\":\"9\",\"2\":\"5.6\",\"3\":\"239\"},{\"1\":\"10\",\"2\":\"5.9\",\"3\":\"212\"},{\"1\":\"11\",\"2\":\"5.4\",\"3\":\"410\"},{\"1\":\"12\",\"2\":\"5.6\",\"3\":\"256\"},{\"1\":\"13\",\"2\":\"5.8\",\"3\":\"306\"},{\"1\":\"14\",\"2\":\"5.5\",\"3\":\"259\"},{\"1\":\"15\",\"2\":\"5.3\",\"3\":\"284\"},{\"1\":\"16\",\"2\":\"5.3\",\"3\":\"383\"},{\"1\":\"17\",\"2\":\"5.7\",\"3\":\"271\"},{\"1\":\"18\",\"2\":\"5.5\",\"3\":\"264\"},{\"1\":\"19\",\"2\":\"5.7\",\"3\":\"227\"},{\"1\":\"20\",\"2\":\"5.3\",\"3\":\"263\"},{\"1\":\"21\",\"2\":\"5.9\",\"3\":\"232\"},{\"1\":\"22\",\"2\":\"5.8\",\"3\":\"220\"},{\"1\":\"23\",\"2\":\"5.8\",\"3\":\"246\"},{\"1\":\"24\",\"2\":\"5.9\",\"3\":\"241\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n \n\nI appear to have all the data. If you want further convincing, click\nNext a couple of times to be sure that the runs go down to\nnumber 24.\n\n$\\blacksquare$\n\n(c) In your data frame, where did the column (variable) names\ncome from? How did R know where to get them from?\n\n\nSolution\n\n\nThey came from the top line of the data file, so we didn't \nhave to specify them. This is the default behaviour of all the\n`read_` functions, so we don't have to ask for it\nspecially. \n\nExtra: in fact, if the top line of your data file is\n*not* variable names, *that's* when you have to say\nsomething special. The `read_` functions have an\noption `col_names` which can either be `TRUE`\n(the default), which means \"read them in from the top line\",\n`FALSE` (\"they are not there, so make some up\") or a\nlist of column names to use. You might use the last\nalternative when the column names that are in the file are\n*not* the ones you want to use; in that case, you would\nalso say `skip=1` to skip the first line. For example,\nwith file `a.txt` thus:\n\n```\na b\n1 2\n3 4\n5 6\n```\n        \nyou could read the same data but call the columns `x` and\n`y` thus:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_delim(\"a.txt\", \" \", col_names = c(\"x\", \"y\"), skip = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 3 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\ndbl (2): x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"2\"},{\"1\":\"3\",\"2\":\"4\"},{\"1\":\"5\",\"2\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n$\\blacksquare$\n\n\n\n\n\n\n##  Making soap\n\n\n A company operates two production lines in a factory for\nmaking soap bars. The production lines are\nlabelled A and B. A production line that moves faster may produce more\nsoap, but may possibly also produce more \"scrap\" (that is, bits of\nsoap that \ncan no longer be made into soap bars and will have to be thrown away).  \n\nThe data are in [link](http://ritsokiguess.site/datafiles/soap.txt).\n\n\n\n(a) Read the data into R.  Display the data. \n\n\nSolution\n\n\nRead directly from the URL, most easily:\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"http://ritsokiguess.site/datafiles/soap.txt\"\nsoap <- read_delim(url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 27 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): line\ndbl (3): case, scrap, speed\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nsoap\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"case\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scrap\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"speed\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"line\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"218\",\"3\":\"100\",\"4\":\"a\"},{\"1\":\"2\",\"2\":\"248\",\"3\":\"125\",\"4\":\"a\"},{\"1\":\"3\",\"2\":\"360\",\"3\":\"220\",\"4\":\"a\"},{\"1\":\"4\",\"2\":\"351\",\"3\":\"205\",\"4\":\"a\"},{\"1\":\"5\",\"2\":\"470\",\"3\":\"300\",\"4\":\"a\"},{\"1\":\"6\",\"2\":\"394\",\"3\":\"255\",\"4\":\"a\"},{\"1\":\"7\",\"2\":\"332\",\"3\":\"225\",\"4\":\"a\"},{\"1\":\"8\",\"2\":\"321\",\"3\":\"175\",\"4\":\"a\"},{\"1\":\"9\",\"2\":\"410\",\"3\":\"270\",\"4\":\"a\"},{\"1\":\"10\",\"2\":\"260\",\"3\":\"170\",\"4\":\"a\"},{\"1\":\"11\",\"2\":\"241\",\"3\":\"155\",\"4\":\"a\"},{\"1\":\"12\",\"2\":\"331\",\"3\":\"190\",\"4\":\"a\"},{\"1\":\"13\",\"2\":\"275\",\"3\":\"140\",\"4\":\"a\"},{\"1\":\"14\",\"2\":\"425\",\"3\":\"290\",\"4\":\"a\"},{\"1\":\"15\",\"2\":\"367\",\"3\":\"265\",\"4\":\"a\"},{\"1\":\"16\",\"2\":\"140\",\"3\":\"105\",\"4\":\"b\"},{\"1\":\"17\",\"2\":\"277\",\"3\":\"215\",\"4\":\"b\"},{\"1\":\"18\",\"2\":\"384\",\"3\":\"270\",\"4\":\"b\"},{\"1\":\"19\",\"2\":\"341\",\"3\":\"255\",\"4\":\"b\"},{\"1\":\"20\",\"2\":\"215\",\"3\":\"175\",\"4\":\"b\"},{\"1\":\"21\",\"2\":\"180\",\"3\":\"135\",\"4\":\"b\"},{\"1\":\"22\",\"2\":\"260\",\"3\":\"200\",\"4\":\"b\"},{\"1\":\"23\",\"2\":\"361\",\"3\":\"275\",\"4\":\"b\"},{\"1\":\"24\",\"2\":\"252\",\"3\":\"155\",\"4\":\"b\"},{\"1\":\"25\",\"2\":\"422\",\"3\":\"320\",\"4\":\"b\"},{\"1\":\"26\",\"2\":\"273\",\"3\":\"190\",\"4\":\"b\"},{\"1\":\"27\",\"2\":\"410\",\"3\":\"295\",\"4\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n    \n$\\blacksquare$\n\n\n(b) There should be 27\nrows. Are there? What columns are there?\n\nSolution\n\nThere are indeed 27 rows, one per observation. The column called `case` identifies  each particular run of a production line (scroll down to see that it gets to 27 as well). Though it is a number, it is an identifier variable and so should not be treated quantitatively. The other columns (variables) are `scrap` and `speed` (quantitative) and `line` (categorical). These indicate which production line was used for each run, the speed it was run at, and the amount of scrap produced.\n\nThis seems like an odd place to end this question, but later we'll be using these data to draw some graphs. \n\n$\\blacksquare$\n\n\n\n##  Handling shipments\n\n\n A company called Global Electronics from\ntime to time imports shipments of a certain large part used as a\ncomponent in several of its products. The size of the shipment varies\neach time. Each shipment is sent to one of two warehouses (labelled A\nand B) for handling. The data in\n[link](http://ritsokiguess.site/datafiles/global.csv) show the\n`size` of each shipment (in thousands of parts) and the direct\n`cost` of handling it, in thousands of dollars. Also shown is\nthe `warehouse` (A or B) that handled each shipment.\n\n\n\n(a) Read the data into R and display your data frame. \n\n\nSolution\n\n\nIf you open the data file in your web browser, it will probably\nopen as a spreadsheet, which is not really very helpful, since\nthen it is not clear what to do with it. You could, I suppose,\nsave it and upload it to R Studio Cloud, but it requires much less\nbrainpower to open it directly from the URL:\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"http://ritsokiguess.site/datafiles/global.csv\"\nshipments <- read_csv(url)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 10 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): warehouse\ndbl (2): size, cost\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n     \n\nIf you display your data frame and it looks like this, you are good\n(you can give the data frame any name):\n\n::: {.cell}\n\n```{.r .cell-code}\nshipments\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"warehouse\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"size\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cost\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"A\",\"2\":\"225\",\"3\":\"11.95\"},{\"1\":\"B\",\"2\":\"350\",\"3\":\"14.13\"},{\"1\":\"A\",\"2\":\"150\",\"3\":\"8.93\"},{\"1\":\"A\",\"2\":\"200\",\"3\":\"10.98\"},{\"1\":\"A\",\"2\":\"175\",\"3\":\"10.03\"},{\"1\":\"A\",\"2\":\"180\",\"3\":\"10.13\"},{\"1\":\"B\",\"2\":\"325\",\"3\":\"13.75\"},{\"1\":\"B\",\"2\":\"290\",\"3\":\"13.30\"},{\"1\":\"B\",\"2\":\"400\",\"3\":\"15.00\"},{\"1\":\"A\",\"2\":\"125\",\"3\":\"7.97\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n$\\blacksquare$\n \n(b) Describe how many rows and columns your data frame has, and what they contain. \n\nSolution\n\nIt has 10 rows and 3 columns. *You need to say this.*\n\nThat is, there were 10 shipments recorded, and for each of them, 3\nvariables were noted: the size and cost of the shipment, and the\nwarehouse it was handled at.\n    \nWe will also be making some graphs of these data later.\n\n$\\blacksquare$\n\n",
    "supporting": [
      "reading-in_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}