{
  "hash": "c808c185fbdbc640d38125a1c7712c74",
  "result": {
    "markdown": "# Principal Components\n\nPackages for this chapter:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggbiplot)\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n##  The weather, somewhere\n\n\n The data in\n[link](http://ritsokiguess.site/datafiles/weather_2014.csv) is of the\nweather in a certain location: daily weather records for 2014. The\nvariables are:\n\n\n\n* day of the year (1 through 365)\n\n* day of the month\n\n* number of the month\n\n* season\n\n* low temperature (for the day)\n\n* high temperature\n\n* average temperature\n\n* time of the low temperature\n\n* time of the high temperature\n\n* rainfall (mm)\n\n* average wind speed\n\n* wind gust (highest wind speed)\n\n* time of the wind gust\n\n* wind direction\n\n\n\n\n(a) Read in the data, and create a data frame containing only\nthe temperature variables, the rainfall and the wind speed variables\n(the ones that are actual numbers, not times or text). Display the\nfirst few lines of your data frame.\n \n\n(b) Find five-number summaries for each column by running\n`quantile` on all the columns of the data frame (at once, if\nyou can).\n \n\n(c) Run a principal components analysis (on the correlation matrix).\n \n\n(d) Obtain a `summary` of your principal components\nanalysis. How many components do you think are worth investigating?\n \n\n(e) Make a scree plot. Does this\nsupport your conclusion from the previous part?\n \n\n(f) Obtain the component loadings. How do the first three\ncomponents depend on the original variables? (That is, what kind of\nvalues for the original variables would make the component scores\nlarge or small?)\n \n\n(g) Obtain the principal component scores, for as many components\nas you think are reasonable, and display the first\n20 of them for each component alongside the other variables in your\ndata frame.\n \n\n(h) Find a day that scores low on component 1, and explain briefly why\nit came out that way (by looking at the measured variables).\n \n\n(i) Find a day that scores high on component 2, and explain\nbriefly why it came out that way.\n \n\n(j) Find a day that scores high on component 3, and explain\nbriefly why it came out high.\n \n\n(k) Make a biplot of these data, labelling the days by the day\ncount (from 1 to 365). You may have to get the day count from the\noriginal data frame that you read in from the file. You can shrink\nthe day numbers to make them overwrite each other (a bit) less.\n \n\n(l) Looking at your biplot, what do you think was remarkable\nabout the weather on day 37? Day 211? Confirm your guesses by\nlooking at the appropriate rows of your data frame (and comparing\nwith your `summary` from earlier).\n \n\n\n\n\n\nMy solutions follow:\n\n\n\n\n##  The weather, somewhere\n\n\n The data in\n[link](http://ritsokiguess.site/datafiles/weather_2014.csv) is of the\nweather in a certain location: daily weather records for 2014. The\nvariables are:\n\n\n\n* day of the year (1 through 365)\n\n* day of the month\n\n* number of the month\n\n* season\n\n* low temperature (for the day)\n\n* high temperature\n\n* average temperature\n\n* time of the low temperature\n\n* time of the high temperature\n\n* rainfall (mm)\n\n* average wind speed\n\n* wind gust (highest wind speed)\n\n* time of the wind gust\n\n* wind direction\n\n\n\n\n(a) Read in the data, and create a data frame containing only\nthe temperature variables, the rainfall and the wind speed variables\n(the ones that are actual numbers, not times or text). Display the\nfirst few lines of your data frame.\n \nSolution\n\n\nRead into a temporary data frame, and then process:\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/weather_2014.csv\"\nweather.0 <- read_csv(my_url)\nweather.0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 x 14\n   day.count   day month season l.temp h.temp ave.temp l.temp.time h.temp.time\n       <dbl> <dbl> <dbl> <chr>   <dbl>  <dbl>    <dbl> <time>      <time>     \n 1         1     1     1 Winter   12.7   14       13.4 01:25       23:50      \n 2         2     2     1 Winter   11.3   14.7     13.5 07:30       11:15      \n 3         3     3     1 Winter   12.6   14.7     13.6 21:00       14:00      \n 4         4     4     1 Winter    7.7   13.9     11.3 10:35       01:50      \n 5         5     5     1 Winter    8.8   14.6     13   01:40       12:55      \n 6         6     6     1 Winter   11.8   14.4     13.1 19:35       00:05      \n 7         7     7     1 Winter   11.4   14.8     13.5 07:25       14:30      \n 8         8     8     1 Winter   12.4   15.6     14.1 23:50       13:25      \n 9         9     9     1 Winter    9.2   18.4     12.9 07:10       14:05      \n10        10    10     1 Winter    8.3   14.8     11   07:55       12:20      \n# i 355 more rows\n# i 5 more variables: rain <dbl>, ave.wind <dbl>, gust.wind <dbl>,\n#   gust.wind.time <time>, dir.wind <chr>\n```\n:::\n:::\n\n     \n\nThere are lots of columns, of which we only want a few:\n\n::: {.cell}\n\n```{.r .cell-code}\n(weather.0 %>% select(l.temp:ave.temp, rain:gust.wind) -> weather)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 x 6\n   l.temp h.temp ave.temp  rain ave.wind gust.wind\n    <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl>\n 1   12.7   14       13.4  32       11.4      53.1\n 2   11.3   14.7     13.5  64.8      5.6      41.8\n 3   12.6   14.7     13.6  12.7      4.3      38.6\n 4    7.7   13.9     11.3  20.1     10.3      66  \n 5    8.8   14.6     13     9.4     11.6      51.5\n 6   11.8   14.4     13.1  38.9      9.9      57.9\n 7   11.4   14.8     13.5   2        6.6      38.6\n 8   12.4   15.6     14.1   1.5      5.9      33.8\n 9    9.2   18.4     12.9   0        0.2      16.1\n10    8.3   14.8     11     0        1.4      24.1\n# i 355 more rows\n```\n:::\n:::\n\n \n$\\blacksquare$\n\n(b) Find five-number summaries for each column by running\n`quantile` on all the columns of the data frame (at once, if\nyou can).\n \nSolution\n\nI think this is the easiest way:\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>% \n  summarize(across(everything(), \\(x) quantile(x)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\ni Please use `reframe()` instead.\ni When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 6\n  l.temp h.temp ave.temp  rain ave.wind gust.wind\n   <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl>\n1    3.1    9.8      7.3   0        0         3.2\n2    9.1   14.4     12     0        2.3      22.5\n3   12.9   19.1     15.8   0.3      3.5      29  \n4   16.3   23.3     19.3   5.3      5.2      38.6\n5   22.6   31.5     26.6  74.9     16.6      86.9\n```\n:::\n:::\n\nThis loses the actual percents of the percentiles of the five-number summary (because they are \"names\" of the numerical result, and the tidyverse doesn't like names.) I think you can see which percentile is which, though.\n\nAnother way to do it is to make a column of column names, using\n`pivot_longer`, and then use `nest` and list-columns to find\nthe quantiles for each variable:\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>%\n  pivot_longer(everything(), names_to=\"xname\", values_to=\"x\") %>%\n  nest_by(xname) %>%\n  mutate(q = list(enframe(quantile(data$x)))) %>%\n  unnest(q) %>%\n  pivot_wider(names_from=name, values_from=value) %>%\n  select(-data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 6\n# Groups:   xname [6]\n  xname      `0%` `25%` `50%` `75%` `100%`\n  <chr>     <dbl> <dbl> <dbl> <dbl>  <dbl>\n1 ave.temp    7.3  12    15.8  19.3   26.6\n2 ave.wind    0     2.3   3.5   5.2   16.6\n3 gust.wind   3.2  22.5  29    38.6   86.9\n4 h.temp      9.8  14.4  19.1  23.3   31.5\n5 l.temp      3.1   9.1  12.9  16.3   22.6\n6 rain        0     0     0.3   5.3   74.9\n```\n:::\n:::\n\n \n\nThat was a lot of work, but it depends on how you see it when you're coding it. You should investigate this one line at a time, but the steps are:\n\n\n\n* create a \"long\" data frame with one column of variable names and a second with the values for that variable\n\n* make mini-data-frames `data` containing everything but `xname`: that is, one column `x` with the values for that variable.\n\n* for each mini-data-frame, work out the quantiles of its `x`. The `enframe` saves the labels for what percentiles they are.\n\n* Unnest this to make a long data frame with one row for each quantile for each variable.\n\n* put the variable names in rows and the percentiles in columns.\n \n$\\blacksquare$ \n\n(c) Run a principal components analysis (on the correlation matrix).\n \nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather.1 <- princomp(weather, cor = T)\n```\n:::\n\n     \n$\\blacksquare$ \n\n(d) Obtain a `summary` of your principal components\nanalysis. How many components do you think are worth investigating?\n \nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(weather.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImportance of components:\n                          Comp.1    Comp.2     Comp.3     Comp.4     Comp.5\nStandard deviation     1.7830875 1.4138296 0.74407069 0.38584917 0.33552998\nProportion of Variance 0.5299001 0.3331524 0.09227353 0.02481326 0.01876339\nCumulative Proportion  0.5299001 0.8630525 0.95532604 0.98013930 0.99890270\n                            Comp.6\nStandard deviation     0.081140732\nProportion of Variance 0.001097303\nCumulative Proportion  1.000000000\n```\n:::\n:::\n\n     \nThe issue is to see where the standard deviations are getting small\n(after the second component, or perhaps the third one) and to see\nwhere  the cumulative proportion of variance explained is acceptably\nhigh (again, after the second one, 86\\%, or the third, 95\\%).\n \n$\\blacksquare$ \n\n(e) Make a scree plot. Does this\nsupport your conclusion from the previous part?\n \nSolution\n\n\n`ggscreeplot` from `ggbiplot`:\n\n::: {.cell}\n\n```{.r .cell-code}\nggscreeplot(weather.1)\n```\n\n::: {.cell-output-display}\n![](pc_files/figure-pdf/adskjheuya-1.pdf){fig-pos='H'}\n:::\n:::\n\n     \n\nI see elbows at 3 and at 4. Remember you want to be on the mountain\nfor these, not on the scree, so this suggests 2 or 3 components, which\nis exactly what we got from looking at the standard deviations and\ncumulative variance explained.\n\nThe eigenvalue-greater-than-1 thing \n(that is, the \"standard deviation\" in the `summary` being greater than 1)\nsays 2 components, rather than 3.\n \n$\\blacksquare$ \n\n(f) Obtain the component loadings. How do the first three\ncomponents depend on the original variables? (That is, what kind of\nvalues for the original variables would make the component scores\nlarge or small?)\n \nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather.1$loadings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nLoadings:\n          Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 Comp.6\nl.temp     0.465  0.348         0.542  0.470  0.379\nh.temp     0.510  0.231        -0.576 -0.381  0.458\nave.temp   0.502  0.311                      -0.804\nrain      -0.296  0.397  0.853        -0.163       \nave.wind  -0.253  0.560 -0.463  0.357 -0.529       \ngust.wind -0.347  0.507 -0.230 -0.492  0.572       \n\n               Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 Comp.6\nSS loadings     1.000  1.000  1.000  1.000  1.000  1.000\nProportion Var  0.167  0.167  0.167  0.167  0.167  0.167\nCumulative Var  0.167  0.333  0.500  0.667  0.833  1.000\n```\n:::\n:::\n\n     \n\n\n\n* 1: This component loads mainly (and positively) on the temperature\nvariables, so when temperature is high, component 1 is high.\nYou could also say that it loads negatively on the other\nvariables, in which case component 1 is high if the temperature\nvariables are low and the rain and wind variables are high.\n\n\n* 2: This one loads most heavily, positively, on wind: when wind is high,\ncomponent 2 is high. Again, you can make the judgement call that the\nother variables also feature in component 2, so that when\n*everything* is large, component 2 is large and small with small.\n\n* 3: This one is a bit clearer. The blank loadings are close to 0,\nand can be ignored. The main thing in component 3 is rain: when\nrainfall is large, component 3 is large. Or, if you like, it is\nlarge (positive) when rainfall is large *and wind is small*.\n\n\nThe interpretation here is kind of muffled, because each component has\nbits of everything. One of the advantages of factor analysis that we\nsee in class later is that\nyou can do a \"rotation\" so that each variable (to a greater extent)\nis either *in* a factor or *out* of it. Such a varimax rotation\nis the default for `factanal`, which I presume I now have to\nshow you (so this is looking ahead): \n\n::: {.cell}\n\n```{.r .cell-code}\nweather.2 <- factanal(weather, 3, scores = \"r\")\nweather.2$loadings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nLoadings:\n          Factor1 Factor2 Factor3\nl.temp     0.964          -0.230 \nh.temp     0.939  -0.203   0.267 \nave.temp   0.992  -0.101         \nrain      -0.147   0.604         \nave.wind           0.864         \ngust.wind -0.144   0.984         \n\n               Factor1 Factor2 Factor3\nSS loadings      2.839   2.131   0.140\nProportion Var   0.473   0.355   0.023\nCumulative Var   0.473   0.828   0.852\n```\n:::\n:::\n\n \n\nThese are a lot less ambiguous: factor 1 is temperature, factor 2 is\nrain and wind, and factor 3 is large (positive) if the high\ntemperature is high or the low temperature is low: that is, if the\nhigh temperature was especially high relative to the low temperature\n(or, said differently, if the temperature *range* was high).\n\nThese factors are rather pleasantly interpretable.\n\n`ggbiplot` mysteriously doesn't handle factor analyses, so we\nhave to go back to the base-graphics version, which goes a bit like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nbiplot(weather.2$scores, weather.2$loadings)\n```\n\n::: {.cell-output-display}\n![](pc_files/figure-pdf/weather-2014-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n \n\nNow you see that the factors are aligned with the axes, and it's very\nclear what the factors \"represent\". (You don't see much else, in all\nhonesty, but you see at least this much.)\n \n$\\blacksquare$ \n\n(g) Obtain the principal component scores, for as many components\nas you think are reasonable, and display the first\n20 of them for each component alongside the other variables in your\ndata frame.\n \nSolution\n\n\nSomething like this. I begin by turning the component scores\n(which are a matrix) into a data frame, and selecting the ones I\nwant (the first three):\n\n::: {.cell}\n\n:::\n\n      \n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(weather.1$scores) %>%\n  select(1:3) %>%\n  bind_cols(weather) %>%\n  mutate(day = row_number()) -> d\nd \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 x 10\n   Comp.1 Comp.2   Comp.3 l.temp h.temp ave.temp  rain ave.wind gust.wind   day\n    <dbl>  <dbl>    <dbl>  <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl> <int>\n 1 -2.84   3.13  -0.00402   12.7   14       13.4  32       11.4      53.1     1\n 2 -2.79   2.31   3.64      11.3   14.7     13.5  64.8      5.6      41.8     2\n 3 -1.11   0.255  0.263     12.6   14.7     13.6  12.7      4.3      38.6     3\n 4 -3.62   2.47  -0.992      7.7   13.9     11.3  20.1     10.3      66       4\n 5 -2.67   2.03  -1.68       8.8   14.6     13     9.4     11.6      51.5     5\n 6 -3.09   3.14   0.664     11.8   14.4     13.1  38.9      9.9      57.9     6\n 7 -1.22   0.328 -0.958     11.4   14.8     13.5   2        6.6      38.6     7\n 8 -0.734  0.102 -0.743     12.4   15.6     14.1   1.5      5.9      33.8     8\n 9  0.210 -2.26   0.534      9.2   18.4     12.9   0        0.2      16.1     9\n10 -0.825 -2.00   0.109      8.3   14.8     11     0        1.4      24.1    10\n# i 355 more rows\n```\n:::\n:::\n\n      \nI just did the first three scores. I made a column `day` so that I can see which day of the year I am looking at (later).\n\n$\\blacksquare$ \n\n(h) Find a day that scores low on component 1, and explain briefly why\nit came out that way (by looking at the measured variables).\n \nSolution\n\n\nWe can do this one and the ones following by running\n`arrange` appropriately:\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% arrange(Comp.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 x 10\n   Comp.1 Comp.2 Comp.3 l.temp h.temp ave.temp  rain ave.wind gust.wind   day\n    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl> <int>\n 1  -5.29  4.64  -0.294    7     14.4      9.9  43.2     13        86.9    40\n 2  -4.89  3.50   1.64     6.5   12.9     10.3  57.4     10.3      66      35\n 3  -4.64  5.33  -0.653    9.3   15.3     12.5  43.4     16.6      74      37\n 4  -4.57  2.19  -1.49     5.5   10.7      8.8  17       11.1      69.2    41\n 5  -4.48  2.11   1.90     6.8   11.5      8.9  50.5      6.8      61.2    34\n 6  -4.36  4.45   1.06     9.1   15.2     12.2  55.1     12.8      66      45\n 7  -3.82  2.24   0.532    7.8   12.9     10.7  34.8      8.1      62.8    39\n 8  -3.62  2.47  -0.992    7.7   13.9     11.3  20.1     10.3      66       4\n 9  -3.44  0.576 -2.10     5.7   11.4      8.4   0        9.8      51.5   363\n10  -3.36  2.19  -0.705    9.1   13       11.3  20.3      9.3      62.8    38\n# i 355 more rows\n```\n:::\n:::\n\n       \nDay 40 has the lowest component 1 score. This is one of the\ncooler days. Also, there is a\nlargish amount of rain *and* wind. So low temperature, high\nrain and wind.\nSome of the other days on my list were cooler than day 4, but they\nhad less rain and less wind.\n  \n$\\blacksquare$\n\n(i) Find a day that scores high on component 2, and explain\nbriefly why it came out that way.\n \nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% arrange(desc(Comp.2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 x 10\n    Comp.1 Comp.2  Comp.3 l.temp h.temp ave.temp  rain ave.wind gust.wind   day\n     <dbl>  <dbl>   <dbl>  <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl> <int>\n 1 -4.64     5.33 -0.653     9.3   15.3     12.5  43.4     16.6      74      37\n 2 -5.29     4.64 -0.294     7     14.4      9.9  43.2     13        86.9    40\n 3 -4.36     4.45  1.06      9.1   15.2     12.2  55.1     12.8      66      45\n 4 -1.61     4.33  3.43     17.7   19.1     18.3  68.3      8.3      46.7   261\n 5 -1.02     3.63  1.36     16.8   20.4     19    39.1      6.9      59.5   289\n 6  2.42     3.51 -1.39     20.9   31.2     25.7   0        8.8      46.7   166\n 7 -4.89     3.50  1.64      6.5   12.9     10.3  57.4     10.3      66      35\n 8  0.0301   3.49 -0.0846   18.5   22.3     20.3  22.9     10.3      43.5   260\n 9 -0.745    3.45  1.99     15.9   21.4     19.9  46.2      7.7      45.1   281\n10 -0.105    3.20 -0.493    17.9   21.8     19.5  16.5      9.3      49.9   290\n# i 355 more rows\n```\n:::\n:::\n\n       \nDay 37. These are days when the wind speed (average or\ngust) is on the high side. \n\n$\\blacksquare$ \n\n(j) Find a day that scores high on component 3, and explain\nbriefly why it came out high.\n \nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% arrange(desc(Comp.3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 x 10\n    Comp.1 Comp.2 Comp.3 l.temp h.temp ave.temp  rain ave.wind gust.wind   day\n     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl> <int>\n 1 -2.32    2.23    4.92   11.8   17.2     14.6  74.9      2.8      41.8   307\n 2 -2.79    2.31    3.64   11.3   14.7     13.5  64.8      5.6      41.8     2\n 3  0.0819  2.90    3.59   16.1   26.6     20.3  54.4      2        49.9   264\n 4 -1.61    4.33    3.43   17.7   19.1     18.3  68.3      8.3      46.7   261\n 5 -0.759   2.48    3.42   15.7   19.5     18.6  55.6      4.5      37     288\n 6 -2.21    3.12    2.15   12.8   17.7     15.8  50.5      7.2      53.1   317\n 7 -0.745   3.45    1.99   15.9   21.4     19.9  46.2      7.7      45.1   281\n 8 -4.48    2.11    1.90    6.8   11.5      8.9  50.5      6.8      61.2    34\n 9 -1.77    0.693   1.72   10.7   15.6     13    32.8      4        38.6   312\n10 -4.89    3.50    1.64    6.5   12.9     10.3  57.4     10.3      66      35\n# i 355 more rows\n```\n:::\n:::\n\n \nDay 307. Component 3 was mainly rain, so it is not surprising that\nthe rainfall is the highest on this day.\n\n$\\blacksquare$ \n\n(k) Make a biplot of these data, labelling the days by the day\ncount (from 1 to 365). You may have to get the day count from the\noriginal data frame that you read in from the file. You can shrink\nthe day numbers to make them overwrite each other (a bit) less.\n \nSolution\n\n\n`ggbiplot`. I did some digging in the help file to figure\nout how to label the points by a variable and how to control the\nsize of the labels, and I also went digging in the data frame\nthat I read in from the file to get the count of the day in the\nyear, which was called `day.count`:\n\n::: {.cell}\n\n```{.r .cell-code}\nggbiplot(weather.1, labels = weather.0$day.count, labels.size = 2)\n```\n\n::: {.cell-output-display}\n![](pc_files/figure-pdf/weather-2014-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n     \n\nI think the label text is small enough, though you could make it\nsmaller. I'll be asking you to look at some extreme points in a\nmoment, so those are the only ones you'll need to be able to\ndisentangle. \n\nThe variables divide into two groups: the temperature ones, that point\nto about 2 o'clock, and the wind and rain ones, that point to about 11\no'clock. These are not straight up or down or across, so they all\nfeature in both components: component 1 is mostly temperature, but has\na bit of wind/rain in it, while component 2 is mostly wind/rain with a\nbit of temperature in it. You might be wondering whether things\ncouldn't be rotated so that, say, the temperature variables go across\nand the rain/wind ones go down, which means you'd have a temperature\ncomponent and a rain/wind component. This is what factor analysis\ndoes, and I think I did that earlier (and this is what we found).\n \n$\\blacksquare$\n\n(l) Looking at your biplot, what do you think was remarkable\nabout the weather on day 37? Day 211? Confirm your guesses by\nlooking at the appropriate rows of your data frame (and comparing\nwith your `summary` from earlier).\n \nSolution\n\n\nDay 37 is at the top left of the plot, at the pointy end of\nthe arrows for rain, wind gust and average wind. This suggests a\nrainy, windy day:\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>% slice(37)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 6\n  l.temp h.temp ave.temp  rain ave.wind gust.wind\n   <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl>\n1    9.3   15.3     12.5  43.4     16.6        74\n```\n:::\n:::\n\n     \n\nThose are high numbers for both rain and wind (the highest for average\nwind and above the third quartile otherwise), but the temperatures\nare unremarkable.\n\nDay 211 is towards the pointy end of the arrows for temperature, so\nthis is a hot day:\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>% slice(211)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 6\n  l.temp h.temp ave.temp  rain ave.wind gust.wind\n   <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl>\n1   22.6   31.5     26.6     0      4.5      33.8\n```\n:::\n:::\n\n \n\nThis is actually the hottest day of the entire year: day 211 is\nhighest on all three temperatures, while the \nwind speeds are right around average (and no rain is not completely\nsurprising). \n\nI can do a couple more. Points away from the pointy end of the arrows\nare *low* on the variables in question, for example day 265:\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>% slice(265)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 6\n  l.temp h.temp ave.temp  rain ave.wind gust.wind\n   <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl>\n1   16.6   20.3     18.1   6.3        0       3.2\n```\n:::\n:::\n\n \n\nThis is not really low rain, but it is definitely low\n*wind*. What about day 47?\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>% slice(47)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 6\n  l.temp h.temp ave.temp  rain ave.wind gust.wind\n   <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl>\n1    3.1   11.8      7.3   0.8        2      24.1\n```\n:::\n:::\n\n \n\nThis is predominantly low on temperature. In fact, it is kind of low\non wind and rain too.^[If you ignore the wind gust, anyway.]\nThis makes sense, because not only is it at the \"wrong\" end of the\ntemperature arrows, it is kind of at the wrong end of the wind/rain\narrows as well.\n\nHaving done these by percentile ranks in one of the other questions,\nlet's see if we can do that here as well:\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>% mutate(across(everything(), \\(x) percent_rank(x))) %>% \n    slice(c(37, 211, 265, 47))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 6\n  l.temp h.temp ave.temp  rain ave.wind gust.wind\n   <dbl>  <dbl>    <dbl> <dbl>    <dbl>     <dbl>\n1  0.264 0.316     0.299 0.973    1         0.997\n2  1     0.997     1     0        0.654     0.626\n3  0.783 0.560     0.635 0.761    0         0    \n4  0     0.0275    0     0.582    0.162     0.275\n```\n:::\n:::\n\nThe idea here is that we want to *replace* all the data values by the percent-rank version of themselves, rather than *summarizing* them as we have done before. That's what using an `across` inside a `mutate` will do.^[There are also options to keep the original variables, and to give the new ones new names.]\n \n\nThese are:\n\n\n\n* Day 37: highly rainy and windy (and below average,\nbut not remarkably so, on temperature). \n\n* Day 211: the highest or near-highest temperature, no rain but\nunremarkable for wind.\n\n* Day 265: Lowest for wind (and above Q3 for low temperature and\nrain). \n\n* Day 47: Lowest or near-lowest temperature.\n\n\nThe advantage to doing it this way is that you don't need a separate\nfive-number summary for each variable; the percentile ranks\n*give* you a comparison with quartiles (or any other percentile\nof interest to you).\nIn case you are wondering where this is: I was doing a presentation\nusing these data to some Environmental Science grad students, and I\nhad them guess where it was. The temperatures for the whole year are\nwarm-temperate, with a smallish range, and sometimes a lot of\nrain. This suggests a maritime climate. I gave the additional clues of\n\"western Europe\" and \n\"this place's soccer team plays in blue and white striped shirts\". \nThe temperatures have about the right range\nlow-to-high for Britain, but are too warm. Which suggests going south:\nperhaps Brittany in France, but actually the west\ncoast of the Iberian peninsula: Porto, in northern Portugal, with the\nweather blowing in off the Atlantic. \n\n$\\blacksquare$\n\n",
    "supporting": [
      "pc_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}