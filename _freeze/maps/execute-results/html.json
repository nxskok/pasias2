{
  "hash": "cf24d3edde34c6e0adbabc2349d70e7e",
  "result": {
    "markdown": "# Drawing maps with Leaflet\n\nPackages for this chapter:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggbiplot)\nlibrary(tidyverse)\nlibrary(ggrepel)\n```\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n##  Making a map of Wisconsin\n\n\n The file\n[link](http://ritsokiguess.site/datafiles/wisconsin.txt) contains\nthe road distances (in miles) between 12 cities in Wisconsin and\nneighbouring states. We are going to try to draw a map of the\narea using Leaflet.\n\n\n(a) Read in the data, displaying\nthe data that you read in.\n\n\n\n\n(b) Make a dataframe containing the names of the locations (get rid of the columns containing distances), and add a column of the abbreviations of the states they are in. All of them are in Wisconsin (WI), except for the\nlast three: Dubuque is in Iowa (IA), St.\\ Paul is in Minnesota (MN) and Chicago\nis in Illinois (IL).\n\n\n(c) Create a new column in which the abbreviation for the state is glued on to the end of each `location`, separated by a space.\n\n\n(d) Look up the latitudes and longitudes of these twelve places.\n\n\n(e) Obtain a Leaflet map of the area containing these\ntwelve cities. \n \n\n\n\n\n## The Cross-City Line\n\nWhen I went to university (in Birmingham, England, a long time ago), I was very excited because I would be travelling to campus by train. My journey was on the Cross-City Line, a metro-type service with lots of stops short distances apart, but run in those days by diesel trains (the electrification came later). \n\n::: {.cell}\n\n:::\n\n\nA list of the stations on the line is in [http://ritsokiguess.site/datafiles/cross-city.csv](http://ritsokiguess.site/datafiles/cross-city.csv). There is one column in the data file, called `station`. We are going to draw a map of these.\n\n(a) Read in and display (some of) the station names.\n\n\n(b) In preparation for geocoding, create a second column in the dataframe that consists of the station names with \"station UK\" on the end. (This is to improve the chances of the geocoder finding the actual railway station.)\n\n\n(c) Look up the longitudes and latitudes of all the stations, organizing your dataframe so that they are visible.\n\n\n(d) Make a Leaflet map of the stations. Use circle markers or the \"pin\" markers as you prefer.\n\n\n\n(e) Zoom in to see whether the geocoding did indeed find each of the stations. Comment briefly on what you find.\n\n\n\n\n##  The brain of a cat, revisited\n\nEarlier, we looked at an ethics study that had to do with a fictional brain of a fictional cat. I said\nthere was actually a *town* called Catbrain. It's in England,\nnear Bristol, and seems to be home to a street of car dealerships.\n\n\n(a) Find the latitude and longitude of \"Catbrain UK\" (though I don't think there are any others).\n\n\n(b) Draw a map of Catbrain using Leaflet.\n\n\n\n(c) Make a dataframe containing some other British cities as well as Catbrain, and find their latitudes and longitudes.\n\n\n\n(d) Draw a map containing the places you picked.\n\n\n\n\n\n\n\nMy solutions follow:\n\n\n\n\n\n##  Making a map of Wisconsin\n\n\n The file\n[link](http://ritsokiguess.site/datafiles/wisconsin.txt) contains\nthe road distances (in miles) between 12 cities in Wisconsin and\nneighbouring states. We are going to try to draw a map of the\narea using Leaflet.\n\n\n(a) Read in the data, displaying\nthe data that you read in.\n\n\nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/wisconsin.txt\"\nwisc <- read_table(my_url)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  location = col_character(),\n  Appleton = col_double(),\n  Beloit = col_double(),\n  Fort.Atkinson = col_double(),\n  Madison = col_double(),\n  Marshfield = col_double(),\n  Milwaukee = col_double(),\n  Monroe = col_double(),\n  Superior = col_double(),\n  Wausau = col_double(),\n  Dubuque = col_double(),\n  St.Paul = col_double(),\n  Chicago = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\nwisc\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Appleton\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Beloit\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Fort.Atkinson\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Madison\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Marshfield\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Milwaukee\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Monroe\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Superior\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Wausau\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Dubuque\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"St.Paul\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Chicago\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"0\",\"3\":\"130\",\"4\":\"98\",\"5\":\"102\",\"6\":\"103\",\"7\":\"100\",\"8\":\"149\",\"9\":\"315\",\"10\":\"91\",\"11\":\"196\",\"12\":\"257\",\"13\":\"186\"},{\"1\":\"Beloit\",\"2\":\"130\",\"3\":\"0\",\"4\":\"33\",\"5\":\"50\",\"6\":\"185\",\"7\":\"73\",\"8\":\"33\",\"9\":\"377\",\"10\":\"186\",\"11\":\"94\",\"12\":\"304\",\"13\":\"97\"},{\"1\":\"Fort.Atkinson\",\"2\":\"98\",\"3\":\"33\",\"4\":\"0\",\"5\":\"36\",\"6\":\"164\",\"7\":\"54\",\"8\":\"58\",\"9\":\"359\",\"10\":\"166\",\"11\":\"119\",\"12\":\"287\",\"13\":\"113\"},{\"1\":\"Madison\",\"2\":\"102\",\"3\":\"50\",\"4\":\"36\",\"5\":\"0\",\"6\":\"138\",\"7\":\"77\",\"8\":\"47\",\"9\":\"330\",\"10\":\"139\",\"11\":\"95\",\"12\":\"258\",\"13\":\"146\"},{\"1\":\"Marshfield\",\"2\":\"103\",\"3\":\"185\",\"4\":\"164\",\"5\":\"138\",\"6\":\"0\",\"7\":\"184\",\"8\":\"170\",\"9\":\"219\",\"10\":\"45\",\"11\":\"186\",\"12\":\"161\",\"13\":\"276\"},{\"1\":\"Milwaukee\",\"2\":\"100\",\"3\":\"73\",\"4\":\"54\",\"5\":\"77\",\"6\":\"184\",\"7\":\"0\",\"8\":\"107\",\"9\":\"394\",\"10\":\"181\",\"11\":\"168\",\"12\":\"322\",\"13\":\"92\"},{\"1\":\"Monroe\",\"2\":\"149\",\"3\":\"33\",\"4\":\"58\",\"5\":\"47\",\"6\":\"170\",\"7\":\"107\",\"8\":\"0\",\"9\":\"362\",\"10\":\"186\",\"11\":\"61\",\"12\":\"289\",\"13\":\"130\"},{\"1\":\"Superior\",\"2\":\"315\",\"3\":\"377\",\"4\":\"359\",\"5\":\"330\",\"6\":\"219\",\"7\":\"394\",\"8\":\"362\",\"9\":\"0\",\"10\":\"223\",\"11\":\"351\",\"12\":\"162\",\"13\":\"467\"},{\"1\":\"Wausau\",\"2\":\"91\",\"3\":\"186\",\"4\":\"166\",\"5\":\"139\",\"6\":\"45\",\"7\":\"181\",\"8\":\"186\",\"9\":\"223\",\"10\":\"0\",\"11\":\"215\",\"12\":\"175\",\"13\":\"275\"},{\"1\":\"Dubuque\",\"2\":\"196\",\"3\":\"94\",\"4\":\"119\",\"5\":\"95\",\"6\":\"186\",\"7\":\"168\",\"8\":\"61\",\"9\":\"351\",\"10\":\"215\",\"11\":\"0\",\"12\":\"274\",\"13\":\"184\"},{\"1\":\"St.Paul\",\"2\":\"257\",\"3\":\"304\",\"4\":\"287\",\"5\":\"258\",\"6\":\"161\",\"7\":\"322\",\"8\":\"289\",\"9\":\"162\",\"10\":\"175\",\"11\":\"274\",\"12\":\"0\",\"13\":\"395\"},{\"1\":\"Chicago\",\"2\":\"186\",\"3\":\"97\",\"4\":\"113\",\"5\":\"146\",\"6\":\"276\",\"7\":\"93\",\"8\":\"130\",\"9\":\"467\",\"10\":\"275\",\"11\":\"184\",\"12\":\"395\",\"13\":\"0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n       \n\nThe first time I did this, I had a blank line on the end of the data\nfile, so I had a blank `location` and missing values for all\nthe distances for it. I tidied that up before sharing the file with\nyou, though.\n\n$\\blacksquare$\n\n\n(b) Make a dataframe containing the names of the locations (get rid of the columns containing distances), and add a column of the abbreviations of the states they are in. All of them are in Wisconsin (WI), except for the\nlast three: Dubuque is in Iowa (IA), St.\\ Paul is in Minnesota (MN) and Chicago\nis in Illinois (IL).\n\nSolution\n\nThere seems to be a bit of base R attached to this, however you do it. I am going to create a dataframe pretending they are all in Wisconsin, and then fix it up afterwards:\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc %>% \n  select(!where(is.numeric)) %>% \n  mutate(state = \"WI\") -> wisc\nwisc\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\"},{\"1\":\"Beloit\",\"2\":\"WI\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\"},{\"1\":\"Madison\",\"2\":\"WI\"},{\"1\":\"Marshfield\",\"2\":\"WI\"},{\"1\":\"Milwaukee\",\"2\":\"WI\"},{\"1\":\"Monroe\",\"2\":\"WI\"},{\"1\":\"Superior\",\"2\":\"WI\"},{\"1\":\"Wausau\",\"2\":\"WI\"},{\"1\":\"Dubuque\",\"2\":\"WI\"},{\"1\":\"St.Paul\",\"2\":\"WI\"},{\"1\":\"Chicago\",\"2\":\"WI\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n(I checked that in this question I didn't need the road distances for anything, so I saved it back into the original dataframe. Also, the `select` is unnecessarily fancy: I could have just selected the `location` column, but this one says \"don't select any of the columns that are numeric\".) \n\nNow we have to fix up the states of the last three places, which is where the base R seems to come in (but see the Extra):\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc$state[10] <- \"IA\"\nwisc$state[11] <- \"MN\"\nwisc$state[12] <- \"IL\"\nwisc\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\"},{\"1\":\"Beloit\",\"2\":\"WI\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\"},{\"1\":\"Madison\",\"2\":\"WI\"},{\"1\":\"Marshfield\",\"2\":\"WI\"},{\"1\":\"Milwaukee\",\"2\":\"WI\"},{\"1\":\"Monroe\",\"2\":\"WI\"},{\"1\":\"Superior\",\"2\":\"WI\"},{\"1\":\"Wausau\",\"2\":\"WI\"},{\"1\":\"Dubuque\",\"2\":\"IA\"},{\"1\":\"St.Paul\",\"2\":\"MN\"},{\"1\":\"Chicago\",\"2\":\"IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe states of the last three locations are now correct.\n\nExtra: I didn't know about the following until literally just now, but there is a `tidyverse` way to do this as well (that may look familiar to those of you that know about SQL). Let's start by pretending again that everything is in Wisconsin:\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc %>% \n  mutate(state = \"WI\") -> wisc2\nwisc2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\"},{\"1\":\"Beloit\",\"2\":\"WI\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\"},{\"1\":\"Madison\",\"2\":\"WI\"},{\"1\":\"Marshfield\",\"2\":\"WI\"},{\"1\":\"Milwaukee\",\"2\":\"WI\"},{\"1\":\"Monroe\",\"2\":\"WI\"},{\"1\":\"Superior\",\"2\":\"WI\"},{\"1\":\"Wausau\",\"2\":\"WI\"},{\"1\":\"Dubuque\",\"2\":\"WI\"},{\"1\":\"St.Paul\",\"2\":\"WI\"},{\"1\":\"Chicago\",\"2\":\"WI\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nand then change the ones that need changing. What you do is to make a little dataframe of the ones that need changing:\n\n::: {.cell}\n\n```{.r .cell-code}\nchanges <- tribble(\n  ~location, ~state,\n  \"Dubuque\", \"IA\",\n  \"St.Paul\", \"MN\",\n  \"Chicago\", \"IL\"\n)\nchanges\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Dubuque\",\"2\":\"IA\"},{\"1\":\"St.Paul\",\"2\":\"MN\"},{\"1\":\"Chicago\",\"2\":\"IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nNote that the columns in here have *exactly* the same names as the ones in the original dataframe where everything was in Wisconsin. \n\n\nI did this by copy-pasting the city names whose states needed changing out of the display of my `wisc2`. You might think that a left join is what we need now, and it almost is. Note that I want to match the locations but *not* the states:\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc2 %>% left_join(changes, by = \"location\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state.x\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state.y\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Beloit\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Madison\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Marshfield\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Milwaukee\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Monroe\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Superior\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Wausau\",\"2\":\"WI\",\"3\":\"NA\"},{\"1\":\"Dubuque\",\"2\":\"WI\",\"3\":\"IA\"},{\"1\":\"St.Paul\",\"2\":\"WI\",\"3\":\"MN\"},{\"1\":\"Chicago\",\"2\":\"WI\",\"3\":\"IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nand the story here is that if `state.y` has a value, use that, otherwise use  the value in `state.x`. This can even be done: there is a function `coalesce`^[I knew this existed, but I couldn't remember what it was called, which made it hard to search for. My first port of call was `na_if`, which converts values to `NA`, the opposite of what I wanted. But from its See Also I got `na_replace`, and from the See Also of that, I found out what `coalesce` does.]  that will do exactly that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc2 %>% left_join(changes, by = \"location\") %>% \n  mutate(state=coalesce(state.y, state.x))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state.x\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state.y\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Beloit\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Madison\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Marshfield\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Milwaukee\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Monroe\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Superior\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Wausau\",\"2\":\"WI\",\"3\":\"NA\",\"4\":\"WI\"},{\"1\":\"Dubuque\",\"2\":\"WI\",\"3\":\"IA\",\"4\":\"IA\"},{\"1\":\"St.Paul\",\"2\":\"WI\",\"3\":\"MN\",\"4\":\"MN\"},{\"1\":\"Chicago\",\"2\":\"WI\",\"3\":\"IL\",\"4\":\"IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe idea behind `coalesce` is that you give it a list of columns, and the first one of those that is *not missing* gives its value to the new column. So I feed it `state.y` *first*, and then `state.x`, and the new `state` contains the right things. (Can you explain what happens if you do it the other way around?)\n\nBut, there is a better way. Let's go back to our all-Wisconsin dataframe:\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\"},{\"1\":\"Beloit\",\"2\":\"WI\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\"},{\"1\":\"Madison\",\"2\":\"WI\"},{\"1\":\"Marshfield\",\"2\":\"WI\"},{\"1\":\"Milwaukee\",\"2\":\"WI\"},{\"1\":\"Monroe\",\"2\":\"WI\"},{\"1\":\"Superior\",\"2\":\"WI\"},{\"1\":\"Wausau\",\"2\":\"WI\"},{\"1\":\"Dubuque\",\"2\":\"WI\"},{\"1\":\"St.Paul\",\"2\":\"WI\"},{\"1\":\"Chicago\",\"2\":\"WI\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nand our dataframe of corrections to make:\n\n::: {.cell}\n\n```{.r .cell-code}\nchanges\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Dubuque\",\"2\":\"IA\"},{\"1\":\"St.Paul\",\"2\":\"MN\"},{\"1\":\"Chicago\",\"2\":\"IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nWe can make those changes in one step, thus:\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc2 %>% \n  rows_update(changes) -> wisc\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nMatching, by = \"location\"\n```\n:::\n\n```{.r .cell-code}\nwisc\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\"},{\"1\":\"Beloit\",\"2\":\"WI\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\"},{\"1\":\"Madison\",\"2\":\"WI\"},{\"1\":\"Marshfield\",\"2\":\"WI\"},{\"1\":\"Milwaukee\",\"2\":\"WI\"},{\"1\":\"Monroe\",\"2\":\"WI\"},{\"1\":\"Superior\",\"2\":\"WI\"},{\"1\":\"Wausau\",\"2\":\"WI\"},{\"1\":\"Dubuque\",\"2\":\"IA\"},{\"1\":\"St.Paul\",\"2\":\"MN\"},{\"1\":\"Chicago\",\"2\":\"IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThis works because the *first* column of `changes`, namely `location`, is the one that is looked up in `wisc2`. (`rows_update` has a `by` in the same way that `left_join` does if you want to change this.) So all three locations in `changes` are looked up in `wisc2`, and any that match have their `state` changed to the one in `changes`.\n\nIn database terms, the `location` is known as a \"key\" column. That means that each city appears *once only* in the column, and so the replacements in `wisc` are only happening once. To a statistician, `location` is an \"identifier variable\", identifying the individuals in the dataset. Unless you are doing something like repeated measures, each individual will only give you one measurement, but even then, if you have wide format, the identifier variables will still only appear once.\n\nMagic. Now that I have learned about this, I will be using it a lot.\n\n$\\blacksquare$\n\n(c) Create a new column in which the abbreviation for the state is glued on to the end of each `location`, separated by a space.\n\nSolution\n\nA couple of ways: a literal gluing, using `paste`:\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc %>% \n  mutate(lookup = paste(location, state))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"lookup\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\",\"3\":\"Appleton WI\"},{\"1\":\"Beloit\",\"2\":\"WI\",\"3\":\"Beloit WI\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\",\"3\":\"Fort.Atkinson WI\"},{\"1\":\"Madison\",\"2\":\"WI\",\"3\":\"Madison WI\"},{\"1\":\"Marshfield\",\"2\":\"WI\",\"3\":\"Marshfield WI\"},{\"1\":\"Milwaukee\",\"2\":\"WI\",\"3\":\"Milwaukee WI\"},{\"1\":\"Monroe\",\"2\":\"WI\",\"3\":\"Monroe WI\"},{\"1\":\"Superior\",\"2\":\"WI\",\"3\":\"Superior WI\"},{\"1\":\"Wausau\",\"2\":\"WI\",\"3\":\"Wausau WI\"},{\"1\":\"Dubuque\",\"2\":\"IA\",\"3\":\"Dubuque IA\"},{\"1\":\"St.Paul\",\"2\":\"MN\",\"3\":\"St.Paul MN\"},{\"1\":\"Chicago\",\"2\":\"IL\",\"3\":\"Chicago IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nor the same idea using `str_c` from `stringr` (part of the tidyverse), only this time you have to supply the space yourself:\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc %>% \n  mutate(lookup = str_c(location, \" \", state))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"lookup\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton\",\"2\":\"WI\",\"3\":\"Appleton WI\"},{\"1\":\"Beloit\",\"2\":\"WI\",\"3\":\"Beloit WI\"},{\"1\":\"Fort.Atkinson\",\"2\":\"WI\",\"3\":\"Fort.Atkinson WI\"},{\"1\":\"Madison\",\"2\":\"WI\",\"3\":\"Madison WI\"},{\"1\":\"Marshfield\",\"2\":\"WI\",\"3\":\"Marshfield WI\"},{\"1\":\"Milwaukee\",\"2\":\"WI\",\"3\":\"Milwaukee WI\"},{\"1\":\"Monroe\",\"2\":\"WI\",\"3\":\"Monroe WI\"},{\"1\":\"Superior\",\"2\":\"WI\",\"3\":\"Superior WI\"},{\"1\":\"Wausau\",\"2\":\"WI\",\"3\":\"Wausau WI\"},{\"1\":\"Dubuque\",\"2\":\"IA\",\"3\":\"Dubuque IA\"},{\"1\":\"St.Paul\",\"2\":\"MN\",\"3\":\"St.Paul MN\"},{\"1\":\"Chicago\",\"2\":\"IL\",\"3\":\"Chicago IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nor a way you might have forgotten, using `unite` (which is the inverse of `separate`):\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc %>% \n  unite(lookup, c(location, state), sep = \" \") -> wisc\nwisc\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"lookup\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Appleton WI\"},{\"1\":\"Beloit WI\"},{\"1\":\"Fort.Atkinson WI\"},{\"1\":\"Madison WI\"},{\"1\":\"Marshfield WI\"},{\"1\":\"Milwaukee WI\"},{\"1\":\"Monroe WI\"},{\"1\":\"Superior WI\"},{\"1\":\"Wausau WI\"},{\"1\":\"Dubuque IA\"},{\"1\":\"St.Paul MN\"},{\"1\":\"Chicago IL\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThis last one is my favourite, because it gets rid of the two constituent columns `location` and `state` that we don't need any more. The syntax is the name of the new column, a vector of columns to unite together, and (optionally) what to separate the joined-together values with. The default for that is an underscore, but here we want a space because that's what the geocoder (coming up) expects.\n\n$\\blacksquare$\n\n(d) Look up the latitudes and longitudes of these twelve places.\n\nSolution\n\nThis is geocoding, with the disentangling afterwards that is (I hope) becoming familiar:\n\n::: {.cell}\n\n```{.r .cell-code}\nwisc %>% \n  rowwise() %>% \n  mutate(ll = list(geocode_OSM(lookup))) %>% \n  unnest_wider(ll) %>% \n  unnest_wider(coords) -> wisc\nwisc\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"lookup\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"query\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bbox\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Appleton WI\",\"2\":\"Appleton WI\",\"3\":\"-88.40697\",\"4\":\"44.26140\",\"5\":\"<bbox>\"},{\"1\":\"Beloit WI\",\"2\":\"Beloit WI\",\"3\":\"-89.03178\",\"4\":\"42.50833\",\"5\":\"<bbox>\"},{\"1\":\"Fort.Atkinson WI\",\"2\":\"Fort.Atkinson WI\",\"3\":\"-88.83705\",\"4\":\"42.92889\",\"5\":\"<bbox>\"},{\"1\":\"Madison WI\",\"2\":\"Madison WI\",\"3\":\"-89.38376\",\"4\":\"43.07476\",\"5\":\"<bbox>\"},{\"1\":\"Marshfield WI\",\"2\":\"Marshfield WI\",\"3\":\"-90.17180\",\"4\":\"44.66885\",\"5\":\"<bbox>\"},{\"1\":\"Milwaukee WI\",\"2\":\"Milwaukee WI\",\"3\":\"-87.92250\",\"4\":\"43.03499\",\"5\":\"<bbox>\"},{\"1\":\"Monroe WI\",\"2\":\"Monroe WI\",\"3\":\"-90.63973\",\"4\":\"43.94168\",\"5\":\"<bbox>\"},{\"1\":\"Superior WI\",\"2\":\"Superior WI\",\"3\":\"-92.10408\",\"4\":\"46.72077\",\"5\":\"<bbox>\"},{\"1\":\"Wausau WI\",\"2\":\"Wausau WI\",\"3\":\"-89.62982\",\"4\":\"44.95960\",\"5\":\"<bbox>\"},{\"1\":\"Dubuque IA\",\"2\":\"Dubuque IA\",\"3\":\"-90.66480\",\"4\":\"42.50062\",\"5\":\"<bbox>\"},{\"1\":\"St.Paul MN\",\"2\":\"St.Paul MN\",\"3\":\"-93.09310\",\"4\":\"44.94975\",\"5\":\"<bbox>\"},{\"1\":\"Chicago IL\",\"2\":\"Chicago IL\",\"3\":\"-87.62442\",\"4\":\"41.87556\",\"5\":\"<bbox>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nYes, I forgot the `rowwise` as well the first time.\n\n$\\blacksquare$\n\n(e) Obtain a Leaflet map of the area containing these\ntwelve cities. \n \nSolution\n\nThe usual:\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(data = wisc) %>% \n  addTiles() %>% \n  addCircleMarkers(lng = ~x, lat = ~y) -> locs\nlocs\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-73ba83e4a7c22d17f752\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-73ba83e4a7c22d17f752\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[44.2613967,42.5083272,42.9288944,43.074761,44.6688524,43.0349931,43.9416755,46.7207737,44.9596017,42.5006243,44.9497487,41.8755616],[-88.4069744,-89.031784,-88.83705089999999,-89.3837613,-90.1717987,-87.92249700000001,-90.6397264,-92.10407960000001,-89.62982390000001,-90.6647985,-93.0931028,-87.6244212],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[41.8755616,46.7207737],\"lng\":[-93.0931028,-87.6244212]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nThe nice thing about this map is that you can play with it: zoom it (using the plus/minus on the map or your mouse wheel), or move it around by clicking and dragging. To identify the cities: well, the big ones are obvious, and you can zoom in to identify the others. (You have to zoom in quite a long way to find Monroe, and the geocoder seems to have found its airport, which is not actually in the city.)\n\nI like identifying the cities with circles, but there are other possibilities, such as \"icon markers\" that look like Google map pins:\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(data = wisc) %>% \n  addTiles() %>% \n  addMarkers(lng = ~x, lat = ~y) -> locs\nlocs\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-bbe3da0cd7c9c058cfbe\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-bbe3da0cd7c9c058cfbe\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[[44.2613967,42.5083272,42.9288944,43.074761,44.6688524,43.0349931,43.9416755,46.7207737,44.9596017,42.5006243,44.9497487,41.8755616],[-88.4069744,-89.031784,-88.83705089999999,-89.3837613,-90.1717987,-87.92249700000001,-90.6397264,-92.10407960000001,-89.62982390000001,-90.6647985,-93.0931028,-87.6244212],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[41.8755616,46.7207737],\"lng\":[-93.0931028,-87.6244212]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nYou can even attach text to the markers that appears when you click on them, but that's farther than I would go here.\n\n\n$\\blacksquare$\n\n\n\n\n## The Cross-City Line\n\nWhen I went to university (in Birmingham, England, a long time ago), I was very excited because I would be travelling to campus by train. My journey was on the Cross-City Line, a metro-type service with lots of stops short distances apart, but run in those days by diesel trains (the electrification came later). \n\n::: {.cell}\n\n:::\n\n\nA list of the stations on the line is in [http://ritsokiguess.site/datafiles/cross-city.csv](http://ritsokiguess.site/datafiles/cross-city.csv). There is one column in the data file, called `station`. We are going to draw a map of these.\n\n(a) Read in and display (some of) the station names.\n\nSolution\n\nNothing terribly unexpected here:\n\n::: {.cell}\n\n```{.r .cell-code}\nstations <- read_csv(my_url)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 24 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): station\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nstations\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"station\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Redditch\"},{\"1\":\"Alvechurch\"},{\"1\":\"Barnt Green\"},{\"1\":\"Longbridge\"},{\"1\":\"Northfield\"},{\"1\":\"King's Norton\"},{\"1\":\"Bournville\"},{\"1\":\"Selly Oak\"},{\"1\":\"Birmingham University\"},{\"1\":\"Five Ways\"},{\"1\":\"Birmingham New Street\"},{\"1\":\"Duddeston\"},{\"1\":\"Aston\"},{\"1\":\"Gravelly Hill\"},{\"1\":\"Erdington\"},{\"1\":\"Chester Road\"},{\"1\":\"Wylde Green\"},{\"1\":\"Sutton Coldfield\"},{\"1\":\"Four Oaks\"},{\"1\":\"Butler's Lane\"},{\"1\":\"Blake Street\"},{\"1\":\"Shenstone\"},{\"1\":\"Lichfield City\"},{\"1\":\"Lichfield Trent Valley\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n$\\blacksquare$\n\n(b) In preparation for geocoding, create a second column in the dataframe that consists of the station names with \"station UK\" on the end. (This is to improve the chances of the geocoder finding the actual railway station.)\n\nSolution\n\nI wrote this back into the original dataframe. Create a new one if you prefer:\n\n::: {.cell}\n\n```{.r .cell-code}\nstations %>% \n  mutate(longname = str_c(station, \" station UK\")) -> stations\nstations\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"station\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"longname\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Redditch\",\"2\":\"Redditch station UK\"},{\"1\":\"Alvechurch\",\"2\":\"Alvechurch station UK\"},{\"1\":\"Barnt Green\",\"2\":\"Barnt Green station UK\"},{\"1\":\"Longbridge\",\"2\":\"Longbridge station UK\"},{\"1\":\"Northfield\",\"2\":\"Northfield station UK\"},{\"1\":\"King's Norton\",\"2\":\"King's Norton station UK\"},{\"1\":\"Bournville\",\"2\":\"Bournville station UK\"},{\"1\":\"Selly Oak\",\"2\":\"Selly Oak station UK\"},{\"1\":\"Birmingham University\",\"2\":\"Birmingham University station UK\"},{\"1\":\"Five Ways\",\"2\":\"Five Ways station UK\"},{\"1\":\"Birmingham New Street\",\"2\":\"Birmingham New Street station UK\"},{\"1\":\"Duddeston\",\"2\":\"Duddeston station UK\"},{\"1\":\"Aston\",\"2\":\"Aston station UK\"},{\"1\":\"Gravelly Hill\",\"2\":\"Gravelly Hill station UK\"},{\"1\":\"Erdington\",\"2\":\"Erdington station UK\"},{\"1\":\"Chester Road\",\"2\":\"Chester Road station UK\"},{\"1\":\"Wylde Green\",\"2\":\"Wylde Green station UK\"},{\"1\":\"Sutton Coldfield\",\"2\":\"Sutton Coldfield station UK\"},{\"1\":\"Four Oaks\",\"2\":\"Four Oaks station UK\"},{\"1\":\"Butler's Lane\",\"2\":\"Butler's Lane station UK\"},{\"1\":\"Blake Street\",\"2\":\"Blake Street station UK\"},{\"1\":\"Shenstone\",\"2\":\"Shenstone station UK\"},{\"1\":\"Lichfield City\",\"2\":\"Lichfield City station UK\"},{\"1\":\"Lichfield Trent Valley\",\"2\":\"Lichfield Trent Valley station UK\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n$\\blacksquare$\n\n(c) Look up the longitudes and latitudes of all the stations, organizing your dataframe so that they are visible.\n\nSolution\n\nTwo steps: the first is to do the geocoding, and the second is to disentangle what comes back.\n\nFirst, then:\n\n::: {.cell hash='maps_cache/html/cross-city-4_e82499c550c2a9a5a0c78aa3cb92837b'}\n\n```{.r .cell-code}\nstations %>% \n  rowwise() %>% \n  mutate(ll = list(geocode_OSM(longname))) -> stations\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo results found for \"King's Norton station UK\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNo results found for \"Butler's Lane station UK\".\n```\n:::\n\n```{.r .cell-code}\nstations\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"station\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"longname\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ll\"],\"name\":[3],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Redditch\",\"2\":\"Redditch station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Alvechurch\",\"2\":\"Alvechurch station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Barnt Green\",\"2\":\"Barnt Green station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Longbridge\",\"2\":\"Longbridge station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Northfield\",\"2\":\"Northfield station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"King's Norton\",\"2\":\"King's Norton station UK\",\"3\":\"<NULL>\"},{\"1\":\"Bournville\",\"2\":\"Bournville station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Selly Oak\",\"2\":\"Selly Oak station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Birmingham University\",\"2\":\"Birmingham University station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Five Ways\",\"2\":\"Five Ways station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Birmingham New Street\",\"2\":\"Birmingham New Street station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Duddeston\",\"2\":\"Duddeston station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Aston\",\"2\":\"Aston station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Gravelly Hill\",\"2\":\"Gravelly Hill station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Erdington\",\"2\":\"Erdington station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Chester Road\",\"2\":\"Chester Road station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Wylde Green\",\"2\":\"Wylde Green station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Sutton Coldfield\",\"2\":\"Sutton Coldfield station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Four Oaks\",\"2\":\"Four Oaks station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Butler's Lane\",\"2\":\"Butler's Lane station UK\",\"3\":\"<NULL>\"},{\"1\":\"Blake Street\",\"2\":\"Blake Street station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Shenstone\",\"2\":\"Shenstone station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Lichfield City\",\"2\":\"Lichfield City station UK\",\"3\":\"<named list [3]>\"},{\"1\":\"Lichfield Trent Valley\",\"2\":\"Lichfield Trent Valley station UK\",\"3\":\"<named list [3]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe longitudes and latitudes are hidden in the list-column that I called `ll`, so the second step is to get them out:\n\n::: {.cell}\n\n```{.r .cell-code}\nstations %>% unnest_wider(ll) %>% \n  unnest_wider(coords) -> stations\nstations\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"station\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"longname\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"query\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bbox\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Redditch\",\"2\":\"Redditch station UK\",\"3\":\"Redditch station UK\",\"4\":\"-1.945609\",\"5\":\"52.30638\",\"6\":\"<bbox>\"},{\"1\":\"Alvechurch\",\"2\":\"Alvechurch station UK\",\"3\":\"Alvechurch station UK\",\"4\":\"-1.967988\",\"5\":\"52.34683\",\"6\":\"<bbox>\"},{\"1\":\"Barnt Green\",\"2\":\"Barnt Green station UK\",\"3\":\"Barnt Green station UK\",\"4\":\"-1.992500\",\"5\":\"52.36097\",\"6\":\"<bbox>\"},{\"1\":\"Longbridge\",\"2\":\"Longbridge station UK\",\"3\":\"Longbridge station UK\",\"4\":\"-1.981076\",\"5\":\"52.39625\",\"6\":\"<bbox>\"},{\"1\":\"Northfield\",\"2\":\"Northfield station UK\",\"3\":\"Northfield station UK\",\"4\":\"-1.965125\",\"5\":\"52.40830\",\"6\":\"<bbox>\"},{\"1\":\"King's Norton\",\"2\":\"King's Norton station UK\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"<NULL>\"},{\"1\":\"Bournville\",\"2\":\"Bournville station UK\",\"3\":\"Bournville station UK\",\"4\":\"-1.950100\",\"5\":\"52.42931\",\"6\":\"<bbox>\"},{\"1\":\"Selly Oak\",\"2\":\"Selly Oak station UK\",\"3\":\"Selly Oak station UK\",\"4\":\"-1.935591\",\"5\":\"52.44186\",\"6\":\"<bbox>\"},{\"1\":\"Birmingham University\",\"2\":\"Birmingham University station UK\",\"3\":\"Birmingham University station UK\",\"4\":\"-1.938284\",\"5\":\"52.45118\",\"6\":\"<bbox>\"},{\"1\":\"Five Ways\",\"2\":\"Five Ways station UK\",\"3\":\"Five Ways station UK\",\"4\":\"-1.911762\",\"5\":\"52.47122\",\"6\":\"<bbox>\"},{\"1\":\"Birmingham New Street\",\"2\":\"Birmingham New Street station UK\",\"3\":\"Birmingham New Street station UK\",\"4\":\"-1.898694\",\"5\":\"52.47765\",\"6\":\"<bbox>\"},{\"1\":\"Duddeston\",\"2\":\"Duddeston station UK\",\"3\":\"Duddeston station UK\",\"4\":\"-1.871281\",\"5\":\"52.48865\",\"6\":\"<bbox>\"},{\"1\":\"Aston\",\"2\":\"Aston station UK\",\"3\":\"Aston station UK\",\"4\":\"-1.088457\",\"5\":\"51.48475\",\"6\":\"<bbox>\"},{\"1\":\"Gravelly Hill\",\"2\":\"Gravelly Hill station UK\",\"3\":\"Gravelly Hill station UK\",\"4\":\"-1.852708\",\"5\":\"52.51539\",\"6\":\"<bbox>\"},{\"1\":\"Erdington\",\"2\":\"Erdington station UK\",\"3\":\"Erdington station UK\",\"4\":\"-1.835808\",\"5\":\"52.52623\",\"6\":\"<bbox>\"},{\"1\":\"Chester Road\",\"2\":\"Chester Road station UK\",\"3\":\"Chester Road station UK\",\"4\":\"-2.879530\",\"5\":\"53.19675\",\"6\":\"<bbox>\"},{\"1\":\"Wylde Green\",\"2\":\"Wylde Green station UK\",\"3\":\"Wylde Green station UK\",\"4\":\"-1.831425\",\"5\":\"52.54563\",\"6\":\"<bbox>\"},{\"1\":\"Sutton Coldfield\",\"2\":\"Sutton Coldfield station UK\",\"3\":\"Sutton Coldfield station UK\",\"4\":\"-1.825255\",\"5\":\"52.56472\",\"6\":\"<bbox>\"},{\"1\":\"Four Oaks\",\"2\":\"Four Oaks station UK\",\"3\":\"Four Oaks station UK\",\"4\":\"-1.828031\",\"5\":\"52.57955\",\"6\":\"<bbox>\"},{\"1\":\"Butler's Lane\",\"2\":\"Butler's Lane station UK\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"<NULL>\"},{\"1\":\"Blake Street\",\"2\":\"Blake Street station UK\",\"3\":\"Blake Street station UK\",\"4\":\"-1.844660\",\"5\":\"52.60438\",\"6\":\"<bbox>\"},{\"1\":\"Shenstone\",\"2\":\"Shenstone station UK\",\"3\":\"Shenstone station UK\",\"4\":\"-1.845452\",\"5\":\"52.64073\",\"6\":\"<bbox>\"},{\"1\":\"Lichfield City\",\"2\":\"Lichfield City station UK\",\"3\":\"Lichfield City station UK\",\"4\":\"-1.825125\",\"5\":\"52.68022\",\"6\":\"<bbox>\"},{\"1\":\"Lichfield Trent Valley\",\"2\":\"Lichfield Trent Valley station UK\",\"3\":\"Lichfield Trent Valley station UK\",\"4\":\"-1.801351\",\"5\":\"52.68718\",\"6\":\"<bbox>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe two `unnest_wider`s are because the longitudes and latitudes are hidden inside a thing called `coords` which is itself nested within `ll`. Do the first `unnest_wider`, and see what you have. This will tell you that you need to do another one. \n\nThe values seem reasonable; this is the UK, most of which is slightly west of the Greenwich meridian, and the latitudes look sensible given that the UK is north of southern Ontario.\n\n$\\blacksquare$\n\n(d) Make a Leaflet map of the stations. Use circle markers or the \"pin\" markers as you prefer.\n\n\nSolution\n\nI used the pin markers (with `addMarkers`), though `addCircleMarkers` is as good. The code for drawing the map is always the same; the work here is in setting up the geocoding:\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(data = stations) %>% \n  addTiles() %>% \n  addMarkers(lng = ~x, lat = ~y)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in validateCoords(lng, lat, funcName): Data contains 2 rows with either\nmissing or invalid lat/lon values and will be ignored\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-7ac02990ede920010d33\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7ac02990ede920010d33\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[[52.3063807,52.3468339,52.3609702,52.3962549,52.4082951,null,52.4293084,52.4418625,52.4511815,52.4712194,52.4776459,52.4886501,51.48475005,52.5153876,52.52622865,53.1967494,52.545628,52.5647207,52.5795454,null,52.6043776,52.6407269,52.6802201,52.6871811],[-1.9456089,-1.9679877,-1.9924997,-1.9810763,-1.9651246,null,-1.950100399067727,-1.9355913,-1.9382838,-1.9117618,-1.898694,-1.871281295548654,-1.088456993298687,-1.8527077,-1.835808436566283,-2.8795296,-1.8314247,-1.8252548,-1.8280314,null,-1.8446597,-1.845452230927924,-1.8251247,-1.801350617141852],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[51.48475005,53.1967494],\"lng\":[-2.8795296,-1.088456993298687]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nYou might find that some of the markers are off a straight line through Birmingham. In these cases, the geocoder found a different place with (apparently) the same name, or a name that was close enough to similar. This seems to be different each time you run it, so you can try again.\n\nThis (mostly) seems to extend across the city of Birmingham, as it should. There are quite a lot of stations, so the pins overlap each other. Zoom in to see them in a bit more detail, or zoom out to orient yourself if your UK geography needs some work.\n\n$\\blacksquare$\n\n(e) Zoom in to see whether the geocoding did indeed find each of the stations. Comment briefly on what you find.\n\nSolution\n\nThe stations go south to north, so the most southerly one you find should be Redditch and the most northerly is Lichfield Trent Valley. \n\nIf you zoom in enough, you'll see where the railway line goes (a grey line). The points seem to be mainly close to it. But if you zoom in a bit more, some of the pins are right on the railway, and some of them are a bit off, because the geocoder found the centre of the place (or something else named after the place) rather than its railway station. For example, when I did it, Gravelly Hill station was right where it should be, but Aston was not.^[If you're a soccer fan, this Aston is what Aston Villa is named after. See if you can find the team's stadium Villa Park on your map, which is actually closer to Witton station on another line.]\n\nExtra: `geocode_OSM` uses a free geocoder called Nominatim. This has some options. The defaults are to return only the first \"hit\", and to return just the coordinates and the \"bounding box\". These can be changed. Let's see what we can find for Aston:\n\n::: {.cell hash='maps_cache/html/cross-city-7_daba76b3973982fd61cf049ab6e30413'}\n\n```{.r .cell-code}\ntibble(where = \"Aston UK\") %>% \n  mutate(info = list(geocode_OSM(where, return.first.only = FALSE,\n                            details = TRUE))) -> d\nd         \n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"where\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"info\"],\"name\":[2],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Aston UK\",\"2\":\"<list [10]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\nThere are now 10 things returned. Let's unnest this and see what we have:\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% unnest(info) %>% \n  unnest_wider(info)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"where\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"query\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"coords\"],\"name\":[3],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"bbox\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"place_id\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"osm_type\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"osm_id\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"place_rank\"],\"name\":[8],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"display_name\"],\"name\":[9],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"class\"],\"name\":[10],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[11],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"importance\"],\"name\":[12],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"icon\"],\"name\":[13],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"8905138\",\"6\":\"node\",\"7\":\"966630237\",\"8\":\"18\",\"9\":\"Aston, Birmingham, West Midlands Combined Authority, England, B6 5PL, United Kingdom\",\"10\":\"place\",\"11\":\"town\",\"12\":\"0.51410998224359\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/poi_place_town.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"298308314\",\"6\":\"relation\",\"7\":\"947997\",\"8\":\"20\",\"9\":\"Aston, Hope, High Peak, Derbyshire, England, United Kingdom\",\"10\":\"boundary\",\"11\":\"administrative\",\"12\":\"0.46050193638341\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/poi_boundary_administrative.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"123608495\",\"6\":\"way\",\"7\":\"76128761\",\"8\":\"30\",\"9\":\"St. Peter & St. Paul, Aston, Witton Lane, Aston, Birmingham, West Midlands Combined Authority, England, B6 6QA, United Kingdom\",\"10\":\"amenity\",\"11\":\"place_of_worship\",\"12\":\"0.45389213702575\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/place_of_worship_unknown3.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"298278221\",\"6\":\"relation\",\"7\":\"1440416\",\"8\":\"20\",\"9\":\"Aston, Cheshire West and Chester, England, United Kingdom\",\"10\":\"boundary\",\"11\":\"administrative\",\"12\":\"0.44596057896493\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/poi_boundary_administrative.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"64147308\",\"6\":\"node\",\"7\":\"5920221964\",\"8\":\"30\",\"9\":\"Aston, Lovers Walk, Aston, Birmingham, West Midlands Combined Authority, England, B6 7PR, United Kingdom\",\"10\":\"railway\",\"11\":\"station\",\"12\":\"0.44157598227638\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/transport_train_station2.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"3767374\",\"6\":\"node\",\"7\":\"487080921\",\"8\":\"19\",\"9\":\"Aston, Flintshire, Cymru / Wales, CH5 1UR, United Kingdom\",\"10\":\"place\",\"11\":\"village\",\"12\":\"0.44129130556068\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/poi_place_village.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"298603241\",\"6\":\"relation\",\"7\":\"3594185\",\"8\":\"20\",\"9\":\"Aston, East Hertfordshire, Hertfordshire, England, United Kingdom\",\"10\":\"boundary\",\"11\":\"administrative\",\"12\":\"0.430735418475\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/poi_boundary_administrative.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"111407\",\"6\":\"node\",\"7\":\"26127809\",\"8\":\"19\",\"9\":\"Aston, West Oxfordshire, Oxfordshire, England, OX18 2DL, United Kingdom\",\"10\":\"place\",\"11\":\"village\",\"12\":\"0.42689306175332\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/poi_place_village.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"15390598\",\"6\":\"node\",\"7\":\"1709823466\",\"8\":\"19\",\"9\":\"Aston, Cheshire East, England, CW5 8DH, United Kingdom\",\"10\":\"place\",\"11\":\"village\",\"12\":\"0.38501\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/poi_place_village.p.20.png\"},{\"1\":\"Aston UK\",\"2\":\"Aston UK\",\"3\":\"<dbl [2]>\",\"4\":\"<bbox>\",\"5\":\"347759746\",\"6\":\"node\",\"7\":\"337820108\",\"8\":\"19\",\"9\":\"Aston, Shropshire, England, SY4 5JH, United Kingdom\",\"10\":\"place\",\"11\":\"village\",\"12\":\"0.38501\",\"13\":\"https://nominatim.openstreetmap.org/ui/mapicons/poi_place_village.p.20.png\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThere are 10 locations it found matching \"Aston UK\", and for each of those there is the information you see, a total of 12 columns' worth in addition to the name of the place we are looking up. Perhaps the most interesting are the columns `class` and `type` near the end (keep scrolling right):\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% unnest(info) %>% \n  unnest_wider(info) %>% \n  select(where, class, type)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"where\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"class\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Aston UK\",\"2\":\"place\",\"3\":\"town\"},{\"1\":\"Aston UK\",\"2\":\"boundary\",\"3\":\"administrative\"},{\"1\":\"Aston UK\",\"2\":\"amenity\",\"3\":\"place_of_worship\"},{\"1\":\"Aston UK\",\"2\":\"boundary\",\"3\":\"administrative\"},{\"1\":\"Aston UK\",\"2\":\"railway\",\"3\":\"station\"},{\"1\":\"Aston UK\",\"2\":\"place\",\"3\":\"village\"},{\"1\":\"Aston UK\",\"2\":\"boundary\",\"3\":\"administrative\"},{\"1\":\"Aston UK\",\"2\":\"place\",\"3\":\"village\"},{\"1\":\"Aston UK\",\"2\":\"place\",\"3\":\"village\"},{\"1\":\"Aston UK\",\"2\":\"place\",\"3\":\"village\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nYou can see which one is the railway station. \n\nThis makes me think that with sufficient patience we could do this for all our places, and pick out the one that is the station:\n\n::: {.cell hash='maps_cache/html/cross-city-10_667fe141ab2788ef9f04560e3ff0fd9b'}\n\n```{.r .cell-code}\nstations <- read_csv(my_url)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 24 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): station\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nstations %>% \n  mutate(longname = str_c(station, \" UK\")) %>% \n  rowwise() %>% \n  mutate(ll = list(geocode_OSM(longname, \n                   return.first.only = FALSE,\n                   details = TRUE))) -> stations2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstations2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"station\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"longname\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ll\"],\"name\":[3],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Redditch\",\"2\":\"Redditch UK\",\"3\":\"<list [9]>\"},{\"1\":\"Alvechurch\",\"2\":\"Alvechurch UK\",\"3\":\"<list [3]>\"},{\"1\":\"Barnt Green\",\"2\":\"Barnt Green UK\",\"3\":\"<list [2]>\"},{\"1\":\"Longbridge\",\"2\":\"Longbridge UK\",\"3\":\"<list [9]>\"},{\"1\":\"Northfield\",\"2\":\"Northfield UK\",\"3\":\"<list [10]>\"},{\"1\":\"King's Norton\",\"2\":\"King's Norton UK\",\"3\":\"<list [2]>\"},{\"1\":\"Bournville\",\"2\":\"Bournville UK\",\"3\":\"<list [8]>\"},{\"1\":\"Selly Oak\",\"2\":\"Selly Oak UK\",\"3\":\"<list [6]>\"},{\"1\":\"Birmingham University\",\"2\":\"Birmingham University UK\",\"3\":\"<named list [12]>\"},{\"1\":\"Five Ways\",\"2\":\"Five Ways UK\",\"3\":\"<list [10]>\"},{\"1\":\"Birmingham New Street\",\"2\":\"Birmingham New Street UK\",\"3\":\"<list [9]>\"},{\"1\":\"Duddeston\",\"2\":\"Duddeston UK\",\"3\":\"<list [2]>\"},{\"1\":\"Aston\",\"2\":\"Aston UK\",\"3\":\"<list [10]>\"},{\"1\":\"Gravelly Hill\",\"2\":\"Gravelly Hill UK\",\"3\":\"<list [10]>\"},{\"1\":\"Erdington\",\"2\":\"Erdington UK\",\"3\":\"<list [3]>\"},{\"1\":\"Chester Road\",\"2\":\"Chester Road UK\",\"3\":\"<list [10]>\"},{\"1\":\"Wylde Green\",\"2\":\"Wylde Green UK\",\"3\":\"<list [4]>\"},{\"1\":\"Sutton Coldfield\",\"2\":\"Sutton Coldfield UK\",\"3\":\"<list [10]>\"},{\"1\":\"Four Oaks\",\"2\":\"Four Oaks UK\",\"3\":\"<list [10]>\"},{\"1\":\"Butler's Lane\",\"2\":\"Butler's Lane UK\",\"3\":\"<list [3]>\"},{\"1\":\"Blake Street\",\"2\":\"Blake Street UK\",\"3\":\"<list [10]>\"},{\"1\":\"Shenstone\",\"2\":\"Shenstone UK\",\"3\":\"<list [10]>\"},{\"1\":\"Lichfield City\",\"2\":\"Lichfield City UK\",\"3\":\"<named list [12]>\"},{\"1\":\"Lichfield Trent Valley\",\"2\":\"Lichfield Trent Valley UK\",\"3\":\"<list [3]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe number in the `ll` column tells you how many things the geocoder found that match the input `longname`. One of each of these is, we hope, a railway station.\n\n::: {.cell}\n\n```{.r .cell-code}\nstations2 %>% unnest(ll) %>% \n  unnest_wider(ll, names_sep = \"_\") %>% \n  select(station, ll_coords, ll_class, ll_type) %>% \n  filter(ll_class == \"railway\", ll_type == \"station\") %>% \n  unnest_wider(ll_coords) -> d\nd\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"station\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ll_class\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ll_type\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Redditch\",\"2\":\"-1.945609\",\"3\":\"52.30638\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Alvechurch\",\"2\":\"-1.967988\",\"3\":\"52.34683\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Barnt Green\",\"2\":\"-1.992500\",\"3\":\"52.36097\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Longbridge\",\"2\":\"-1.980761\",\"3\":\"52.39701\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Northfield\",\"2\":\"-1.965125\",\"3\":\"52.40830\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Bournville\",\"2\":\"-1.926668\",\"3\":\"52.42739\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Selly Oak\",\"2\":\"-1.935591\",\"3\":\"52.44186\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Five Ways\",\"2\":\"-1.913071\",\"3\":\"52.47109\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Birmingham New Street\",\"2\":\"-1.898694\",\"3\":\"52.47765\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Duddeston\",\"2\":\"-1.871281\",\"3\":\"52.48849\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Aston\",\"2\":\"-1.872046\",\"3\":\"52.50442\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Gravelly Hill\",\"2\":\"-1.852708\",\"3\":\"52.51539\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Erdington\",\"2\":\"-1.839225\",\"3\":\"52.52857\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Chester Road\",\"2\":\"-1.832458\",\"3\":\"52.53579\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Wylde Green\",\"2\":\"-1.831425\",\"3\":\"52.54563\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Sutton Coldfield\",\"2\":\"-1.825255\",\"3\":\"52.56472\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Four Oaks\",\"2\":\"-1.828031\",\"3\":\"52.57955\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Blake Street\",\"2\":\"-1.844660\",\"3\":\"52.60438\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Shenstone\",\"2\":\"-1.844333\",\"3\":\"52.63922\",\"4\":\"railway\",\"5\":\"station\"},{\"1\":\"Lichfield Trent Valley\",\"2\":\"-1.800131\",\"3\":\"52.68696\",\"4\":\"railway\",\"5\":\"station\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nIf you want to see how this works, run it one line at a time.\n\nWe almost got there. We're missing University^[The station is called just University, not Birmingham University, which makes it hard to find.] and Lichfield City stations, but it looks as if we got the rest:\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(data = d) %>% \n  addTiles() %>% \n  addMarkers(lng = ~x, lat = ~y)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-ec6a87802dafd412139e\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ec6a87802dafd412139e\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[[52.3063807,52.3468339,52.3609702,52.3970107,52.4082951,52.4273889,52.4418625,52.4710941,52.4776459,52.4884888,52.5044169,52.5153876,52.5285663,52.5357946,52.545628,52.5647207,52.5795454,52.6043776,52.6392159,52.6869627],[-1.9456089,-1.9679877,-1.9924997,-1.9807611,-1.9651246,-1.9266683,-1.9355913,-1.9130708,-1.898694,-1.8712807,-1.8720459,-1.8527077,-1.8392253,-1.8324576,-1.8314247,-1.8252548,-1.8280314,-1.8446597,-1.8443329,-1.8001308],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[52.3063807,52.6869627],\"lng\":[-1.9924997,-1.8001308]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nIf you zoom in, you'll see that the ones we got are all the actual stations, and not the area from which the station takes its name.\n\n$\\blacksquare$\n\n\n\n##  The brain of a cat, revisited\n\nEarlier, we looked at an ethics study that had to do with a fictional brain of a fictional cat. I said\nthere was actually a *town* called Catbrain. It's in England,\nnear Bristol, and seems to be home to a street of car dealerships.\n\n\n(a) Find the latitude and longitude of \"Catbrain UK\" (though I don't think there are any others).\n\nSolution\n\nMake sure you have these two packages loaded:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nlibrary(tmaptools)\n```\n:::\n\nTo find the latitude and longitude of Catbrain:\n\n::: {.cell}\n\n```{.r .cell-code}\ncatbrain <- tibble(place = \"Catbrain UK\")\ncatbrain %>% mutate(ll = list(geocode_OSM(place))) %>% \n  unnest_wider(ll) %>% \n  unnest_wider(coords) -> catbrain\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncatbrain\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"place\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"query\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bbox\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Catbrain UK\",\"2\":\"Catbrain UK\",\"3\":\"-2.612466\",\"4\":\"51.52288\",\"5\":\"<bbox>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nRemember that the output from `geocode_OSM` is a list, and it has in it a thing called `coords` that is the longitude and latitude together, and another thing called `bbox` that we don't use. So we have to `unnest` *twice* to get the longitude (as `x`) and the latitude (as `y`) out for drawing in a moment.\n\n$\\blacksquare$\n\n(b) Draw a map of Catbrain using Leaflet.\n\n\nSolution\n\nThat goes this way:\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(data = catbrain) %>% \n  addTiles() %>% \n  addCircleMarkers(lng = ~x, lat = ~y) -> catbrain_map\ncatbrain_map\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-7cfabd7d2a204323e54c\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7cfabd7d2a204323e54c\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[51.5228823,-2.6124662,10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[51.5228823,51.5228823],\"lng\":[-2.6124662,-2.6124662]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n \n \nThere are car dealerships are along Lysander Road. Zoom in\nto see them. Or zoom out to see where this is. You can keep zooming out until you know where you are, using the plus and minus buttons, or your mouse wheel.\n\n\nThe name Catbrain, according to\n[link](http://www.bristolpost.co.uk/news/history/name-catbrain-hill-came-825247),\nmeans \"rough stony soil\", from Middle English, and has nothing to do\nwith cats or their brains at all.\n\n\nExtra: I was actually surprised that this worked at all, because with only one point, how does it know what scale to draw the map? Also, unless your UK geography is really good, you won't have any clue about exactly where this is. That's the reason for the next part.\n\n$\\blacksquare$\n\n(c) Make a dataframe containing some other British cities as well as Catbrain, and find their latitudes and longitudes.\n\n\nSolution\n\nI chose the cities below, mostly somewhere near Catbrain. You could fire up a Google map, zoom it out until it contains something you know, and pick some places you've heard of. (I happen to know British geography pretty well, so I just picked some mostly nearby places out of my head. I didn't really want to pick London, but I figured this was the one *you* might know.)\n\n::: {.cell hash='maps_cache/html/catbrain-5_b41c82d1fd1b79d35ba60211c25666d6'}\n\n```{.r .cell-code}\ncatbrain2 <- tribble(\n  ~where,\n  \"Catbrain UK\",\n  \"Bristol UK\",\n  \"Taunton UK\",\n  \"Newport UK\",\n  \"Gloucester UK\",\n  \"Cardiff UK\",\n  \"Birmingham UK\",\n  \"London UK\",\n  \"Caldicot UK\"\n)\ncatbrain2 %>%\n  rowwise() %>% \n  mutate(ll = list(geocode_OSM(where))) %>% \n  unnest_wider(ll) %>% \n  unnest_wider(coords) -> catbrain2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncatbrain2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"where\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"query\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bbox\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Catbrain UK\",\"2\":\"Catbrain UK\",\"3\":\"-2.612466\",\"4\":\"51.52288\",\"5\":\"<bbox>\"},{\"1\":\"Bristol UK\",\"2\":\"Bristol UK\",\"3\":\"-2.597298\",\"4\":\"51.45380\",\"5\":\"<bbox>\"},{\"1\":\"Taunton UK\",\"2\":\"Taunton UK\",\"3\":\"-3.102909\",\"4\":\"51.01479\",\"5\":\"<bbox>\"},{\"1\":\"Newport UK\",\"2\":\"Newport UK\",\"3\":\"-2.997497\",\"4\":\"51.58823\",\"5\":\"<bbox>\"},{\"1\":\"Gloucester UK\",\"2\":\"Gloucester UK\",\"3\":\"-2.245819\",\"4\":\"51.86537\",\"5\":\"<bbox>\"},{\"1\":\"Cardiff UK\",\"2\":\"Cardiff UK\",\"3\":\"-3.179193\",\"4\":\"51.48165\",\"5\":\"<bbox>\"},{\"1\":\"Birmingham UK\",\"2\":\"Birmingham UK\",\"3\":\"-1.902691\",\"4\":\"52.47970\",\"5\":\"<bbox>\"},{\"1\":\"London UK\",\"2\":\"London UK\",\"3\":\"-0.127650\",\"4\":\"51.50734\",\"5\":\"<bbox>\"},{\"1\":\"Caldicot UK\",\"2\":\"Caldicot UK\",\"3\":\"-2.751763\",\"4\":\"51.59125\",\"5\":\"<bbox>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThe first time I did this, I forgot the `rowwise`, which we didn't need the first time (there was only one place), but here, it causes odd problems if you omit it. \n\n$\\blacksquare$\n\n(d) Draw a map containing the places you picked.\n\nSolution\n\nThe map-drawing is almost the same, just changing the dataframe:\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(data = catbrain2) %>% \n  addTiles() %>% \n  addCircleMarkers(lng = ~x, lat = ~y)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-d2c11645d5cb943d3119\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d2c11645d5cb943d3119\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[51.5228823,51.4538022,51.0147895,51.5882332,51.8653705,51.4816546,52.4796992,51.5073359,51.5912466],[-2.6124662,-2.5972985,-3.1029086,-2.9974967,-2.2458192,-3.1791934,-1.9026911,-0.12765,-2.7517629],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[51.0147895,52.4796992],\"lng\":[-3.1791934,-0.12765]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n \n\nNow, if you have any sense of the geography of the UK, you know where\nyou are.  The big river (the Severn) is\nthe border between England and Wales, so\nthe places above and to the left of it are in Wales, including\nCaldicot (see question about Roman pottery).\n\nYou can zoom this map *in* (once you have figured out which of the circles is Catbrain) and find Lysander Road again, and also the M5 (see below).\n\nMore irrelevant extra: the M5 is one of the English \"motorways\" (like 400-series highways\nor US Interstates). The M5 goes from Birmingham to Exeter. You can\ntell that this is England because of the huge number of traffic\ncircles, known there as \"roundabouts\". One of the first things they\nteach you in British driving schools is how to handle roundabouts:\nwhich lane to approach them in, which (stick-shift) gear to be in, and\nwhen you're supposed to signal where you're going. I hope I still\nremember all that for when I next drive in England!\n    \n$\\blacksquare$\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\n<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}