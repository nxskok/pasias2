{
  "hash": "cee7345609cb6e98ad8c009c4dfe1e1c",
  "result": {
    "markdown": "\n# Getting used to R and R Studio\n\n\n\n Don't forget `library(tidyverse)` first if you need it (you probably will).\n\n\n\n\n::: {.cell}\n\n:::\n\n\n## Using R Studio online\n\n(a) Point your web browser at <http://r.datatools.utoronto.ca>. Click on the button to the left of \"R Studio\" (it will show blue), click the orange Log in to Start, and log in using your UTorID and password.\n\nSolution\n\nThis is about what you should see first, before you click the orange thing:\n\n![](Screenshot_2021-08-27_14-54-52.png)\n\nYou will see a progress bar as things start up, and then you should see something like this:\n\n![](Screenshot_2023-05-16_12-12-45.png)\n\nThis is R Studio, ready to go.\n\nIf you are already logged in to something else on the same browser that uses your UTorID and password, you may come straight here without needing to log in again.\n\n$\\blacksquare$\n\n(b) Take a look around, and create a new Project. Give the new project any name you like.\n\nSolution\n\nSelect File and New Project to get this:\n\n![](Screenshot_2021-08-27_15-39-02.png)\n\nClick on New Directory (highlighted blue on mine). This will create a new folder to put your new project in, which is usually what you want to do. The idea is that a project is a container for a larger collection of work, such as all your assignments in this course. That brings you to this:\n\n![](Screenshot_2021-08-27_15-43-04.png)\n\nwhere you click on New Project (highlighted on mine), and:\n\n![](Screenshot_2021-08-27_15-44-58.png)\n\nGive your project a name, as I did. Then click Create Project. At this point, R Studio will be restarted in your new project. You can tell which project you are in by looking top right, and you'll see the name of your project next to the R symbol:\n\n![](Screenshot_2021-08-27_16-00-36.png)\n\n$\\blacksquare$\n\n(c) One last piece of testing: find the Console window (which is probably on the left). Click next to the blue \\>, and type `library(tidyverse)`. Press Enter.\n\nSolution\n\nIt may think a bit, and then you'll see something like this:\n\n![](Screenshot_2022-08-30_16-07-40.png)\n\nAside: I used to use a cloud R Studio called `rstudio.cloud`. If you see or hear any references to that, it means the same thing as R Studio on `r.datatools` or `jupyter`. (You can still use `rstudio.cloud` if you want; it used to be completely free, but now the free tier won't last you very long; the `utoronto.ca`link is free as long as you are at U of T.) I'm trying to get rid of references to R Studio Cloud as I see them, but I am bound to miss some, and in the lecture videos they are rather hard to find.\n\nNow we can get down to some actual work.\n\n$\\blacksquare$\n\n\n\n## Using R Studio on your own computer\n\nThis is not required now, but you may wish to do this now or later so that you are not fighting for resources on the `r.datatools` server at busy times (eg. when an assignment is due).\n\nFollow the instructions [here](http://ritsokiguess.site/lecture-notes/running.html#/installing-r-on-your-own-computer) to install R Studio on your computer, then start R Studio (which itself starts R).\n\nOnce you have this working, you can use it for any of the following questions, in almost exactly the same way as the online R (I will explain any differences).\n\n\n---\neditor_options: \n  markdown: \n    wrap: 72\n---\n\n\n## Getting started\n\nThis question is to get you started using R.\n\n(a) Start R Studio on `r.datatools` (or on your computer), in some\n    project. (If you started up a new project in the previous question\n    and are still logged in, use that; if not, create a new project with\n    File, New Project, and New Directory. Then select New Project and\n    give it a name. Click Create Project. This will give you an empty\n    workspace to start from.)\n\nSolution\n\nYou ought to see something like this:\n\n![](Screenshot_2023-05-16_12-12-45.png)\n\nThere should be one thing on the left half, and at the top right it'll\nsay \"Environment is empty\".\n\nExtra: if you want to tweak things, select Tools (at the top of the\nscreen) and from it Global Options, then click Appearance. You can make\nthe text bigger or smaller via Editor Font Size, and choose a different\ncolour scheme by picking one of the Editor Themes (which previews on the\nright). My favourite is Tomorrow Night Blue. Click Apply or OK when you\nhave found something you like. (I spend a lot of time in R Studio, and I\nlike having a dark background to be easier on my eyes.)\n\n$\\blacksquare$\n\n(b) We're going to do some stuff in R here, just to get used to it.\n    First, make a Quarto document by selecting File, New File and Quarto\n    Document.\n\nSolution\n\nIn the first box that pops up, you'll be invited to give your document a\ntitle. Make something up for now.\n\nThe first time, you might be invited to \"install some packages\" to make\nthe document thing work.[^1] Let it do that by clicking Yes. After that,\nyou'll have this:\n\n[^1]: Especially if you are on your own computer.\n\n![](Screenshot_2023-05-16_12-31-50.png)\n\nA couple of technical notes:\n\n-   this should be in the top left pane of your R Studio now, with the\n    Console below it.\n\n-   At the top of the file, between the two lines with three hyphens\n    (minus signs, whatever), is some information about the document,\n    known in the jargon as a YAML block, any of which you can change:\n\n    -   the title is whatever title you gave your document\n\n    -   the `format`is what the *output* is going to be (in this case,\n        HTML like a webpage, which is mostly what we'll be using)\n\n    -   there is a visual editor that looks like Notion or a bit like a\n        Google doc (the default), and also a Source editor which gives\n        you more control, and shows that underlying the document is a\n        thing called R Markdown (which is a code for writing documents).\n\n-   My *document* is called \"My awesome title\", but the *file* in which\n    the document lives is still untitled because I haven't saved it yet.\n    See right at the top.\n\n$\\blacksquare$\n\n(c) You can delete the template code below the YAML block now (that is,\n    everything from the title \"Quarto\" to the end). Somewhere in the\n    space opened up below the YAML block (it might say \"Heading 2\",\n    greyed out), type a /. This, like Notion, gives you a list of things\n    to choose from to insert there. Pressing Enter will insert a \"code\n    chunk\", sometimes known as a \"code cell\". We are going to use this\n    in a moment.\n\nSolution\n\nSomething like this:\n\n![](Screenshot_2023-05-16_13-00-52.png)\n\nThe {r} at the top of the code chunk means that the code that will go in\nthere will be R code (you can also have a Python code chunk, among\nothers).\n\n$\\blacksquare$\n\n(d) On the line below the `{r}`, type these two lines of code into the\n    chunk in the Quarto document:\n\n\n\n````default\nlibrary(tidyverse)\nmtcars\n````\n\n\nSolution\n\nWhat this will do: get hold of a built-in data set with information\nabout some different models of car, and display it.\n\n![](Screenshot_2023-05-16_13-13-46.png)\n\nIn approximately five seconds, you'll be demonstrating that for\nyourself.\n\n$\\blacksquare$\n\n(e) Run this command. To do that, look at the top right of your code\n    chunk block (shaded in a slightly different colour). You should see\n    a down arrow and a green \"play button\". Click the play button. This\n    will run the code, and show the output below the code chunk.\n\nSolution\n\nHere's what I get (yours should be the same):\n\n![](Screenshot_2023-05-16_13-15-50.png)\n\nThis is a rectangular array of rows and columns, with individuals (here,\ncars) in rows and variables in columns, known as a \"dataframe\". When you\ndisplay a dataframe in an Quarto document, you see 10 rows and as many\ncolumns as will fit on the screen. At the bottom, it says how many rows\nand columns there are altogether (here 32 rows and 11 columns), and\nwhich ones are being displayed.\n\nYou can see more rows by clicking on Next, and if there are more\ncolumns, you'll see a little arrow next to the rightmost column (as here\nnext to `am`) that you can click on to see more columns. Try it and see.\nOr if you want to go to a particular collection of rows, click one of\nthe numbers between Previous and Next: 1 is rows 1--10, 2 is rows\n11--20, and so on.\n\nThe column on the left without a header (containing the names of the\ncars) is called \"row names\". These have a funny kind of status, kind of\na column and kind of not a column; usually, if we need to use the names,\nwe have to put them in a column first.\n\nIn future solutions, rather than showing you a screenshot, expect me to\nshow you something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nmtcars\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 x 12\n   car           mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX4 ~  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4 D~  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet Spo~  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# i 22 more rows\n```\n:::\n:::\n\n\nThe top bit is the code, the bottom bit the output. In this kind of\ndisplay, you only see the first ten rows (by default).[^2]\n\n[^2]: This document was actually produced by literally running this\n    code, a process known as \"rendering\", which we will learn about\n    shortly.\n\nIf you don't see the \"play button\", make sure that what you have really\nis a code chunk. (I often accidentally delete one of the special\ncharacters above or below the code chunk). If you can't figure it out,\ndelete this code chunk and make a new one. Sometimes R Studio gets\nconfused.\n\nOn the code chunk, the other symbols are the settings for this chunk\n(you have the choice to display or not display the code or the output or\nto not actually run the code). The second one, the down arrow, runs all\nthe chunks prior to this one (but not this one).\n\nYour output has its own little buttons (as seen on the screenshot). The\nfirst one pops the output out into its own window; the second one shows\nor hides the output, and the third one deletes the output (so that you\nhave to run the chunk again to get it back). Experiment. You can't do\nmuch damage here.\n\n$\\blacksquare$\n\n(f) Something a little more interesting: `summary` obtains a summary of\n    whatever you feed it (the five-number summary plus the mean for\n    numerical variables). Obtain this for our data frame. To do this,\n    create a new code chunk below the previous one, type\n    `summary(mtcars)` into the code chunk, and run it.\n\nSolution\n\nThis is what you should see:\n\n![](chunk4.png)\n\nor the other way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n:::\n:::\n\n\nFor the gas mileage column `mpg`, the mean is bigger than the median,\nand the largest value is unusually large compared with the others,\nsuggesting a distribution that is skewed to the right.\n\nThere are 11 numeric (quantitative) variables, so we get the five-number\nsummary plus mean for each one. Categorical variables, if we had any\nhere, would be displayed a different way.\n\n$\\blacksquare$\n\n(g) Let's make a histogram of the gas mileage data. Type the code below\n    into another new code chunk, and run it:\n\n\n\n````default\nggplot(mtcars, aes(x = mpg)) + geom_histogram(bins = 8)\n````\n\n\nThe code looks a bit wordy, but we'll see what all those pieces do later\nin the course (like, maybe tomorrow).\n\nSolution\n\nThis is what you should see:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = mpg)) + geom_histogram(bins = 8)\n```\n\n::: {.cell-output-display}\n![](getting_used_files/figure-pdf/r0-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nThe long right tail supports our guess from before that the distribution\nis right-skewed.\n\n$\\blacksquare$\n\n(h) Some aesthetics: Add some narrative text above and below your code\n    chunks. Above the code chunk is where you say what you are going to\n    do (and maybe why you are doing it), and below is where you say what\n    you conclude from the output you just obtained. I find it looks\n    better if you have a blank line above and below each code chunk.\n\nSolution\n\nThis is what I wrote (screenshot), with none of the code run yet. My\n`library(tidyverse)` line seems to have disappeared, but yours should\nstill be there:\n\n![](Screenshot_2023-05-16_13-53-44.png)\n\n$\\blacksquare$\n\n(i) Save your Quarto document (the usual way with File and Save). This\n    saves it *on the jupyter servers* (and not on your computer). This\n    means that when you come back to it later, even from another device,\n    this document will still be available to you. (If you are running R Studio on your own computer, it is much simpler: the Quarto document is on that computer, in the folder associated with the project you created.)\n\nNow click Render. This produces a pretty HTML version of your Quarto\ndocument. This will appear in a new tab of your web browser, which you\nmight need to encourage to appear (if you have a pop-up blocker) by\nclicking a Try Again.\n\nSolution\n\nIf there are any errors in the rendering process, these will appear in\nthe Render tab. The error message will tell you where in your document\nyour error was. Find it and correct it.[^3] Otherwise, you should see\nyour document.\n\n[^3]: A big part of coding is dealing with errors. You will forget\n    things, and it is fine. In the same way that it doesn't matter how\n    many times you get knocked down, it's key that you get up again each\n    time: it doesn't matter how many errors you made, it's key that you\n    fix them. If you want something to sing along with while you do this, I recommend [this](https://www.youtube.com/watch?v=2H5uWRjFsGc). \n\nExtra 1: the rendering process as you did it doesn't produce that nice\ndisplay of a dataframe that I had in one of my screenshots. To get that,\nalter the YAML block to read:\n\n\n\n````default\nformat: \n  html:\n     df-print: paged\n````\n\n\nThis way, anyone reading your document can actually page through the\ndataframes you display in the same way that you did, to check that they\ncontain the right things.\n\nExtra 2: you might prefer to have a preview of your document within R\nStudio. To make this happen, look for the gear wheel to the right of\nRender. Click the arrow beside it, and in the drop-down, click on\nPreview in Viewer Pane. Render again, and you'll see the rendered\nversion of your document in a Viewer pane on the right. This puts the\nthing you're writing and what it will look like side by side.\n\nExtra 3: you might be annoyed at having to remember to save things. If\nyou are, you can enable auto-saving. To do this, go to Tools and select\nGlobal Options. Select Code (on the left) and Saving (at the top). Click\non Automatically Save when editor loses focus, to put a check mark in\nthe box on the left of it. Change the pull-down below that to Save and\nWrite Changes. Click OK. Now, as soon as you pause for a couple of\nseconds, everything unsaved will be saved.\n\n$\\blacksquare$\n\n(j) Practice handing in your rendered Quarto document, as if it were an\n    assignment that was worth something. (It is good to get the practice\n    in a low-stakes situation, so that you'll know what to do next\n    week.)\n\nSolution\n\nThere are two steps: download the HTML file onto your computer, and then\nhanding it in on Quercus. To download: find the HTML file that you want\nto download in the Files pane on the right. You might need to click on\nFiles at the top, especially if you had a Viewer open there before:\n\n![](Screenshot_2023-05-16_16-01-24.png)\n\nI called my Quarto document `awesome`and the file I was working on was\ncalled `awesome.qmd`(which stands for \"Quarto Markdown\"). That's the\nfile I had to render to produce the output. My output file itself is\ncalled `awesome.html.`That's the file I want to hand in. If you called\nyour file something different when you saved it, that's the thing to\nlook for: there should be something ending in `.qmd` and something with\nthe same first part ending in `.html`.\n\nClick the checkbox to the left of the HTML file. Now click on More above\nthe bottom-right pane. This pops up a menu from which you choose Export.\nThis will pop up another window called Export Files, where you put the\nname that the file will have on your computer. (I usually leave the name\nthe same.) Click Download. The file will go to your Downloads folder, or\nwherever things you download off the web go.\n\nNow, to hand it in. Open up Quercus at `q.utoronto.ca`, log in and\nnavigate to this course. Click Assignments. Click (the title of)\nAssignment 0. There is a big blue Start Assignment button top right.\nClick it. You'll get a File Upload at the bottom of the screen. Click\nChoose File and find the HTML file that you downloaded. Click Open (or\nequivalent on your system). The name of the file should appear next to\nChoose File. Click Submit Assignment. You'll see Submitted at the top\nright, and below that is a Submission Details window and the file you\nuploaded.\n\n![](Screenshot_2023-05-16_16-23-27.png)\n\nYou should be in the habit of *always* checking what you hand in, by\ndownloading it again and looking at it to make sure it's what you\nthought you had handed in.\n\nIf you want to try this again, you can try again as many times as you\nlike, by making a New Attempt. (For the real thing, you can use this if\nyou realize you made a mistake in something you submitted. The graders'\ninstructions, for the real thing, are to grade the *last* file\nsubmitted, so in that case you need to make sure that the last thing\nsubmitted before the due date includes *everything* that you want\ngraded. Here, though, it doesn't matter.)\n\n$\\blacksquare$\n\n(k) Optional extra. Something more ambitious: make a scatterplot of gas\n    mileage `mpg`, on the $y$ axis, against horsepower, `hp`, on the\n    $x$-axis.\n\nSolution\n\nThat goes like this. I'll explain the steps below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nggplot(mtcars, aes(x=hp, y=mpg)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](getting_used_files/figure-pdf/r0-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nThis shows a somewhat downward trend, which is what you'd expect, since\na larger `hp` value means a more powerful engine, which will probably\nconsume more gas and get *fewer* miles per gallon. As for the code: to\nmake a `ggplot` plot, as we will shortly see in class, you first need a\n`ggplot` statement that says what to plot. The first thing in a `ggplot`\nis a data frame (`mtcars` here), and then the `aes` says that the plot\nwill have `hp` on the $x$-axis and `mpg` on the $y$-axis, taken from the\ndata frame that you specified. That's all of the what-to-plot. The last\nthing is how to plot it; `geom_point()` says to plot the data values as\npoints.\n\nYou might like to add a regression line to the plot. That is a matter of\nadding this to the end of the plotting command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x=hp, y=mpg)) + geom_point() + geom_smooth(method=\"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](getting_used_files/figure-pdf/r0-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nThe line definitely goes downhill. Decide for yourself how well you\nthink a line fits these data.\n\n$\\blacksquare$\n\n\n---\neditor_options: \n  markdown: \n    wrap: 72\n---\n\n\n## Reading data from a file\n\nIn this question, we read a file from the web and do some descriptive\nstatistics and a graph. This is very like what you will be doing on\nfuture assignments, so it's good to practice it now.\n\nTake a look at the data file at\n<http://ritsokiguess.site/datafiles/jumping.txt>. These are measurements\non 30 rats that were randomly made to do different amounts of jumping by\ngroup (we'll see the details later in the course). The control group did\nno jumping, and the other groups did \"low jumping\" and \"high jumping\".\nThe first column says which jumping group each rat was in, and the\nsecond is the rat's bone density (the experimenters' supposition was\nthat more jumping should go with higher bone density).\n\n(a) What are the two columns of data separated by? (The fancy word is\n    \"delimited\").\n\nSolution\n\nExactly one space. This is true all the way down, as you can check.\n\n$\\blacksquare$\n\n(b) Make a new Quarto document. Leave the YAML block, but get rid of the\n    rest of the template document. Start with a code chunk containing\n    `library(tidyverse)`. Run it.\n\nSolution\n\nYou will get either the same message as before or nothing. (I got\nnothing because I had already loaded the `tidyverse` in this session.)\n\n$\\blacksquare$\n\n(c) Put the URL of the data file in a variable called `my_url`. Then use\n    `read_delim` to read in the file. (See solutions for how.)\n    `read_delim` reads data files where the data values are always\n    separated by the same single character, here a space. Save the data\n    frame in a variable `rats`.\n\nSolution\n\nLike this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/jumping.txt\"\nrats <- read_delim(my_url,\" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 2\n-- Column specification --------------------------------------------------------\nDelimiter: \" \"\nchr (1): group\ndbl (1): density\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nThe second thing in `read_delim` is the thing that separates the data\nvalues. Often when you use `read_delim` it'll be a space.\n\nHint: to get the file name into `my_url`, the best way is to\n*right*-click on the link, and select Copy Link Address (or equivalent\nin your browser). That puts in on your clipboard. Then make a code chunk\nand put this in it (you'll probably only need to type one quote symbol,\nbecause R Studio will supply the other one):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"\"\n```\n:::\n\n\nthen put the cursor between the two quote symbols and paste. This is\nbetter than selecting the URL in my text and then copy-pasting that\nbecause odd things happen if it happens to span two lines on your\nscreen. (URLs tend to be rather long, so this is not impossible.)\n\n$\\blacksquare$\n\n(d) Take a look at your data frame, by making a new code chunk and\n    putting the data frame's name in it (as we did with `mtcars`).\n\nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 x 2\n   group   density\n   <chr>     <dbl>\n 1 Control     611\n 2 Control     621\n 3 Control     614\n 4 Control     593\n 5 Control     593\n 6 Control     653\n 7 Control     600\n 8 Control     554\n 9 Control     603\n10 Control     569\n# i 20 more rows\n```\n:::\n:::\n\n\nThere are 30 rows and two columns, as there should be.\n\n$\\blacksquare$\n\n(e) Find the mean bone density for rats that did each amount of jumping.\n\nSolution\n\nThis is something you'll see a lot: `group_by` followed by `summarize`.\nReminder: to get that funny thing with the percent signs (called the\n\"pipe symbol\"), type control-shift-M (or equivalent on a Mac):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrats %>% group_by(group) %>%\nsummarize(m = mean(density))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  group        m\n  <chr>    <dbl>\n1 Control   601.\n2 Highjump  639.\n3 Lowjump   612.\n```\n:::\n:::\n\n\nThe mean bone density is clearly highest for the high jumping group, and\nnot much different between the low-jumping and control groups.\n\n$\\blacksquare$\n\n(f) Make a boxplot of bone density for each jumping group.\n\nSolution\n\nOn a boxplot, the groups go across and the values go up and down, so the\nright syntax is this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rats, aes(x=group, y=density)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](getting_used_files/figure-pdf/lippach-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nGiven the amount of variability, the control and low-jump groups are\nvery similar (with the control group having a couple of outliers), but\nthe high-jump group seems to have a consistently higher bone density\nthan the others.\n\nThis is more or less in line with what the experimenters were guessing,\nbut it seems that it has to be high jumping to make a difference.\n\nYou might recognize that this is the kind of data where we would use\nanalysis of variance, which we will do later on in the course: we are\ncomparing several (here three) groups.\n\n$\\blacksquare$\n\n##  Reading files different ways\n\n\n This question is about different ways of reading data files. If you're working online (using `r.datatools` or similar),  start at the beginning. If you're using R Studio running on your own computer, start at part (<a href=\"#part:own-start\">here</a>). \n\n\n\n(a) Log in to `r.datatools.utoronto.ca`. Open up a project (or start a new\none), and watch the spinning circles for a few minutes. When that's\ndone, create a new Quarto Document with File, New File, Quarto Document. Delete the \"template\" document, but not the top\nlines with `title:` \nand `output:` in them. Add a code chunk that contains `library(tidyverse)` and run it.\n\nSolution\n\n\nSo far you (with luck) have something that looks like this:\n\n![](Screenshot_2019-01-10_11-55-06.png)\n\n\nIf you have an error rather than that output, you probably need to\ninstall the `tidyverse` first. Make another code chunk,\ncontaining\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n \n\nand run it. Wait for it to finish. It may take a while. If it\ncompletes successfully (you might see the word DONE at the end),\ndelete that code chunk (you don't need it any more) and try again with\nthe `library(tidyverse)` chunk. It should run properly this\ntime.\n\n$\\blacksquare$\n\n(b)  <a name=\"part:internet-file\">*</a> The easiest kind of files to read\nin are ones on the Internet, with a URL address that begins with\n`http` \nor `https`.  I have a small file at\n[link](http://ritsokiguess.site/datafiles/testing.txt). Click\nthe link to see it, and keep the tab open for the next part of this question.\nThis is a text file with three things on each\nline, each separated by exactly one space. Read the data file into a\ndata frame, and display your data frame.\n\nSolution\n\n\nData values separated by exactly one space is the kind of thing that `read_delim` reads, so make another code chunk and fill it with this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/testing.txt\"\ntesting <- read_delim(my_url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n-- Column specification --------------------------------------------------------\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ntesting\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n      x     y g    \n  <dbl> <dbl> <chr>\n1     1    10 a    \n2     2    11 b    \n3     3    14 a    \n4     4    13 b    \n5     5    18 a    \n6     6    21 b    \n```\n:::\n:::\n\n\n     \n\nWhen you run that, you'll see something like my output. The first part\nis `read_delim` telling you what it saw in the file: two\ncolumns of (whole) numbers and one column of text. The top line of the\nfile is assumed to contain names, which are used as the names of the\ncolumns of your data frame. The bottom part of the output, obtained by\nputting the name of the data frame on a line by itself in your code\nchunk, is what the data frame actually looks like. You ought to get\ninto the habit of eyeballing it and checking that it looks like the\nvalues in the data file.\n\nThe things on the left side of the `<-` symbol (that is meant to look like an arrow pointing left) are variables that you\nare creating in R. You get to choose the names for them. My habit is\nto use `my_url` for URLs of files that I am going to read in,\nand (usually) to give my data frames names that say something about\nwhat they contain, but this is your choice to make.\n\n$\\blacksquare$\n\n(c) You might have data in a file on your own computer. To read\ndata from such a file, you first have to *upload* it to `r.datatools`, and then read it from there. To practice this: open a\ntext editor (like Notepad or TextEdit). Go back to the web browser\ntab containing the data you used in the previous part. Copy the data\nfrom there and paste it into the text editor. Save it somewhere on\nyour computer (like the Desktop). Upload that file, read in the data and verify that you get the right\nthing. (For this last part, see the Solution.)\n\nSolution\n\n\nI copied and pasted the data, and saved it in a file called\n`testing.txt` on my computer. I'm assuming that you've\ngiven it a similar name.\nThen go back to `r.datatools`. You should have a Files pane\nbottom right. If you don't see a pane bottom right at all, press\nControl-Shift-0 to show all the panes. If you see something bottom\nright but it's not Files (for example a plot), click the Files\ntab, and you should see a list of things that look like files, like this:\n\n\n![](Screenshot_2019-01-10_12-29-48.png)\n\n\nClick the Upload button (next to New Folder), click Choose\nFile. Use the file finder to track down the file you saved on your\ncomputer, then click OK. The file should be uploaded to the same\nfolder on `r.datatools` that your project is, and appear in the\nFiles pane bottom right.\n\nTo read it in, you supply the file name to `read_delim` thus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2 <- read_delim(\"testing.txt\", \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n-- Column specification --------------------------------------------------------\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n     \n\nand then you look at it in the same way as before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n      x     y g    \n  <dbl> <dbl> <chr>\n1     1    10 a    \n2     2    11 b    \n3     3    14 a    \n4     4    13 b    \n5     5    18 a    \n6     6    21 b    \n```\n:::\n:::\n\n\n \n\nCheck.\n\n$\\blacksquare$\n\n(d) You might have a spreadsheet on your computer. Create a\n`.csv` file from it, and use the ideas of the last part to\nread it into R Studio.\n\nSolution\n\n\nOpen the spreadsheet containing the data you want to read into\nR. If there are several sheets in the workbook, make sure you're\nlooking at the right one. Select File, Save As, select \"CSV\"\nor \"comma-separated values\" and give it a name. Save the\nresulting file somewhere.\n\nThen follow the same steps as the previous part to upload it to\nyour project on R Studio Cloud. (If you look at the actual file,\nit will be plain text with the data values having commas between\nthem, as the name suggests. You can open the file in R Studio by clicking on it in the Files pane; it should open top\nleft.)\n\nThe final step is to read it into an R data frame. This uses\n`read_csv`; there are several `read_` functions that\nread in different types of file, and you need to use an appropriate\none.\n\nMy spreadsheet got saved as `cars.csv`, so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- read_csv(\"cars.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 38 Columns: 6\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (2): Car, Country\ndbl (4): MPG, Weight, Cylinders, Horsepower\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 38 x 6\n   Car                  MPG Weight Cylinders Horsepower Country\n   <chr>              <dbl>  <dbl>     <dbl>      <dbl> <chr>  \n 1 Buick Skylark       28.4   2.67         4         90 U.S.   \n 2 Dodge Omni          30.9   2.23         4         75 U.S.   \n 3 Mercury Zephyr      20.8   3.07         6         85 U.S.   \n 4 Fiat Strada         37.3   2.13         4         69 Italy  \n 5 Peugeot 694 SL      16.2   3.41         6        133 France \n 6 VW Rabbit           31.9   1.92         4         71 Germany\n 7 Plymouth Horizon    34.2   2.2          4         70 U.S.   \n 8 Mazda GLC           34.1   1.98         4         65 Japan  \n 9 Buick Estate Wagon  16.9   4.36         8        155 U.S.   \n10 Audi 5000           20.3   2.83         5        103 Germany\n# i 28 more rows\n```\n:::\n:::\n\n\n       \nSome information about different types of cars.\n\nYou are now done with this question.\n\n$\\blacksquare$\n\n(e)  <a name=\"part:own-start\">*</a> Start here if you downloaded R and R\nStudio and they are running on your own computer. \nOpen a web browser and point it at \n[link](http://ritsokiguess.site/datafiles/testing.txt). Click\nthe link to see it, and keep the tab open for the next part of this question.\nThis is a text file with three things on each\nline, each separated by exactly one space. Read the data file into a\ndata frame, and display your data frame.\n\nSolution\n\n\nData values separated by exactly one space is the kind of thing that `read_delim` reads, so make another code chunk and fill it with this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/testing.txt\"\ntesting <- read_delim(my_url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n-- Column specification --------------------------------------------------------\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ntesting\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n      x     y g    \n  <dbl> <dbl> <chr>\n1     1    10 a    \n2     2    11 b    \n3     3    14 a    \n4     4    13 b    \n5     5    18 a    \n6     6    21 b    \n```\n:::\n:::\n\n\n     \n\nWhen you run that, you'll see something like my output. The first part\nis `read_delim` telling you what it saw in the file: two\ncolumns of (whole) numbers and one column of text. The top line of the\nfile is assumed to contain names, which are used as the names of the\ncolumns of your data frame. The bottom part of the output, obtained by\nputting the name of the data frame on a line by itself in your code\nchunk, is what the data frame actually looks like. You ought to get\ninto the habit of eyeballing it and checking that it looks like the\nvalues in the data file.\n\nThe things on the left side of the `<-` symbol (that is meant to look like an arrow pointing left) are variables that you\nare creating in R. You get to choose the names for them. My habit is\nto use `my_url` for URLs of files that I am going to read in,\nand (usually) to give my data frames names that say something about\nwhat they contain, but this is your choice to make.\n\n(This part is exactly the same whether you are running R Studio on `r.datatools`\nor have R Studio running on your computer. A remote file is obtained\nin exactly the same way regardless.)\n\n$\\blacksquare$\n\n(f) You might have data in a file on your own computer. To read data\nfrom such a file, R has to know where to find it. Each R project lives\nin a folder, and one way of specifying where a data file is is to give\nits complete path relative to the folder that R Studio is running its\ncurrent project in. This is rather complicated, so we will try a\nsimpler way. To set this up, open a text editor (like Notepad or\nTextEdit). Go back to the web browser tab containing the data you used\nin the previous part. Copy the data from there and paste it into the\ntext editor. Save it somewhere on your computer (like the\nDesktop). Follow the steps in the solution below to read the data \ninto R.\n\nSolution\n\n\nI copied and pasted the data, and saved it in a file called\n`testing.txt` on my computer. I'm assuming that you've\ngiven it a similar name.\nGo back to R Studio. Create a new code chunk containing this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- file.choose()\n```\n:::\n\n\n     \n\nRun this code chunk. You'll see a file chooser. Find the file you\nsaved on your computer, and click Open (or OK or whatever you\nsee). This saves what R needs to access the file in the variable\n`f`. If you want to, you can look at it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf\n```\n:::\n\n\n \n\nand you'll see what looks like a file path in the appropriate format\nfor your system (Windows, Mac, Linux).\nTo read the data in, you supply the file path to `read_delim` thus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2 <- read_delim(f, \" \")\n```\n:::\n\n\n     \n\nand then you look at it in the same way as before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n      x     y g    \n  <dbl> <dbl> <chr>\n1     1    10 a    \n2     2    11 b    \n3     3    14 a    \n4     4    13 b    \n5     5    18 a    \n6     6    21 b    \n```\n:::\n:::\n\n\n \n\nCheck.\n\n$\\blacksquare$\n\n(g) You might have a spreadsheet on your computer. Create a\n`.csv` file from it, and use the ideas of the last part to\nread it into R Studio.\n\nSolution\n\n\nOpen the spreadsheet containing the data you want to read into\nR. If there are several sheets in the workbook, make sure you're\nlooking at the right one. Select File, Save As, select \"CSV\"\nor \"comma-separated values\" and give it a name. Save the\nresulting file somewhere.\n\nThen read it into an R data frame. This uses `read_csv`; \nthere are several `read_` functions that\nread in different types of file, and you need to use an appropriate\none. Before that, though, again run\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- file.choose()\n```\n:::\n\n\n     \n\nto find the `.csv` file on your computer, and then\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- read_csv(f)\n```\n:::\n\n\n       \n\nto read it in. My spreadsheet was\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 38 x 6\n   Car                  MPG Weight Cylinders Horsepower Country\n   <chr>              <dbl>  <dbl>     <dbl>      <dbl> <chr>  \n 1 Buick Skylark       28.4   2.67         4         90 U.S.   \n 2 Dodge Omni          30.9   2.23         4         75 U.S.   \n 3 Mercury Zephyr      20.8   3.07         6         85 U.S.   \n 4 Fiat Strada         37.3   2.13         4         69 Italy  \n 5 Peugeot 694 SL      16.2   3.41         6        133 France \n 6 VW Rabbit           31.9   1.92         4         71 Germany\n 7 Plymouth Horizon    34.2   2.2          4         70 U.S.   \n 8 Mazda GLC           34.1   1.98         4         65 Japan  \n 9 Buick Estate Wagon  16.9   4.36         8        155 U.S.   \n10 Audi 5000           20.3   2.83         5        103 Germany\n# i 28 more rows\n```\n:::\n:::\n\n\n \nSome information about different types of cars.\n\n$\\blacksquare$\n\n\n\n\n",
    "supporting": [
      "getting_used_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}