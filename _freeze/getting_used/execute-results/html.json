{
  "hash": "a15bf9efb26ad621875301da509f5093",
  "result": {
    "markdown": "\n# Getting used to R and R Studio\n\n\n\nMy solutions follow the problems. Look ahead if you get stuck. Don't forget `library(tidyverse)` if you need it:\n\n\n\n::: {.cell}\n\n:::\n\n## Using R Studio online\n\n(a) Point your web browser at <http://r.datatools.utoronto.ca>. Click on the button to the left of \"R Studio\" (it will show blue), click the orange Log in to Start, and log in using your UTorID and password.\n\nSolution\n\nThis is about what you should see first, before you click the orange thing:\n\n![](Screenshot_2021-08-27_14-54-52.png)\n\nYou will see a progress bar as things start up, and then you should see something like this:\n\n![](Screenshot_2023-05-16_12-12-45.png)\n\nThis is R Studio, ready to go.\n\nIf you are already logged in to something else on the same browser that uses your UTorID and password, you may come straight here without needing to log in again.\n\n$\\blacksquare$\n\n(b) Take a look around, and create a new Project. Give the new project any name you like.\n\nSolution\n\nSelect File and New Project to get this:\n\n![](Screenshot_2021-08-27_15-39-02.png)\n\nClick on New Directory (highlighted blue on mine). This will create a new folder to put your new project in, which is usually what you want to do. The idea is that a project is a container for a larger collection of work, such as all your assignments in this course. That brings you to this:\n\n![](Screenshot_2021-08-27_15-43-04.png)\n\nwhere you click on New Project (highlighted on mine), and:\n\n![](Screenshot_2021-08-27_15-44-58.png)\n\nGive your project a name, as I did. Then click Create Project. At this point, R Studio will be restarted in your new project. You can tell which project you are in by looking top right, and you'll see the name of your project next to the R symbol:\n\n![](Screenshot_2021-08-27_16-00-36.png)\n\n$\\blacksquare$\n\n(c) One last piece of testing: find the Console window (which is probably on the left). Click next to the blue \\>, and type `library(tidyverse)`. Press Enter.\n\nSolution\n\nIt may think a bit, and then you'll see something like this:\n\n![](Screenshot_2022-08-30_16-07-40.png)\n\nAside: I used to use a cloud R Studio called `rstudio.cloud`. If you see or hear any references to that, it means the same thing as R Studio on `r.datatools` or `jupyter`. (You can still use `rstudio.cloud` if you want; it used to be completely free, but now the free tier won't last you very long; the `utoronto.ca` link is free as long as you are at U of T.) I'm trying to get rid of references to R Studio Cloud as I see them, but I am bound to miss some, and in the lecture videos they are rather hard to find.\n\nNow we can get down to some actual work.\n\n$\\blacksquare$\n\n##  Getting started\n\n\n This question is to get you started using R.\n\n\n(a) Start R Studio, in some project. (If you started up a\nnew project in the previous question and still have that open, use\nthat; if not, create a new project.)\n\n\n(b) We're going to do some stuff in R here, just to get used to\nit. First, make an R Notebook by selecting File, New File and R\nNotebook.\n\n\n(c) Change the title to something of your choosing. Then go down\nto line 5, click on the Insert button and select R. You should see\na \"code chunk\" appear at line 5, which we are going to use in a\nmoment. \n\n\n(d) Type the line of code shown below into the chunk in the\nR Notebook:\n\n```\n\nmtcars\n\n```\n\n\n\n(e) Run this command. To do that, look at the top right of\nyour code chunk block (shaded in a slightly different colour). You\nshould see a gear symbol, a down arrow and a green \"play    button\". \nClick the play button. This will run the code, and show\nthe output below the code chunk.\n\n\n(f) Something a little more interesting: `summary`\nobtains a summary of whatever you feed it (the five-number summary\nplus the mean for numerical variables). Obtain this for our data\nframe. To do this, create a new code chunk below the previous one,\ntype `summary(mtcars)` into the code chunk, and run it.\n\n\n(g) Let's make a boxplot of the gas mileage data. This is a \n\"poor man's boxplot\"; we'll see a nicer-looking way later. To do it\nthis way, make another new code chunk, enter the code\n`boxplot(mtcars$mpg)` into it, and run the chunk.\n\n\n(h) Some aesthetics to finish with: delete the template notebook\n(all the stuff you didn't type below your code chunks and\noutput). Then add some narrative text above and below your code\nchunks. Above the code chunk is where you say what you are going\nto do (and maybe why you are doing it), and below is where you say\nwhat you conclude from the output you just obtained.\n\n\n(i) Save your notebook (the usual way with File and Save). This\nsaves it *on the `r.datatools` server* (and not on your\ncomputer, unless you are running R Studio on your computer). This means that when you come back to `r.datatools`\nlater, even from another device, this notebook will still be\navailable to you.\nNow click Preview. This produces a pretty HTML version of your\nnotebook.\n\n\n(j) Optional extra: Practice handing in your previewed R\nnotebook, as if it were an assignment that was worth\nsomething. (It is good to get the practice in a low-stakes\nsituation, so that you'll know what to do next week.)\n\n\n(k) Optional extra. Something more ambitious: make a scatterplot of gas\nmileage `mpg`, on the $y$ axis, against horsepower,\n`hp`, on the $x$-axis.\n\n\n\n##  Reading data from a file\n\n\n In this question, we read a file from the web and do some\ndescriptive statistics and a graph. This is very like what you will be\ndoing on future assignments, so it's good to practice it now.\n\nTake a look at the data file at\n[http://ritsokiguess.site/datafiles/jumping.txt](http://ritsokiguess.site/datafiles/jumping.txt). These are\nmeasurements on 30 rats that were randomly made to do different\namounts of jumping by group (we'll see the details later in the\ncourse). The control group did no jumping, and the other groups did\n\"low jumping\" and \"high jumping\". The first column says which\njumping group each rat was in, and the second is the rat's bone\ndensity (the experimenters' supposition was that more jumping should\ngo with higher bone density).\n\n\n\n(a) What are the two columns of data separated by? (The fancy word\nis \"delimited\"). \n\n\n(b) Make a new R Notebook. Leave the first four lines, but get rid\nof the rest of the template document. Start with a code chunk\ncontaining `library(tidyverse)`. Run it.\n\n\n(c) Put the URL of the data file in a variable called\n`my_url`. Then use `read_delim` to read in the\nfile. (See solutions for how.) `read_delim` reads data files\nwhere the data values are always separated by the same single\ncharacter, here a space. Save the data frame in a variable `rats`.\n\n\n(d) Take a look at your data frame, by making a new code chunk and\nputting the data frame's name in it (as we did with\n`mtcars`). \n\n\n(e) Find the mean bone density for rats that did each amount of jumping.\n\n\n(f) Make a boxplot of bone density for each jumping group.\n\n\n\n\n##  Reading files different ways\n\n\n This question is about different ways of reading data files. If you're using `r.datatools` (online), start at the beginning. If you're using R Studio running on your own computer, start at part (<a href=\"#part:own-start\">here</a>). \n\n\n\n(a) Log in to `r.datatools.utoronto.ca`. Open up a project (or start a new\none), and watch the spinning circles for a few minutes. When that's\ndone, create a new Quarto Document with File, New File, Quarto Document. Delete the \"template\" document, but keep the top\nlines with `title:` \nand possibly `output:` in them. Add a code chunk that contains `library(tidyverse)` and run it.\n\nSolution\n\n\nSo far you (with luck) have something that looks like this:\n\n![](Screenshot_2019-01-10_11-55-06.png)\n\n\nIf you have an error rather than that output, you probably need to\ninstall the `tidyverse` first. Make another code chunk,\ncontaining\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n \n\nand run it. Wait for it to finish. It may take a while. If it\ncompletes successfully (you might see the word DONE at the end),\ndelete that code chunk (you don't need it any more) and try again with\nthe `library(tidyverse)` chunk. It should run properly this\ntime.\n\n$\\blacksquare$\n\n(b)  <a name=\"part:internet-file\">*</a> The easiest kind of files to read\nin are ones on the Internet, with a URL address that begins with\n`http` \nor `https`.  I have a small file at\n[link](http://ritsokiguess.site/datafiles/testing.txt). Click\nthe link to see it, and keep the tab open for the next part of this question.\nThis is a text file with three things on each\nline, each separated by exactly one space. Read the data file into a\ndata frame, and display your data frame.\n\nSolution\n\n\nData values separated by exactly one space is the kind of thing that `read_delim` reads, so make another code chunk and fill it with this:\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/testing.txt\"\ntesting <- read_delim(my_url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ntesting\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"g\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"a\"},{\"1\":\"2\",\"2\":\"11\",\"3\":\"b\"},{\"1\":\"3\",\"2\":\"14\",\"3\":\"a\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"b\"},{\"1\":\"5\",\"2\":\"18\",\"3\":\"a\"},{\"1\":\"6\",\"2\":\"21\",\"3\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n     \n\nWhen you run that, you'll see something like my output. The first part\nis `read_delim` telling you what it saw in the file: two\ncolumns of (whole) numbers and one column of text. The top line of the\nfile is assumed to contain names, which are used as the names of the\ncolumns of your data frame. The bottom part of the output, obtained by\nputting the name of the data frame on a line by itself in your code\nchunk, is what the data frame actually looks like. You ought to get\ninto the habit of eyeballing it and checking that it looks like the\nvalues in the data file.\n\nThe things on the left side of the equals signs are variables that you\nare creating in R. You get to choose the names for them. My habit is\nto use `my_url` for URLs of files that I am going to read in,\nand (usually) to give my data frames names that say something about\nwhat they contain, but this is your choice to make.\n\n$\\blacksquare$\n\n(c) You might have data in a file on your own computer. To read\ndata from such a file, you first have to *upload* it to `r.datatools`, and then read it from there. To practice this: open a\ntext editor (like Notepad or TextEdit). Go back to the web browser\ntab containing the data you used in the previous part. Copy the data\nfrom there and paste it into the text editor. Save it somewhere on\nyour computer (like the Desktop). Upload that file to `r.datatools`, read in the data and verify that you get the right\nthing. (For this last part, see the Solution.)\n\nSolution\n\n\nI copied and pasted the data, and saved it in a file called\n`testing.txt` on my computer. I'm assuming that you've\ngiven it a similar name.\nThen go back to `r.datatools`. You should have a Files pane\nbottom right. If you don't see a pane bottom right at all, press\nControl-Shift-0 to show all the panes. If you see something bottom\nright but it's not Files (for example a plot), click the Files\ntab, and you should see a list of things that look like files, like this:\n\n\n![](Screenshot_2019-01-10_12-29-48.png)\n\n\nClick the Upload button (next to New Folder), click Choose\nFile. Use the file finder to track down the file you saved on your\ncomputer, then click OK. The file should be uploaded to the same\nfolder on `r.datatools` that your project is, and appear in the\nFiles pane bottom right.\nTo read it in, you supply the file name to `read_delim` thus:\n::: {.cell}\n\n```{.r .cell-code}\ntesting2 <- read_delim(\"testing.txt\", \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n     \n\nand then you look at it in the same way as before:\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"g\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"a\"},{\"1\":\"2\",\"2\":\"11\",\"3\":\"b\"},{\"1\":\"3\",\"2\":\"14\",\"3\":\"a\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"b\"},{\"1\":\"5\",\"2\":\"18\",\"3\":\"a\"},{\"1\":\"6\",\"2\":\"21\",\"3\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n \n\nCheck.\n\n$\\blacksquare$\n\n(d) You might have a spreadsheet on your computer. Create a\n`.csv` file from it, and use the ideas of the last part to\nread it into R Studio.\n\nSolution\n\n\nOpen the spreadsheet containing the data you want to read into\nR. If there are several sheets in the workbook, make sure you're\nlooking at the right one. Select File, Save As, select \"CSV\"\nor \"comma-separated values\" and give it a name. Save the\nresulting file somewhere.\n\nThen follow the same steps as the previous part to upload it to\nyour project on `r.datatools`. (If you look at the actual file,\nit will be plain text with the data values having commas between\nthem, as the name suggests. You can open the file in R Studio by clicking on it in the Files pane; it should open top\nleft.)\n\nThe final step is to read it into an R data frame. This uses\n`read_csv`; there are several `read_` functions that\nread in different types of file, and you need to use an appropriate\none.\n\nMy spreadsheet got saved as `cars.csv`, so:\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- read_csv(\"cars.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 38 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Car, Country\ndbl (4): MPG, Weight, Cylinders, Horsepower\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncars\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Car\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"MPG\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Cylinders\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horsepower\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Country\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Buick Skylark\",\"2\":\"28.4\",\"3\":\"2.670\",\"4\":\"4\",\"5\":\"90\",\"6\":\"U.S.\"},{\"1\":\"Dodge Omni\",\"2\":\"30.9\",\"3\":\"2.230\",\"4\":\"4\",\"5\":\"75\",\"6\":\"U.S.\"},{\"1\":\"Mercury Zephyr\",\"2\":\"20.8\",\"3\":\"3.070\",\"4\":\"6\",\"5\":\"85\",\"6\":\"U.S.\"},{\"1\":\"Fiat Strada\",\"2\":\"37.3\",\"3\":\"2.130\",\"4\":\"4\",\"5\":\"69\",\"6\":\"Italy\"},{\"1\":\"Peugeot 694 SL\",\"2\":\"16.2\",\"3\":\"3.410\",\"4\":\"6\",\"5\":\"133\",\"6\":\"France\"},{\"1\":\"VW Rabbit\",\"2\":\"31.9\",\"3\":\"1.925\",\"4\":\"4\",\"5\":\"71\",\"6\":\"Germany\"},{\"1\":\"Plymouth Horizon\",\"2\":\"34.2\",\"3\":\"2.200\",\"4\":\"4\",\"5\":\"70\",\"6\":\"U.S.\"},{\"1\":\"Mazda GLC\",\"2\":\"34.1\",\"3\":\"1.975\",\"4\":\"4\",\"5\":\"65\",\"6\":\"Japan\"},{\"1\":\"Buick Estate Wagon\",\"2\":\"16.9\",\"3\":\"4.360\",\"4\":\"8\",\"5\":\"155\",\"6\":\"U.S.\"},{\"1\":\"Audi 5000\",\"2\":\"20.3\",\"3\":\"2.830\",\"4\":\"5\",\"5\":\"103\",\"6\":\"Germany\"},{\"1\":\"Chevy Malibu Wagon\",\"2\":\"19.2\",\"3\":\"3.605\",\"4\":\"8\",\"5\":\"125\",\"6\":\"U.S.\"},{\"1\":\"Dodge Aspen\",\"2\":\"18.6\",\"3\":\"3.620\",\"4\":\"6\",\"5\":\"110\",\"6\":\"U.S.\"},{\"1\":\"VW Dasher\",\"2\":\"30.5\",\"3\":\"2.190\",\"4\":\"4\",\"5\":\"78\",\"6\":\"Germany\"},{\"1\":\"Ford Mustang 4\",\"2\":\"26.5\",\"3\":\"2.585\",\"4\":\"4\",\"5\":\"88\",\"6\":\"U.S.\"},{\"1\":\"Dodge Colt\",\"2\":\"35.1\",\"3\":\"1.915\",\"4\":\"4\",\"5\":\"80\",\"6\":\"Japan\"},{\"1\":\"Datsun 810\",\"2\":\"22.0\",\"3\":\"2.815\",\"4\":\"6\",\"5\":\"97\",\"6\":\"Japan\"},{\"1\":\"VW Scirocco\",\"2\":\"31.5\",\"3\":\"1.990\",\"4\":\"4\",\"5\":\"71\",\"6\":\"Germany\"},{\"1\":\"Chevy Citation\",\"2\":\"28.8\",\"3\":\"2.595\",\"4\":\"6\",\"5\":\"115\",\"6\":\"U.S.\"},{\"1\":\"Olds Omega\",\"2\":\"26.8\",\"3\":\"2.700\",\"4\":\"6\",\"5\":\"115\",\"6\":\"U.S.\"},{\"1\":\"Chrysler LeBaron Wagon\",\"2\":\"18.5\",\"3\":\"3.940\",\"4\":\"8\",\"5\":\"150\",\"6\":\"U.S.\"},{\"1\":\"Datsun 510\",\"2\":\"27.2\",\"3\":\"2.300\",\"4\":\"4\",\"5\":\"97\",\"6\":\"Japan\"},{\"1\":\"AMC Concord D/L\",\"2\":\"18.1\",\"3\":\"3.410\",\"4\":\"6\",\"5\":\"120\",\"6\":\"U.S.\"},{\"1\":\"Buick Century Special\",\"2\":\"20.6\",\"3\":\"3.380\",\"4\":\"6\",\"5\":\"105\",\"6\":\"U.S.\"},{\"1\":\"Saab 99 GLE\",\"2\":\"21.6\",\"3\":\"2.795\",\"4\":\"4\",\"5\":\"115\",\"6\":\"Sweden\"},{\"1\":\"Datsun 210\",\"2\":\"31.8\",\"3\":\"2.020\",\"4\":\"4\",\"5\":\"65\",\"6\":\"Japan\"},{\"1\":\"Ford LTD\",\"2\":\"17.6\",\"3\":\"3.725\",\"4\":\"8\",\"5\":\"129\",\"6\":\"U.S.\"},{\"1\":\"Volvo 240 GL\",\"2\":\"17.0\",\"3\":\"3.140\",\"4\":\"6\",\"5\":\"125\",\"6\":\"Sweden\"},{\"1\":\"Dodge St Regis\",\"2\":\"18.2\",\"3\":\"3.830\",\"4\":\"8\",\"5\":\"135\",\"6\":\"U.S.\"},{\"1\":\"Toyota Corona\",\"2\":\"27.5\",\"3\":\"2.560\",\"4\":\"4\",\"5\":\"95\",\"6\":\"Japan\"},{\"1\":\"Chevette\",\"2\":\"30.0\",\"3\":\"2.155\",\"4\":\"4\",\"5\":\"68\",\"6\":\"U.S.\"},{\"1\":\"Ford Mustang Ghia\",\"2\":\"21.9\",\"3\":\"2.910\",\"4\":\"6\",\"5\":\"109\",\"6\":\"U.S.\"},{\"1\":\"AMC Spirit\",\"2\":\"27.4\",\"3\":\"2.670\",\"4\":\"4\",\"5\":\"80\",\"6\":\"U.S.\"},{\"1\":\"Ford Country Squire Wagon\",\"2\":\"15.5\",\"3\":\"4.054\",\"4\":\"8\",\"5\":\"142\",\"6\":\"U.S.\"},{\"1\":\"BMW 320i\",\"2\":\"21.5\",\"3\":\"2.600\",\"4\":\"4\",\"5\":\"110\",\"6\":\"Germany\"},{\"1\":\"Pontiac Phoenix\",\"2\":\"33.5\",\"3\":\"2.556\",\"4\":\"4\",\"5\":\"90\",\"6\":\"U.S.\"},{\"1\":\"Honda Accord LX\",\"2\":\"29.5\",\"3\":\"2.135\",\"4\":\"4\",\"5\":\"68\",\"6\":\"Japan\"},{\"1\":\"Mercury Grand Marquis\",\"2\":\"16.5\",\"3\":\"3.955\",\"4\":\"8\",\"5\":\"138\",\"6\":\"U.S.\"},{\"1\":\"Chevy Caprice Classic\",\"2\":\"17.0\",\"3\":\"3.840\",\"4\":\"8\",\"5\":\"130\",\"6\":\"U.S.\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n       \nSome information about different types of cars.\n\nYou are now done with this question.\n\n$\\blacksquare$\n\n(e)  <a name=\"part:own-start\">*</a> Start here if you downloaded R and R\nStudio and they are running on your own computer. \nOpen a web browser and point it at \n[link](http://ritsokiguess.site/datafiles/testing.txt). Click\nthe link to see it, and keep the tab open for the next part of this question.\nThis is a text file with three things on each\nline, each separated by exactly one space. Read the data file into a\ndata frame, and display your data frame.\n\nSolution\n\n\nData values separated by exactly one space is the kind of thing that `read_delim` reads, so make another code chunk and fill it with this:\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/testing.txt\"\ntesting <- read_delim(my_url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ntesting\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"g\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"a\"},{\"1\":\"2\",\"2\":\"11\",\"3\":\"b\"},{\"1\":\"3\",\"2\":\"14\",\"3\":\"a\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"b\"},{\"1\":\"5\",\"2\":\"18\",\"3\":\"a\"},{\"1\":\"6\",\"2\":\"21\",\"3\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n     \n\nWhen you run that, you'll see something like my output. The first part\nis `read_delim` telling you what it saw in the file: two\ncolumns of (whole) numbers and one column of text. The top line of the\nfile is assumed to contain names, which are used as the names of the\ncolumns of your data frame. The bottom part of the output, obtained by\nputting the name of the data frame on a line by itself in your code\nchunk, is what the data frame actually looks like. You ought to get\ninto the habit of eyeballing it and checking that it looks like the\nvalues in the data file.\n\nThe things on the left side of the equals signs are variables that you\nare creating in R. You get to choose the names for them. My habit is\nto use `my_url` for URLs of files that I am going to read in,\nand (usually) to give my data frames names that say something about\nwhat they contain, but this is your choice to make.\n\n(This part is exactly the same whether you are running R Studio online\nor have R Studio running on your computer. A remote file is obtained\nin exactly the same way regardless.)\n\n$\\blacksquare$\n\n(f) You might have data in a file on your own computer. To read data\nfrom such a file, R has to know where to find it. Each R project lives\nin a folder, and one way of specifying where a data file is is to give\nits complete path relative to the folder that R Studio is running its\ncurrent project in. This is rather complicated, so we will try a\nsimpler way. To set this up, open a text editor (like Notepad or\nTextEdit). Go back to the web browser tab containing the data you used\nin the previous part. Copy the data from there and paste it into the\ntext editor. Save it somewhere on your computer (like the\nDesktop). Follow the steps in the solution below to read the data \ninto R.\n\nSolution\n\n\nI copied and pasted the data, and saved it in a file called\n`testing.txt` on my computer. I'm assuming that you've\ngiven it a similar name.\nGo back to R Studio. Create a new code chunk containing this:\n::: {.cell}\n\n```{.r .cell-code}\nf <- file.choose()\n```\n:::\n\n     \n\nRun this code chunk. You'll see a file chooser. Find the file you\nsaved on your computer, and click Open (or OK or whatever you\nsee). This saves what R needs to access the file in the variable\n`f`. If you want to, you can look at it:\n\n::: {.cell}\n\n```{.r .cell-code}\nf\n```\n:::\n\n \n\nand you'll see what looks like a file path in the appropriate format\nfor your system (Windows, Mac, Linux).\nTo read the data in, you supply the file path to `read_delim` thus:\n::: {.cell}\n\n```{.r .cell-code}\ntesting2 <- read_delim(f, \" \")\n```\n:::\n\n     \n\nand then you look at it in the same way as before:\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"g\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"a\"},{\"1\":\"2\",\"2\":\"11\",\"3\":\"b\"},{\"1\":\"3\",\"2\":\"14\",\"3\":\"a\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"b\"},{\"1\":\"5\",\"2\":\"18\",\"3\":\"a\"},{\"1\":\"6\",\"2\":\"21\",\"3\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n \n\nCheck.\n\n$\\blacksquare$\n\n(g) You might have a spreadsheet on your computer. Create a\n`.csv` file from it, and use the ideas of the last part to\nread it into R Studio.\n\nSolution\n\n\nOpen the spreadsheet containing the data you want to read into\nR. If there are several sheets in the workbook, make sure you're\nlooking at the right one. Select File, Save As, select \"CSV\"\nor \"comma-separated values\" and give it a name. Save the\nresulting file somewhere.\n\nThen read it into an R data frame. This uses `read_csv`; \nthere are several `read_` functions that\nread in different types of file, and you need to use an appropriate\none. Before that, though, again run\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- file.choose()\n```\n:::\n\n     \n\nto find the `.csv` file on your computer, and then\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- read_csv(f)\n```\n:::\n\n       \n\nto read it in. My spreadsheet was\n\n::: {.cell}\n\n```{.r .cell-code}\ncars\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Car\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"MPG\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Cylinders\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horsepower\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Country\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Buick Skylark\",\"2\":\"28.4\",\"3\":\"2.670\",\"4\":\"4\",\"5\":\"90\",\"6\":\"U.S.\"},{\"1\":\"Dodge Omni\",\"2\":\"30.9\",\"3\":\"2.230\",\"4\":\"4\",\"5\":\"75\",\"6\":\"U.S.\"},{\"1\":\"Mercury Zephyr\",\"2\":\"20.8\",\"3\":\"3.070\",\"4\":\"6\",\"5\":\"85\",\"6\":\"U.S.\"},{\"1\":\"Fiat Strada\",\"2\":\"37.3\",\"3\":\"2.130\",\"4\":\"4\",\"5\":\"69\",\"6\":\"Italy\"},{\"1\":\"Peugeot 694 SL\",\"2\":\"16.2\",\"3\":\"3.410\",\"4\":\"6\",\"5\":\"133\",\"6\":\"France\"},{\"1\":\"VW Rabbit\",\"2\":\"31.9\",\"3\":\"1.925\",\"4\":\"4\",\"5\":\"71\",\"6\":\"Germany\"},{\"1\":\"Plymouth Horizon\",\"2\":\"34.2\",\"3\":\"2.200\",\"4\":\"4\",\"5\":\"70\",\"6\":\"U.S.\"},{\"1\":\"Mazda GLC\",\"2\":\"34.1\",\"3\":\"1.975\",\"4\":\"4\",\"5\":\"65\",\"6\":\"Japan\"},{\"1\":\"Buick Estate Wagon\",\"2\":\"16.9\",\"3\":\"4.360\",\"4\":\"8\",\"5\":\"155\",\"6\":\"U.S.\"},{\"1\":\"Audi 5000\",\"2\":\"20.3\",\"3\":\"2.830\",\"4\":\"5\",\"5\":\"103\",\"6\":\"Germany\"},{\"1\":\"Chevy Malibu Wagon\",\"2\":\"19.2\",\"3\":\"3.605\",\"4\":\"8\",\"5\":\"125\",\"6\":\"U.S.\"},{\"1\":\"Dodge Aspen\",\"2\":\"18.6\",\"3\":\"3.620\",\"4\":\"6\",\"5\":\"110\",\"6\":\"U.S.\"},{\"1\":\"VW Dasher\",\"2\":\"30.5\",\"3\":\"2.190\",\"4\":\"4\",\"5\":\"78\",\"6\":\"Germany\"},{\"1\":\"Ford Mustang 4\",\"2\":\"26.5\",\"3\":\"2.585\",\"4\":\"4\",\"5\":\"88\",\"6\":\"U.S.\"},{\"1\":\"Dodge Colt\",\"2\":\"35.1\",\"3\":\"1.915\",\"4\":\"4\",\"5\":\"80\",\"6\":\"Japan\"},{\"1\":\"Datsun 810\",\"2\":\"22.0\",\"3\":\"2.815\",\"4\":\"6\",\"5\":\"97\",\"6\":\"Japan\"},{\"1\":\"VW Scirocco\",\"2\":\"31.5\",\"3\":\"1.990\",\"4\":\"4\",\"5\":\"71\",\"6\":\"Germany\"},{\"1\":\"Chevy Citation\",\"2\":\"28.8\",\"3\":\"2.595\",\"4\":\"6\",\"5\":\"115\",\"6\":\"U.S.\"},{\"1\":\"Olds Omega\",\"2\":\"26.8\",\"3\":\"2.700\",\"4\":\"6\",\"5\":\"115\",\"6\":\"U.S.\"},{\"1\":\"Chrysler LeBaron Wagon\",\"2\":\"18.5\",\"3\":\"3.940\",\"4\":\"8\",\"5\":\"150\",\"6\":\"U.S.\"},{\"1\":\"Datsun 510\",\"2\":\"27.2\",\"3\":\"2.300\",\"4\":\"4\",\"5\":\"97\",\"6\":\"Japan\"},{\"1\":\"AMC Concord D/L\",\"2\":\"18.1\",\"3\":\"3.410\",\"4\":\"6\",\"5\":\"120\",\"6\":\"U.S.\"},{\"1\":\"Buick Century Special\",\"2\":\"20.6\",\"3\":\"3.380\",\"4\":\"6\",\"5\":\"105\",\"6\":\"U.S.\"},{\"1\":\"Saab 99 GLE\",\"2\":\"21.6\",\"3\":\"2.795\",\"4\":\"4\",\"5\":\"115\",\"6\":\"Sweden\"},{\"1\":\"Datsun 210\",\"2\":\"31.8\",\"3\":\"2.020\",\"4\":\"4\",\"5\":\"65\",\"6\":\"Japan\"},{\"1\":\"Ford LTD\",\"2\":\"17.6\",\"3\":\"3.725\",\"4\":\"8\",\"5\":\"129\",\"6\":\"U.S.\"},{\"1\":\"Volvo 240 GL\",\"2\":\"17.0\",\"3\":\"3.140\",\"4\":\"6\",\"5\":\"125\",\"6\":\"Sweden\"},{\"1\":\"Dodge St Regis\",\"2\":\"18.2\",\"3\":\"3.830\",\"4\":\"8\",\"5\":\"135\",\"6\":\"U.S.\"},{\"1\":\"Toyota Corona\",\"2\":\"27.5\",\"3\":\"2.560\",\"4\":\"4\",\"5\":\"95\",\"6\":\"Japan\"},{\"1\":\"Chevette\",\"2\":\"30.0\",\"3\":\"2.155\",\"4\":\"4\",\"5\":\"68\",\"6\":\"U.S.\"},{\"1\":\"Ford Mustang Ghia\",\"2\":\"21.9\",\"3\":\"2.910\",\"4\":\"6\",\"5\":\"109\",\"6\":\"U.S.\"},{\"1\":\"AMC Spirit\",\"2\":\"27.4\",\"3\":\"2.670\",\"4\":\"4\",\"5\":\"80\",\"6\":\"U.S.\"},{\"1\":\"Ford Country Squire Wagon\",\"2\":\"15.5\",\"3\":\"4.054\",\"4\":\"8\",\"5\":\"142\",\"6\":\"U.S.\"},{\"1\":\"BMW 320i\",\"2\":\"21.5\",\"3\":\"2.600\",\"4\":\"4\",\"5\":\"110\",\"6\":\"Germany\"},{\"1\":\"Pontiac Phoenix\",\"2\":\"33.5\",\"3\":\"2.556\",\"4\":\"4\",\"5\":\"90\",\"6\":\"U.S.\"},{\"1\":\"Honda Accord LX\",\"2\":\"29.5\",\"3\":\"2.135\",\"4\":\"4\",\"5\":\"68\",\"6\":\"Japan\"},{\"1\":\"Mercury Grand Marquis\",\"2\":\"16.5\",\"3\":\"3.955\",\"4\":\"8\",\"5\":\"138\",\"6\":\"U.S.\"},{\"1\":\"Chevy Caprice Classic\",\"2\":\"17.0\",\"3\":\"3.840\",\"4\":\"8\",\"5\":\"130\",\"6\":\"U.S.\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n \nSome information about different types of cars.\n\n$\\blacksquare$\n\n\n\n\n\n\nMy solutions follow:\n\n##  Getting started\n\n\nThis question is to get you started using R.\n\n\n(a) Start R Studio at `r.datatools` or on your computer, in some project. (If you started up a\nnew project in the previous question and are still logged in, use\nthat; if not, create a new project with File, New Project, and New Directory. Then select New Project and give it a name. Click Create Project. This will give you an empty workspace to start from.)\n\nSolution\n\n\nYou ought to see something like this. I have a dark blue\nbackground here, which you probably do not. \n\n\n![](empty.png)\n        \n\nIt won't look exactly like that (for example, the background\nwill probably be white) but there should be one thing\non the left half, and at the top\nright it'll say \"Environment is empty\". \nExtra: if you want to tweak things, select Tools (at the top of\nthe screen) and from it Global Options, then click\nAppearance. You can make the text bigger or smaller via Editor\nFont Size, and choose a different colour scheme by picking one\nof the Editor Themes (which previews on the right). My favourite\nis Tomorrow Night Blue. Click Apply or OK when you have found\nsomething you like. (I spend a lot of time in R Studio, and I\nlike having a dark background to be easier on my eyes.)\n\n$\\blacksquare$\n\n(b) We're going to do some stuff in R here, just to get used to\nit. First, make a Quarto Document by selecting File, New File and Quarto Document.\n\nSolution\n\n\nThe first time, you might be invited to \"install some packages\"\nto make the Document thing work. Let it do that by clicking\nYes. After that, you'll have something like this:\n\n\n![](rnote1.png)\n        \n        \nxxx need a new screenshot\n\nxxx   need to talk about source and visual mode\n\nFind the Insert and Run buttons along the top of the document\nwindow. We'll be using them shortly. (The template notebook may\nor may not be maximized; it doesn't matter either way. You might\nsee all four panes or as few as one. If you want to control\nthat, select View at the top, then Panes, then either Show All\nPanes or Zoom Source, as you prefer. In the menus, you'll also\nsee keyboard shortcuts for these, which you might find worth\nlearning.)\n\n$\\blacksquare$\n\n(c) Change the title to something of your choosing. Then go down\nto line 5, click on the Insert button and select R. You should see\na \"code chunk\" appear at line 5, which we are going to use in a\nmoment. \n\nSolution\n\n\nSomething like this:\n\n\n![](chunk1.png)\n        \n\n$\\blacksquare$\n\n(d) Type the line of code shown below into the chunk in the\nDocument:\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars\n```\n:::\n\n\n\nSolution\n\n\nWhat this will do: get hold of a built-in data set with\ninformation about some different models of car, and display it.\n\n\n![](chunk2.png)\n        \n\nIn approximately five seconds, you'll be demonstrating that for\nyourself. \n\n$\\blacksquare$\n\n(e) Run this command. To do that, look at the top right of\nyour code chunk block (shaded in a slightly different colour). You\nshould see a gear symbol, a down arrow and a green \"play    button\". \nClick the play button. This will run the code, and show\nthe output below the code chunk.\n\nSolution\n\n\nHere's what I get (yours will be the same). \n\n\n![](chunk3.png)\n        \n\nThis is a rectangular array of rows and columns, with\nindividuals in rows and variables in columns, known as a \n\"data frame\". When you display a data frame in a Quarto document, you see\n10 rows and as many columns as will fit on the screen.  At the\nbottom, it says how many rows and columns there are altogether\n(here 32 rows and 11 columns), and which ones are being\ndisplayed.  You can see more rows by clicking on Next, and if\nthere are more columns, you'll see a little arrow next to the\nrightmost column (as here next to `am`) that you can\nclick on to see more columns. Try it and see. Or if you want to\ngo to a particular collection of rows, click one of the numbers\nbetween Previous and Next: 1 is rows 1--10, 2 is rows 11--20,\nand so on.\nThe column on the left without a header (containing the names of\nthe cars) is called \"row names\". These have a funny kind of\nstatus, kind of a column and kind of not a column; usually, if\nwe need to use the names, we have to put them in a column first.\nIn future solutions, rather than showing you a screenshot,\nexpect me to show you something like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hp\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"drat\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"qsec\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vs\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"am\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gear\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carb\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.620\",\"7\":\"16.46\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\"},{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.875\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\"},{\"1\":\"22.8\",\"2\":\"4\",\"3\":\"108.0\",\"4\":\"93\",\"5\":\"3.85\",\"6\":\"2.320\",\"7\":\"18.61\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\"},{\"1\":\"21.4\",\"2\":\"6\",\"3\":\"258.0\",\"4\":\"110\",\"5\":\"3.08\",\"6\":\"3.215\",\"7\":\"19.44\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\"},{\"1\":\"18.7\",\"2\":\"8\",\"3\":\"360.0\",\"4\":\"175\",\"5\":\"3.15\",\"6\":\"3.440\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\"},{\"1\":\"18.1\",\"2\":\"6\",\"3\":\"225.0\",\"4\":\"105\",\"5\":\"2.76\",\"6\":\"3.460\",\"7\":\"20.22\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\"},{\"1\":\"14.3\",\"2\":\"8\",\"3\":\"360.0\",\"4\":\"245\",\"5\":\"3.21\",\"6\":\"3.570\",\"7\":\"15.84\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\"},{\"1\":\"24.4\",\"2\":\"4\",\"3\":\"146.7\",\"4\":\"62\",\"5\":\"3.69\",\"6\":\"3.190\",\"7\":\"20.00\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"2\"},{\"1\":\"22.8\",\"2\":\"4\",\"3\":\"140.8\",\"4\":\"95\",\"5\":\"3.92\",\"6\":\"3.150\",\"7\":\"22.90\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"2\"},{\"1\":\"19.2\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.30\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\"},{\"1\":\"17.8\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.90\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\"},{\"1\":\"16.4\",\"2\":\"8\",\"3\":\"275.8\",\"4\":\"180\",\"5\":\"3.07\",\"6\":\"4.070\",\"7\":\"17.40\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"3\"},{\"1\":\"17.3\",\"2\":\"8\",\"3\":\"275.8\",\"4\":\"180\",\"5\":\"3.07\",\"6\":\"3.730\",\"7\":\"17.60\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"3\"},{\"1\":\"15.2\",\"2\":\"8\",\"3\":\"275.8\",\"4\":\"180\",\"5\":\"3.07\",\"6\":\"3.780\",\"7\":\"18.00\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"3\"},{\"1\":\"10.4\",\"2\":\"8\",\"3\":\"472.0\",\"4\":\"205\",\"5\":\"2.93\",\"6\":\"5.250\",\"7\":\"17.98\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\"},{\"1\":\"10.4\",\"2\":\"8\",\"3\":\"460.0\",\"4\":\"215\",\"5\":\"3.00\",\"6\":\"5.424\",\"7\":\"17.82\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\"},{\"1\":\"14.7\",\"2\":\"8\",\"3\":\"440.0\",\"4\":\"230\",\"5\":\"3.23\",\"6\":\"5.345\",\"7\":\"17.42\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\"},{\"1\":\"32.4\",\"2\":\"4\",\"3\":\"78.7\",\"4\":\"66\",\"5\":\"4.08\",\"6\":\"2.200\",\"7\":\"19.47\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\"},{\"1\":\"30.4\",\"2\":\"4\",\"3\":\"75.7\",\"4\":\"52\",\"5\":\"4.93\",\"6\":\"1.615\",\"7\":\"18.52\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"2\"},{\"1\":\"33.9\",\"2\":\"4\",\"3\":\"71.1\",\"4\":\"65\",\"5\":\"4.22\",\"6\":\"1.835\",\"7\":\"19.90\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\"},{\"1\":\"21.5\",\"2\":\"4\",\"3\":\"120.1\",\"4\":\"97\",\"5\":\"3.70\",\"6\":\"2.465\",\"7\":\"20.01\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\"},{\"1\":\"15.5\",\"2\":\"8\",\"3\":\"318.0\",\"4\":\"150\",\"5\":\"2.76\",\"6\":\"3.520\",\"7\":\"16.87\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\"},{\"1\":\"15.2\",\"2\":\"8\",\"3\":\"304.0\",\"4\":\"150\",\"5\":\"3.15\",\"6\":\"3.435\",\"7\":\"17.30\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\"},{\"1\":\"13.3\",\"2\":\"8\",\"3\":\"350.0\",\"4\":\"245\",\"5\":\"3.73\",\"6\":\"3.840\",\"7\":\"15.41\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\"},{\"1\":\"19.2\",\"2\":\"8\",\"3\":\"400.0\",\"4\":\"175\",\"5\":\"3.08\",\"6\":\"3.845\",\"7\":\"17.05\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\"},{\"1\":\"27.3\",\"2\":\"4\",\"3\":\"79.0\",\"4\":\"66\",\"5\":\"4.08\",\"6\":\"1.935\",\"7\":\"18.90\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\"},{\"1\":\"26.0\",\"2\":\"4\",\"3\":\"120.3\",\"4\":\"91\",\"5\":\"4.43\",\"6\":\"2.140\",\"7\":\"16.70\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"2\"},{\"1\":\"30.4\",\"2\":\"4\",\"3\":\"95.1\",\"4\":\"113\",\"5\":\"3.77\",\"6\":\"1.513\",\"7\":\"16.90\",\"8\":\"1\",\"9\":\"1\",\"10\":\"5\",\"11\":\"2\"},{\"1\":\"15.8\",\"2\":\"8\",\"3\":\"351.0\",\"4\":\"264\",\"5\":\"4.22\",\"6\":\"3.170\",\"7\":\"14.50\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"4\"},{\"1\":\"19.7\",\"2\":\"6\",\"3\":\"145.0\",\"4\":\"175\",\"5\":\"3.62\",\"6\":\"2.770\",\"7\":\"15.50\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"6\"},{\"1\":\"15.0\",\"2\":\"8\",\"3\":\"301.0\",\"4\":\"335\",\"5\":\"3.54\",\"6\":\"3.570\",\"7\":\"14.60\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"8\"},{\"1\":\"21.4\",\"2\":\"4\",\"3\":\"121.0\",\"4\":\"109\",\"5\":\"4.11\",\"6\":\"2.780\",\"7\":\"18.60\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"2\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe top bit is the code, the bottom bit with the `##` the\noutput. In this kind of display, you only see the first ten rows (by\ndefault). \n\nIf you don't see the \"play button\", make sure that what you have\nreally is a code chunk. (I often accidentally delete one of the\nspecial characters above or below the code chunk). If you can't figure\nit out, delete this code chunk and make a new one. Sometimes R Studio\ngets confused.\n\nOn the code chunk, the other symbols are the settings for this chunk\n(you have the choice to display or not display the code or the output\nor to not actually run the code). The second one, the down arrow, runs\nall the chunks prior to this one (but not this one). \n\nThe output has its own little buttons. The first one pops the output\nout into its own window; the second one shows or hides the output, and\nthe third one deletes the output (so that you have to run the chunk\nagain to get it back). Experiment. You can't do much damage here.\n\n$\\blacksquare$\n\n(f) Something a little more interesting: `summary`\nobtains a summary of whatever you feed it (the five-number summary\nplus the mean for numerical variables). Obtain this for our data\nframe. To do this, create a new code chunk below the previous one,\ntype `summary(mtcars)` into the code chunk, and run it.\n\nSolution\n\n\nThis is what you should see:\n\n\n![](chunk4.png)\n        \n\nor the other way:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n:::\n:::\n\nFor the gas mileage column `mpg`, the mean is bigger than the\nmedian, and the largest value is unusually large compared with the\nothers, suggesting a distribution that is skewed to the right.\n\nThere are 11 numeric (quantitative) variables, so we get the\nfive-number summary plus mean for each one. Categorical variables, if\nwe had any here, would be displayed a different way.\n\n(In case you are wondering, the way without screenshots is obtained by\n*my* writing a notebook with code chunks and running them, so\nthis output genuinely *is* obtained by running the code you see.)\n\n$\\blacksquare$\n\n(g) Let's make a boxplot of the gas mileage data. This is a \n\"poor man's boxplot\"; we'll see a nicer-looking way later. To do it\nthis way, make another new code chunk, enter the code\n`boxplot(mtcars$mpg)` into it, and run the chunk.\n\nSolution\n\n\nThis is what you should see:\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(mtcars$mpg)\n```\n\n::: {.cell-output-display}\n![](getting_used_files/figure-html/r0-4-1.png){width=672}\n:::\n:::\n\nThe long upper whisker supports our guess from before that the\ndistribution is right-skewed.\n\n$\\blacksquare$\n\n(h) Some aesthetics to finish with: delete the template notebook\n(all the stuff you didn't type below your code chunks and\noutput). Then add some narrative text above and below your code\nchunks. Above the code chunk is where you say what you are going\nto do (and maybe why you are doing it), and below is where you say\nwhat you conclude from the output you just obtained.\n\nSolution\n\n\nMy complete document is at\n[http://ritsokiguess.site/datafiles/a0-notebook-1.Rmd](http://ritsokiguess.site/datafiles/a0-notebook-1.Rmd). Take\na look at it. I added one extra thing: my variable names have\n\"backticks\" around them. You'll see the effect of this in a\nmoment.  Backtick is on the key to the left of 1 and below Esc\non your keyboard, along with a \"squiggle\" symbol that we'll be\nusing later in the course.\n\n$\\blacksquare$\n\n(i) Save your document (the usual way with File and Save). This\nsaves it *on the `r.datatools` server* (and not on your\ncomputer). This means that when you come back to R Studio\nlater, even from another device, this document will still be\navailable to you.\nNow click Render. This produces a pretty HTML version of your\ndocument, that should display on the right of your R Studio in the Viewer.\n\nSolution\n\n\nMy HTML document is at\n[http://ritsokiguess.site/datafiles/a0-notebook-1.nb.html](http://ritsokiguess.site/datafiles/a0-notebook-1.nb.html).\n\nHere's where you see the effect of the backticks: all the\nvariable names are in `typewriter font` so that you can\nsee they are variable names and not something else. If you want\nto try this notebook out yourself, you have a couple of options:\n(i) make a new Quarto Document on `r.datatools` and copy-paste the\ncontents of my file (it's just text), or (ii) download my document onto your computer, and then upload it to `r.datatools`. Look in the Files pane bottom right, and next to New\nFolder you should see Upload. Upload the file from wherever it\ngot saved to when you downloaded it.\nExtra: if you're feeling ambitious, click the arrow to the right\nof Preview and select Knit to Word. The button changes to Knit\nwith a ball of wool beside it. Now, when you \"knit\" the\nnotebook, you get a Word document directly --- look for it in\nthe Files pane. If you want to, you can hand this kind of thing\nin (on later assignments), but you'll have to do a little work\nfirst: first, find it in your Files list, then click the\ncheckbox to the left of it, then click More (with the gear, on\nthe same line as New Folder and Upload), then select Export (and\nclick Download). This will put a copy in your downloads folder\non your computer, and you can open it from there.\nIf you're feeling extra-ambitious, you can try Knit to PDF. This\nproduces something that looks as if it was written in LaTeX,\nbut actually wasn't. To make this work, if you have a\n`library(tidyverse)` line somewhere, as you probably\nwill, find the code chunk it's in, and make it look like this:\n\n![](Screenshot_2018-10-10_17-24-47.png)\n\nThen it will work.\nExtra extra: if you like the keyboard better than the mouse, R\nStudio has a lot of keyboard shortcuts. Two that are useful now:\ncontrol-alt-i inserts a code chunk where the\ncursor is, and control-shift-enter runs the code chunk that the\ncursor is in, if it is in one. (Mac users, \"command\" instead\nof \"control\" in both cases.) I use these two a lot.\n\n$\\blacksquare$\n\n(j) Optional extra: practice handing in your previewed R\nnotebook, as if it were an assignment that was worth\nsomething. (It is good to get the practice in a low-stakes\nsituation, so that you'll know what to do next week.)\n\nSolution\n\n\nThere are two steps: download the HTML file onto your computer,\nand then handing it in on Quercus.\nTo download: find the HTML file that you want to download in the\nFiles pane bottom right. There should be two files starting with\nthe same thing, eg. `test1.Rmd`, which is the notebook\nyou wrote, and `test1.nb.html`, which is the previewed\nversion of it, and is the one you want to download. (The\n`test1` part is the name *you* chose when you saved\nit.) Click the checkbox to the left of the HTML file.\nNow click on More above the bottom-right pane. This pops up a\nmenu from which you choose Export. This will pop up another\nwindow called Export Files, where you put the name that the file\nwill have on your computer. (I usually leave the name the same.)\nClick Download. The file will go to your Downloads folder, or\nwherever things you download off the web go.\n\nNow, to hand it in. Open up Quercus at `q.utoronto.ca`,\nlog in and navigate to this course. Click Assignments. Click\n(the title of) Assignment 0. There is a big blue Submit\nAssignment button top right. Click it. You'll get a File Upload\nat the bottom of the screen. \nClick Choose File and find the HTML file that you\ndownloaded. Click Open (or equivalent on your system). The name\nof the file should appear next to Choose File. Click Submit\nAssignment. You'll see Submitted at the top right.\n\nIf you want to try this again, you can Re-submit Assignment as\nmany times as you like. (For the real thing, you can use this if\nyou realize you made a mistake in something you submitted. The\ngraders' instructions, for the real thing, are to grade the\n*last* file submitted, so in that case you need to make\nsure that the last thing submitted includes *everything*\nthat you want graded. Here, though, it doesn't matter.)\n\n$\\blacksquare$\n\n(k) Optional extra. Something more ambitious: make a scatterplot of gas\nmileage `mpg`, on the $y$ axis, against horsepower,\n`hp`, on the $x$-axis.\n\nSolution\n\n\nThat goes like this. I'll explain the steps below. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nggplot(mtcars, aes(x=hp, y=mpg))+geom_point()\n```\n\n::: {.cell-output-display}\n![](getting_used_files/figure-html/r0-5-1.png){width=672}\n:::\n:::\n$ %$ %$ \n\nThis shows a somewhat downward trend, which is what you'd expect,\nsince a larger `hp` value means a more powerful engine, which\nwill probably consume more gas and get *fewer* miles per gallon.\nAs for the code: to make a `ggplot` plot, as we will shortly\nsee in class, you first need a `ggplot` statement that says\nwhat to plot. The first thing in a `ggplot` is a data frame\n(`mtcars` here), and then the `aes` says that the plot\nwill have `hp` on the\n$x$-axis and `mpg` on the $y$-axis, taken from the data frame\nthat you specified.  That's all of the what-to-plot. The last thing is\nhow to plot it; `geom_point()` says to plot the data values as\npoints.\n\nYou might like to add a regression line to the plot. That is a matter\nof adding this to the end of the plotting command:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x=hp, y=mpg))+geom_point()+geom_smooth(method=\"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](getting_used_files/figure-html/r0-6-1.png){width=672}\n:::\n:::\n\nThe line definitely goes downhill. Decide for yourself how well you\nthink a line fits these data.\n\n$\\blacksquare$\n\n\n##  Reading data from a file\n\n\n In this question, we read a file from the web and do some\ndescriptive statistics and a graph. This is very like what you will be\ndoing on future assignments, so it's good to practice it now.\n\nTake a look at the data file at\n[http://ritsokiguess.site/datafiles/jumping.txt](http://ritsokiguess.site/datafiles/jumping.txt). These are\nmeasurements on 30 rats that were randomly made to do different\namounts of jumping by group (we'll see the details later in the\ncourse). The control group did no jumping, and the other groups did\n\"low jumping\" and \"high jumping\". The first column says which\njumping group each rat was in, and the second is the rat's bone\ndensity (the experimenters' supposition was that more jumping should\ngo with higher bone density).\n\n\n\n(a) What are the two columns of data separated by? (The fancy word\nis \"delimited\"). \n\nSolution\n\n\nExactly one space. This is true all the way down, as you can check.\n\n$\\blacksquare$\n\n(b) Make a new R Notebook. Leave the first four lines, but get rid\nof the rest of the template document. Start with a code chunk\ncontaining `library(tidyverse)`. Run it.\n\nSolution\n\n\nYou will get either the same message as before or nothing. (I got\nnothing because I had already loaded the `tidyverse` in\nthis session.)\n\n$\\blacksquare$\n\n(c) Put the URL of the data file in a variable called\n`my_url`. Then use `read_delim` to read in the\nfile. (See solutions for how.) `read_delim` reads data files\nwhere the data values are always separated by the same single\ncharacter, here a space. Save the data frame in a variable `rats`.\n\nSolution\n\n\nLike this:\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url=\"http://ritsokiguess.site/datafiles/jumping.txt\"\nrats=read_delim(my_url,\" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): group\ndbl (1): density\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\nThe second thing in `read_delim` is the thing that separates\nthe data values. Often when you use `read_delim` it'll be a space.\n\n$\\blacksquare$\n\n(d) Take a look at your data frame, by making a new code chunk and\nputting the data frame's name in it (as we did with\n`mtcars`). \n\nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrats\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"density\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Control\",\"2\":\"611\"},{\"1\":\"Control\",\"2\":\"621\"},{\"1\":\"Control\",\"2\":\"614\"},{\"1\":\"Control\",\"2\":\"593\"},{\"1\":\"Control\",\"2\":\"593\"},{\"1\":\"Control\",\"2\":\"653\"},{\"1\":\"Control\",\"2\":\"600\"},{\"1\":\"Control\",\"2\":\"554\"},{\"1\":\"Control\",\"2\":\"603\"},{\"1\":\"Control\",\"2\":\"569\"},{\"1\":\"Lowjump\",\"2\":\"635\"},{\"1\":\"Lowjump\",\"2\":\"605\"},{\"1\":\"Lowjump\",\"2\":\"638\"},{\"1\":\"Lowjump\",\"2\":\"594\"},{\"1\":\"Lowjump\",\"2\":\"599\"},{\"1\":\"Lowjump\",\"2\":\"632\"},{\"1\":\"Lowjump\",\"2\":\"631\"},{\"1\":\"Lowjump\",\"2\":\"588\"},{\"1\":\"Lowjump\",\"2\":\"607\"},{\"1\":\"Lowjump\",\"2\":\"596\"},{\"1\":\"Highjump\",\"2\":\"650\"},{\"1\":\"Highjump\",\"2\":\"622\"},{\"1\":\"Highjump\",\"2\":\"626\"},{\"1\":\"Highjump\",\"2\":\"626\"},{\"1\":\"Highjump\",\"2\":\"631\"},{\"1\":\"Highjump\",\"2\":\"622\"},{\"1\":\"Highjump\",\"2\":\"643\"},{\"1\":\"Highjump\",\"2\":\"674\"},{\"1\":\"Highjump\",\"2\":\"643\"},{\"1\":\"Highjump\",\"2\":\"650\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThere are 30 rows and two columns, as there should be.\n\n$\\blacksquare$\n\n(e) Find the mean bone density for rats that did each amount of jumping.\n\nSolution\n\n\nThis is something you'll see a lot: `group_by` followed by\n`summarize`. Reminder: to get that funny thing with the\npercent signs (called the \"pipe symbol\"), type control-shift-M (or\nequivalent on a Mac):\n\n::: {.cell}\n\n```{.r .cell-code}\nrats %>% group_by(group) %>%\nsummarize(m=mean(density))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"m\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Control\",\"2\":\"601.1\"},{\"1\":\"Highjump\",\"2\":\"638.7\"},{\"1\":\"Lowjump\",\"2\":\"612.5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe mean bone density is clearly highest for the high jumping group,\nand not much different between the low-jumping and control groups.\n\n$\\blacksquare$\n\n(f) Make a boxplot of bone density for each jumping group.\n\nSolution\n\n\nOn a boxplot, the groups go across and the values go up and down,\nso the right syntax is this:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rats,aes(x=group, y=density))+geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](getting_used_files/figure-html/lippach-1.png){width=672}\n:::\n:::\n\nGiven the amount of variability, the control and low-jump groups are\nvery similar (with the control group having a couple of outliers), but\nthe high-jump group seems to have a consistently higher bone density\nthan the others.\n\nThis is more or less in line with what the experimenters were\nguessing, but it seems that it has to be high jumping to make a\ndifference. \n\nYou might recognize that this is the kind of data where we would use\nanalysis of variance, which we will do later on in the course: we are\ncomparing several (here three) groups.\n\n$\\blacksquare$\n\n\n\n##  Reading files different ways\n\n\n This question is about different ways of reading data files. If you're working online (using `r.datatools` or similar),  start at the beginning. If you're using R Studio running on your own computer, start at part (<a href=\"#part:own-start\">here</a>). \n\n\n\n(a) Log in to `r.datatools.utoronto.ca`. Open up a project (or start a new\none), and watch the spinning circles for a few minutes. When that's\ndone, create a new Quarto Document with File, New File, Quarto Document. Delete the \"template\" document, but not the top\nlines with `title:` \nand `output:` in them. Add a code chunk that contains `library(tidyverse)` and run it.\n\nSolution\n\n\nSo far you (with luck) have something that looks like this:\n\n![](Screenshot_2019-01-10_11-55-06.png)\n\n\nIf you have an error rather than that output, you probably need to\ninstall the `tidyverse` first. Make another code chunk,\ncontaining\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n \n\nand run it. Wait for it to finish. It may take a while. If it\ncompletes successfully (you might see the word DONE at the end),\ndelete that code chunk (you don't need it any more) and try again with\nthe `library(tidyverse)` chunk. It should run properly this\ntime.\n\n$\\blacksquare$\n\n(b)  <a name=\"part:internet-file\">*</a> The easiest kind of files to read\nin are ones on the Internet, with a URL address that begins with\n`http` \nor `https`.  I have a small file at\n[link](http://ritsokiguess.site/datafiles/testing.txt). Click\nthe link to see it, and keep the tab open for the next part of this question.\nThis is a text file with three things on each\nline, each separated by exactly one space. Read the data file into a\ndata frame, and display your data frame.\n\nSolution\n\n\nData values separated by exactly one space is the kind of thing that `read_delim` reads, so make another code chunk and fill it with this:\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/testing.txt\"\ntesting <- read_delim(my_url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ntesting\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"g\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"a\"},{\"1\":\"2\",\"2\":\"11\",\"3\":\"b\"},{\"1\":\"3\",\"2\":\"14\",\"3\":\"a\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"b\"},{\"1\":\"5\",\"2\":\"18\",\"3\":\"a\"},{\"1\":\"6\",\"2\":\"21\",\"3\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n     \n\nWhen you run that, you'll see something like my output. The first part\nis `read_delim` telling you what it saw in the file: two\ncolumns of (whole) numbers and one column of text. The top line of the\nfile is assumed to contain names, which are used as the names of the\ncolumns of your data frame. The bottom part of the output, obtained by\nputting the name of the data frame on a line by itself in your code\nchunk, is what the data frame actually looks like. You ought to get\ninto the habit of eyeballing it and checking that it looks like the\nvalues in the data file.\n\nThe things on the left side of the `<-` symbol (that is meant to look like an arrow pointing left) are variables that you\nare creating in R. You get to choose the names for them. My habit is\nto use `my_url` for URLs of files that I am going to read in,\nand (usually) to give my data frames names that say something about\nwhat they contain, but this is your choice to make.\n\n$\\blacksquare$\n\n(c) You might have data in a file on your own computer. To read\ndata from such a file, you first have to *upload* it to `r.datatools`, and then read it from there. To practice this: open a\ntext editor (like Notepad or TextEdit). Go back to the web browser\ntab containing the data you used in the previous part. Copy the data\nfrom there and paste it into the text editor. Save it somewhere on\nyour computer (like the Desktop). Upload that file, read in the data and verify that you get the right\nthing. (For this last part, see the Solution.)\n\nSolution\n\n\nI copied and pasted the data, and saved it in a file called\n`testing.txt` on my computer. I'm assuming that you've\ngiven it a similar name.\nThen go back to `r.datatools`. You should have a Files pane\nbottom right. If you don't see a pane bottom right at all, press\nControl-Shift-0 to show all the panes. If you see something bottom\nright but it's not Files (for example a plot), click the Files\ntab, and you should see a list of things that look like files, like this:\n\n\n![](Screenshot_2019-01-10_12-29-48.png)\n\n\nClick the Upload button (next to New Folder), click Choose\nFile. Use the file finder to track down the file you saved on your\ncomputer, then click OK. The file should be uploaded to the same\nfolder on `r.datatools` that your project is, and appear in the\nFiles pane bottom right.\n\nTo read it in, you supply the file name to `read_delim` thus:\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2 <- read_delim(\"testing.txt\", \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n     \n\nand then you look at it in the same way as before:\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"g\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"a\"},{\"1\":\"2\",\"2\":\"11\",\"3\":\"b\"},{\"1\":\"3\",\"2\":\"14\",\"3\":\"a\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"b\"},{\"1\":\"5\",\"2\":\"18\",\"3\":\"a\"},{\"1\":\"6\",\"2\":\"21\",\"3\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n \n\nCheck.\n\n$\\blacksquare$\n\n(d) You might have a spreadsheet on your computer. Create a\n`.csv` file from it, and use the ideas of the last part to\nread it into R Studio.\n\nSolution\n\n\nOpen the spreadsheet containing the data you want to read into\nR. If there are several sheets in the workbook, make sure you're\nlooking at the right one. Select File, Save As, select \"CSV\"\nor \"comma-separated values\" and give it a name. Save the\nresulting file somewhere.\n\nThen follow the same steps as the previous part to upload it to\nyour project on `r.datatools`. (If you look at the actual file,\nit will be plain text with the data values having commas between\nthem, as the name suggests. You can open the file in R Studio by clicking on it in the Files pane; it should open top\nleft.)\n\nThe final step is to read it into an R data frame. This uses\n`read_csv`; there are several `read_` functions that\nread in different types of file, and you need to use an appropriate\none.\n\nMy spreadsheet got saved as `cars.csv`, so:\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- read_csv(\"cars.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 38 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Car, Country\ndbl (4): MPG, Weight, Cylinders, Horsepower\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncars\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Car\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"MPG\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Cylinders\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horsepower\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Country\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Buick Skylark\",\"2\":\"28.4\",\"3\":\"2.670\",\"4\":\"4\",\"5\":\"90\",\"6\":\"U.S.\"},{\"1\":\"Dodge Omni\",\"2\":\"30.9\",\"3\":\"2.230\",\"4\":\"4\",\"5\":\"75\",\"6\":\"U.S.\"},{\"1\":\"Mercury Zephyr\",\"2\":\"20.8\",\"3\":\"3.070\",\"4\":\"6\",\"5\":\"85\",\"6\":\"U.S.\"},{\"1\":\"Fiat Strada\",\"2\":\"37.3\",\"3\":\"2.130\",\"4\":\"4\",\"5\":\"69\",\"6\":\"Italy\"},{\"1\":\"Peugeot 694 SL\",\"2\":\"16.2\",\"3\":\"3.410\",\"4\":\"6\",\"5\":\"133\",\"6\":\"France\"},{\"1\":\"VW Rabbit\",\"2\":\"31.9\",\"3\":\"1.925\",\"4\":\"4\",\"5\":\"71\",\"6\":\"Germany\"},{\"1\":\"Plymouth Horizon\",\"2\":\"34.2\",\"3\":\"2.200\",\"4\":\"4\",\"5\":\"70\",\"6\":\"U.S.\"},{\"1\":\"Mazda GLC\",\"2\":\"34.1\",\"3\":\"1.975\",\"4\":\"4\",\"5\":\"65\",\"6\":\"Japan\"},{\"1\":\"Buick Estate Wagon\",\"2\":\"16.9\",\"3\":\"4.360\",\"4\":\"8\",\"5\":\"155\",\"6\":\"U.S.\"},{\"1\":\"Audi 5000\",\"2\":\"20.3\",\"3\":\"2.830\",\"4\":\"5\",\"5\":\"103\",\"6\":\"Germany\"},{\"1\":\"Chevy Malibu Wagon\",\"2\":\"19.2\",\"3\":\"3.605\",\"4\":\"8\",\"5\":\"125\",\"6\":\"U.S.\"},{\"1\":\"Dodge Aspen\",\"2\":\"18.6\",\"3\":\"3.620\",\"4\":\"6\",\"5\":\"110\",\"6\":\"U.S.\"},{\"1\":\"VW Dasher\",\"2\":\"30.5\",\"3\":\"2.190\",\"4\":\"4\",\"5\":\"78\",\"6\":\"Germany\"},{\"1\":\"Ford Mustang 4\",\"2\":\"26.5\",\"3\":\"2.585\",\"4\":\"4\",\"5\":\"88\",\"6\":\"U.S.\"},{\"1\":\"Dodge Colt\",\"2\":\"35.1\",\"3\":\"1.915\",\"4\":\"4\",\"5\":\"80\",\"6\":\"Japan\"},{\"1\":\"Datsun 810\",\"2\":\"22.0\",\"3\":\"2.815\",\"4\":\"6\",\"5\":\"97\",\"6\":\"Japan\"},{\"1\":\"VW Scirocco\",\"2\":\"31.5\",\"3\":\"1.990\",\"4\":\"4\",\"5\":\"71\",\"6\":\"Germany\"},{\"1\":\"Chevy Citation\",\"2\":\"28.8\",\"3\":\"2.595\",\"4\":\"6\",\"5\":\"115\",\"6\":\"U.S.\"},{\"1\":\"Olds Omega\",\"2\":\"26.8\",\"3\":\"2.700\",\"4\":\"6\",\"5\":\"115\",\"6\":\"U.S.\"},{\"1\":\"Chrysler LeBaron Wagon\",\"2\":\"18.5\",\"3\":\"3.940\",\"4\":\"8\",\"5\":\"150\",\"6\":\"U.S.\"},{\"1\":\"Datsun 510\",\"2\":\"27.2\",\"3\":\"2.300\",\"4\":\"4\",\"5\":\"97\",\"6\":\"Japan\"},{\"1\":\"AMC Concord D/L\",\"2\":\"18.1\",\"3\":\"3.410\",\"4\":\"6\",\"5\":\"120\",\"6\":\"U.S.\"},{\"1\":\"Buick Century Special\",\"2\":\"20.6\",\"3\":\"3.380\",\"4\":\"6\",\"5\":\"105\",\"6\":\"U.S.\"},{\"1\":\"Saab 99 GLE\",\"2\":\"21.6\",\"3\":\"2.795\",\"4\":\"4\",\"5\":\"115\",\"6\":\"Sweden\"},{\"1\":\"Datsun 210\",\"2\":\"31.8\",\"3\":\"2.020\",\"4\":\"4\",\"5\":\"65\",\"6\":\"Japan\"},{\"1\":\"Ford LTD\",\"2\":\"17.6\",\"3\":\"3.725\",\"4\":\"8\",\"5\":\"129\",\"6\":\"U.S.\"},{\"1\":\"Volvo 240 GL\",\"2\":\"17.0\",\"3\":\"3.140\",\"4\":\"6\",\"5\":\"125\",\"6\":\"Sweden\"},{\"1\":\"Dodge St Regis\",\"2\":\"18.2\",\"3\":\"3.830\",\"4\":\"8\",\"5\":\"135\",\"6\":\"U.S.\"},{\"1\":\"Toyota Corona\",\"2\":\"27.5\",\"3\":\"2.560\",\"4\":\"4\",\"5\":\"95\",\"6\":\"Japan\"},{\"1\":\"Chevette\",\"2\":\"30.0\",\"3\":\"2.155\",\"4\":\"4\",\"5\":\"68\",\"6\":\"U.S.\"},{\"1\":\"Ford Mustang Ghia\",\"2\":\"21.9\",\"3\":\"2.910\",\"4\":\"6\",\"5\":\"109\",\"6\":\"U.S.\"},{\"1\":\"AMC Spirit\",\"2\":\"27.4\",\"3\":\"2.670\",\"4\":\"4\",\"5\":\"80\",\"6\":\"U.S.\"},{\"1\":\"Ford Country Squire Wagon\",\"2\":\"15.5\",\"3\":\"4.054\",\"4\":\"8\",\"5\":\"142\",\"6\":\"U.S.\"},{\"1\":\"BMW 320i\",\"2\":\"21.5\",\"3\":\"2.600\",\"4\":\"4\",\"5\":\"110\",\"6\":\"Germany\"},{\"1\":\"Pontiac Phoenix\",\"2\":\"33.5\",\"3\":\"2.556\",\"4\":\"4\",\"5\":\"90\",\"6\":\"U.S.\"},{\"1\":\"Honda Accord LX\",\"2\":\"29.5\",\"3\":\"2.135\",\"4\":\"4\",\"5\":\"68\",\"6\":\"Japan\"},{\"1\":\"Mercury Grand Marquis\",\"2\":\"16.5\",\"3\":\"3.955\",\"4\":\"8\",\"5\":\"138\",\"6\":\"U.S.\"},{\"1\":\"Chevy Caprice Classic\",\"2\":\"17.0\",\"3\":\"3.840\",\"4\":\"8\",\"5\":\"130\",\"6\":\"U.S.\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n       \nSome information about different types of cars.\n\nYou are now done with this question.\n\n$\\blacksquare$\n\n(e)  <a name=\"part:own-start\">*</a> Start here if you downloaded R and R\nStudio and they are running on your own computer. \nOpen a web browser and point it at \n[link](http://ritsokiguess.site/datafiles/testing.txt). Click\nthe link to see it, and keep the tab open for the next part of this question.\nThis is a text file with three things on each\nline, each separated by exactly one space. Read the data file into a\ndata frame, and display your data frame.\n\nSolution\n\n\nData values separated by exactly one space is the kind of thing that `read_delim` reads, so make another code chunk and fill it with this:\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/testing.txt\"\ntesting <- read_delim(my_url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): g\ndbl (2): x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ntesting\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"g\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"a\"},{\"1\":\"2\",\"2\":\"11\",\"3\":\"b\"},{\"1\":\"3\",\"2\":\"14\",\"3\":\"a\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"b\"},{\"1\":\"5\",\"2\":\"18\",\"3\":\"a\"},{\"1\":\"6\",\"2\":\"21\",\"3\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n     \n\nWhen you run that, you'll see something like my output. The first part\nis `read_delim` telling you what it saw in the file: two\ncolumns of (whole) numbers and one column of text. The top line of the\nfile is assumed to contain names, which are used as the names of the\ncolumns of your data frame. The bottom part of the output, obtained by\nputting the name of the data frame on a line by itself in your code\nchunk, is what the data frame actually looks like. You ought to get\ninto the habit of eyeballing it and checking that it looks like the\nvalues in the data file.\n\nThe things on the left side of the `<-` symbol (that is meant to look like an arrow pointing left) are variables that you\nare creating in R. You get to choose the names for them. My habit is\nto use `my_url` for URLs of files that I am going to read in,\nand (usually) to give my data frames names that say something about\nwhat they contain, but this is your choice to make.\n\n(This part is exactly the same whether you are running R Studio on `r.datatools`\nor have R Studio running on your computer. A remote file is obtained\nin exactly the same way regardless.)\n\n$\\blacksquare$\n\n(f) You might have data in a file on your own computer. To read data\nfrom such a file, R has to know where to find it. Each R project lives\nin a folder, and one way of specifying where a data file is is to give\nits complete path relative to the folder that R Studio is running its\ncurrent project in. This is rather complicated, so we will try a\nsimpler way. To set this up, open a text editor (like Notepad or\nTextEdit). Go back to the web browser tab containing the data you used\nin the previous part. Copy the data from there and paste it into the\ntext editor. Save it somewhere on your computer (like the\nDesktop). Follow the steps in the solution below to read the data \ninto R.\n\nSolution\n\n\nI copied and pasted the data, and saved it in a file called\n`testing.txt` on my computer. I'm assuming that you've\ngiven it a similar name.\nGo back to R Studio. Create a new code chunk containing this:\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- file.choose()\n```\n:::\n\n     \n\nRun this code chunk. You'll see a file chooser. Find the file you\nsaved on your computer, and click Open (or OK or whatever you\nsee). This saves what R needs to access the file in the variable\n`f`. If you want to, you can look at it:\n\n::: {.cell}\n\n```{.r .cell-code}\nf\n```\n:::\n\n \n\nand you'll see what looks like a file path in the appropriate format\nfor your system (Windows, Mac, Linux).\nTo read the data in, you supply the file path to `read_delim` thus:\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2 <- read_delim(f, \" \")\n```\n:::\n\n     \n\nand then you look at it in the same way as before:\n\n::: {.cell}\n\n```{.r .cell-code}\ntesting2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"g\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"a\"},{\"1\":\"2\",\"2\":\"11\",\"3\":\"b\"},{\"1\":\"3\",\"2\":\"14\",\"3\":\"a\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"b\"},{\"1\":\"5\",\"2\":\"18\",\"3\":\"a\"},{\"1\":\"6\",\"2\":\"21\",\"3\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n \n\nCheck.\n\n$\\blacksquare$\n\n(g) You might have a spreadsheet on your computer. Create a\n`.csv` file from it, and use the ideas of the last part to\nread it into R Studio.\n\nSolution\n\n\nOpen the spreadsheet containing the data you want to read into\nR. If there are several sheets in the workbook, make sure you're\nlooking at the right one. Select File, Save As, select \"CSV\"\nor \"comma-separated values\" and give it a name. Save the\nresulting file somewhere.\n\nThen read it into an R data frame. This uses `read_csv`; \nthere are several `read_` functions that\nread in different types of file, and you need to use an appropriate\none. Before that, though, again run\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- file.choose()\n```\n:::\n\n     \n\nto find the `.csv` file on your computer, and then\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- read_csv(f)\n```\n:::\n\n       \n\nto read it in. My spreadsheet was\n\n::: {.cell}\n\n```{.r .cell-code}\ncars\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Car\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"MPG\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Cylinders\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horsepower\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Country\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Buick Skylark\",\"2\":\"28.4\",\"3\":\"2.670\",\"4\":\"4\",\"5\":\"90\",\"6\":\"U.S.\"},{\"1\":\"Dodge Omni\",\"2\":\"30.9\",\"3\":\"2.230\",\"4\":\"4\",\"5\":\"75\",\"6\":\"U.S.\"},{\"1\":\"Mercury Zephyr\",\"2\":\"20.8\",\"3\":\"3.070\",\"4\":\"6\",\"5\":\"85\",\"6\":\"U.S.\"},{\"1\":\"Fiat Strada\",\"2\":\"37.3\",\"3\":\"2.130\",\"4\":\"4\",\"5\":\"69\",\"6\":\"Italy\"},{\"1\":\"Peugeot 694 SL\",\"2\":\"16.2\",\"3\":\"3.410\",\"4\":\"6\",\"5\":\"133\",\"6\":\"France\"},{\"1\":\"VW Rabbit\",\"2\":\"31.9\",\"3\":\"1.925\",\"4\":\"4\",\"5\":\"71\",\"6\":\"Germany\"},{\"1\":\"Plymouth Horizon\",\"2\":\"34.2\",\"3\":\"2.200\",\"4\":\"4\",\"5\":\"70\",\"6\":\"U.S.\"},{\"1\":\"Mazda GLC\",\"2\":\"34.1\",\"3\":\"1.975\",\"4\":\"4\",\"5\":\"65\",\"6\":\"Japan\"},{\"1\":\"Buick Estate Wagon\",\"2\":\"16.9\",\"3\":\"4.360\",\"4\":\"8\",\"5\":\"155\",\"6\":\"U.S.\"},{\"1\":\"Audi 5000\",\"2\":\"20.3\",\"3\":\"2.830\",\"4\":\"5\",\"5\":\"103\",\"6\":\"Germany\"},{\"1\":\"Chevy Malibu Wagon\",\"2\":\"19.2\",\"3\":\"3.605\",\"4\":\"8\",\"5\":\"125\",\"6\":\"U.S.\"},{\"1\":\"Dodge Aspen\",\"2\":\"18.6\",\"3\":\"3.620\",\"4\":\"6\",\"5\":\"110\",\"6\":\"U.S.\"},{\"1\":\"VW Dasher\",\"2\":\"30.5\",\"3\":\"2.190\",\"4\":\"4\",\"5\":\"78\",\"6\":\"Germany\"},{\"1\":\"Ford Mustang 4\",\"2\":\"26.5\",\"3\":\"2.585\",\"4\":\"4\",\"5\":\"88\",\"6\":\"U.S.\"},{\"1\":\"Dodge Colt\",\"2\":\"35.1\",\"3\":\"1.915\",\"4\":\"4\",\"5\":\"80\",\"6\":\"Japan\"},{\"1\":\"Datsun 810\",\"2\":\"22.0\",\"3\":\"2.815\",\"4\":\"6\",\"5\":\"97\",\"6\":\"Japan\"},{\"1\":\"VW Scirocco\",\"2\":\"31.5\",\"3\":\"1.990\",\"4\":\"4\",\"5\":\"71\",\"6\":\"Germany\"},{\"1\":\"Chevy Citation\",\"2\":\"28.8\",\"3\":\"2.595\",\"4\":\"6\",\"5\":\"115\",\"6\":\"U.S.\"},{\"1\":\"Olds Omega\",\"2\":\"26.8\",\"3\":\"2.700\",\"4\":\"6\",\"5\":\"115\",\"6\":\"U.S.\"},{\"1\":\"Chrysler LeBaron Wagon\",\"2\":\"18.5\",\"3\":\"3.940\",\"4\":\"8\",\"5\":\"150\",\"6\":\"U.S.\"},{\"1\":\"Datsun 510\",\"2\":\"27.2\",\"3\":\"2.300\",\"4\":\"4\",\"5\":\"97\",\"6\":\"Japan\"},{\"1\":\"AMC Concord D/L\",\"2\":\"18.1\",\"3\":\"3.410\",\"4\":\"6\",\"5\":\"120\",\"6\":\"U.S.\"},{\"1\":\"Buick Century Special\",\"2\":\"20.6\",\"3\":\"3.380\",\"4\":\"6\",\"5\":\"105\",\"6\":\"U.S.\"},{\"1\":\"Saab 99 GLE\",\"2\":\"21.6\",\"3\":\"2.795\",\"4\":\"4\",\"5\":\"115\",\"6\":\"Sweden\"},{\"1\":\"Datsun 210\",\"2\":\"31.8\",\"3\":\"2.020\",\"4\":\"4\",\"5\":\"65\",\"6\":\"Japan\"},{\"1\":\"Ford LTD\",\"2\":\"17.6\",\"3\":\"3.725\",\"4\":\"8\",\"5\":\"129\",\"6\":\"U.S.\"},{\"1\":\"Volvo 240 GL\",\"2\":\"17.0\",\"3\":\"3.140\",\"4\":\"6\",\"5\":\"125\",\"6\":\"Sweden\"},{\"1\":\"Dodge St Regis\",\"2\":\"18.2\",\"3\":\"3.830\",\"4\":\"8\",\"5\":\"135\",\"6\":\"U.S.\"},{\"1\":\"Toyota Corona\",\"2\":\"27.5\",\"3\":\"2.560\",\"4\":\"4\",\"5\":\"95\",\"6\":\"Japan\"},{\"1\":\"Chevette\",\"2\":\"30.0\",\"3\":\"2.155\",\"4\":\"4\",\"5\":\"68\",\"6\":\"U.S.\"},{\"1\":\"Ford Mustang Ghia\",\"2\":\"21.9\",\"3\":\"2.910\",\"4\":\"6\",\"5\":\"109\",\"6\":\"U.S.\"},{\"1\":\"AMC Spirit\",\"2\":\"27.4\",\"3\":\"2.670\",\"4\":\"4\",\"5\":\"80\",\"6\":\"U.S.\"},{\"1\":\"Ford Country Squire Wagon\",\"2\":\"15.5\",\"3\":\"4.054\",\"4\":\"8\",\"5\":\"142\",\"6\":\"U.S.\"},{\"1\":\"BMW 320i\",\"2\":\"21.5\",\"3\":\"2.600\",\"4\":\"4\",\"5\":\"110\",\"6\":\"Germany\"},{\"1\":\"Pontiac Phoenix\",\"2\":\"33.5\",\"3\":\"2.556\",\"4\":\"4\",\"5\":\"90\",\"6\":\"U.S.\"},{\"1\":\"Honda Accord LX\",\"2\":\"29.5\",\"3\":\"2.135\",\"4\":\"4\",\"5\":\"68\",\"6\":\"Japan\"},{\"1\":\"Mercury Grand Marquis\",\"2\":\"16.5\",\"3\":\"3.955\",\"4\":\"8\",\"5\":\"138\",\"6\":\"U.S.\"},{\"1\":\"Chevy Caprice Classic\",\"2\":\"17.0\",\"3\":\"3.840\",\"4\":\"8\",\"5\":\"130\",\"6\":\"U.S.\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n \nSome information about different types of cars.\n\n$\\blacksquare$\n\n\n\n\n",
    "supporting": [
      "getting_used_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}