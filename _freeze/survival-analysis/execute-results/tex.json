{
  "hash": "e8e7482b871b914f26428e248a98899e",
  "result": {
    "engine": "knitr",
    "markdown": "# Survival analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survival)\nlibrary(tidyverse)\nlibrary(survminer)\n```\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n##  The Worcester survey\n\n\n The Worcester survey was a long-term study of\nall myocardial-infarction^[Heart attack.] victims admitted to hospitals in the\nWorcester, Massachusetts area.^[Worcester is pronounced, by locals, *Woo-stuh*.] \nThe data have been well studied, and can be found in\nthe file [link](http://ritsokiguess.site/datafiles/whas100.csv).\n\n\n\n(a) Read the data and\n display the first few rows of the data frame. You might get an extra\n column, which you can ignore.\nFor your information, the variables are:\n\n\n* patient ID code\n\n* admission date\n\n* date of last followup (this is the date of death if the\npatient died)\n\n* length of hospital stay (days)\n\n* followup time (days) (time between admission and last followup)\n\n* followup status: 1=dead, 0=alive\n\n* Age in years (at admission)\n\n* gender (0=male, 1=female)\n\n* body mass index (kg/m$^2$)\n\n \n\n(b) Create a suitable response variable for a Cox proportional\nhazards model for time of survival, using the followup time and\nfollowup status.\n \n\n(c) Fit a Cox proportional hazards model predicting survival time\nfrom age, gender and BMI. Obtain the `summary` (but you don't\nneed to comment on it yet).\n\n \n\n(d) Test the overall fit of the model. What does the result mean?\n \n\n(e) Can any of your explanatory variables be removed from the\nmodel? Explain briefly.\n \n\n(f) Remove your most non-significant explanatory variable from\nthe model and fit again. Take a look at the results. Are all your\nremaining explanatory variables significant? (If all your\nexplanatory variables were previously significant, you can skip this part.)\n \n\n(g) Calculate the 1st quartile, median, and 3rd quartiles of\nage and BMI. (`quantile`.) Round these off to the\nnearest whole number. (Do the rounding off yourself, though R has a\nfunction `round` that does this, which you can investigate if\nyou want.) As an alternative, you can get these by passing the whole\ndata frame, or the columns of it you want, into `summary`.\n \n\n(h) Make a data frame out of all the combinations of\nage and BMI values (that you obtained in the previous part) suitable for predicting\nwith. \n \n\n(i) Obtain predicted survival probabilities for each of the values\nin your new data frame. Use your best model. (You don't need to look\nat the results, though you can if you want to.)\n \n\n(j) Make a graph depicting the survival curves from\n`survfit` with different colours distinguishing the different\nsurvival curves.\n \n\n(k) What is the effect of age on survival? What is the effect\nof BMI on survival? Explain briefly. (You will have to disentangle\nthe meaning of the different coloured lines on the plot to do this.)\n \n\n\n\n\n\n##  Drug treatment programs\n\n\n One of the goals of drug treatment programs is to lengthen\nthe time until the patient returns to using drugs. (It is not\ngenerally possible to prevent patients from *ever* using drugs\nagain.) In one study, over 600 former drug users took part. Two\ndifferent programs, a short program and a long program, were offered\nat two different sites, labelled A and B. The data can be found in\n[link](http://ritsokiguess.site/datafiles/drugusers.txt). The\nvariables are these:\n\n\n\n* `ID`: patient ID number\n\n* `age`: patient age at enrollment into the study\n\n* `ndrugtx`: number of previous drug treatments\n\n* `treat`: 0 for short treatment program, 1 for long program\n\n* `site`: 0 for site A, 1 for site B\n\n* `time`: time until return to drug use\n\n* `censor`: whether the subject returned to drug use (1) or\nnot (0) during the follow-up period\n\n* `herco`: whether subject used heroine or cocaine in the\nlast 3 months: 1 is both, 2 is one (either heroine or cocaine), 3 is neither.\n\n\n\n(a) Read in the data and check in one way or another that you\nhave what was promised above.\n\n\n\n(b) There are some missing values in the dataframe. Demonstrate\nthis using `summary`. Pipe the dataframe into\n`drop_na` and show that they have gone. (`drop_na`\nremoves all rows that have missing values in them.)\n\n\n\n(c) Some of these variables are recorded as numbers but are\nactually categorical. Which ones? Re-define these variables in your\ndata frame so that they have sensible (text) values.\n\n\n\n(d) Create a suitable reponse variable for a Cox proportional\nhazards regression that predicts time until return to drug use from\nthe other variables.\nThis requires some care, because you need to be sure about what the\ncensoring variable actually represents and what you need it to represent.\n\n\n\n(e) Look at the first few values of your response variable. Why\nis the fifth one marked with a `+`? Explain briefly.\n\n\n\n(f) Fit a Cox proportional hazards model, predicting from all\nthe other variables (except for `row` and `ID`) that you haven't used\nyet. Display the results.\n\n\n\n(g) Find which explanatory variables can be removed at $\\alpha=0.05$\n(there should be two of them). Bear in mind that we have categorical variables, so that looking at the output from `summary` is not enough.\n\n\n\n(h) Remove *all* the non-significant explanatory variables\nand re-fit your model. By carrying out a suitable test demonstrate\nthat your smaller model is the better one.\n\n\n\n(i) <a name=\"part:posneg\">*</a> Display your better model. Are all of the\nexplanatory variables significant? Do their slope coefficients have\nsensible signs (plus or minus), based on what you know or can guess\nabout drug treatments? Explain briefly.\n\n\n\n(j) We have three variables left in our model, `age`,\n`ndrugtx` and `treat`. The quartiles of age are 27 and\n37, the quartiles of `ndrugtx` are 1 and 6, and the two\npossible values of `treat` are `short` and `long`. Create a data frame\nwith variables of these names and all possible combinations of their\nvalues (so there should be 8 rows in the resulting data\nframe). Display the resulting data frame.\n\n\n\n(k) Obtain predicted survival probabilities for each of the\nvalues of `age`, `ndrugtx` and `treat` used in\nthe previous part. You don't need to display it (we are going to\nplot it shortly). \n\n\n(l) Plot your predicted survival curves. \n\n\n\n(m) Which of your combinations of values is predicted to take\nthe longest to return to drug use? Which is predicted to take the\nshortest time? Explain briefly.\n\n\n\n(n) Are your survival curve plot and your conclusions from part\n(<a href=\"#part:posneg\">here</a>) consistent, or not? Explain briefly.\n\n\n\n\n\n\n\n\n\n##  Multiple myeloma\n\n\n Multiple myeloma is a kind of cancer. It\nforms in a plasma cell (which is a type of white blood cell). It\ncauses cancer cells to accumulate in the bone marrow, where they crowd\nout healthy blood cells. Plasma cells make antibodies (to help fight\ninfections), while the cancer cells don't: they produce abnormal\nproteins that can cause kidney problems. (This adapted from\n[link](http://www.mayoclinic.org/diseases-conditions/multiple-myeloma/basics/definition/con-20026607).)\nThe variables are:\n\n\n\n* `time`: survival time from diagnosis (months)\n\n* `vstatus`: 0=alive, 1=dead at end of study\n\n* `logbun`: log of BUN test score (BUN test is a test of\nkidney function, not to be confused with cha siu\nbao^[Barbecued pork in a bun. A staple of Chinese dim sum and  Chinese bakeries, such as Ding Dong bakery on Spadina.]).\n\n* `hgb`: hemoglobin (at diagnosis).\n\n* `platelet`: platelets: 1=normal, 0=abnormal (at\ndiagnosis).\n\n* `age` at diagnosis, in years\n\n* `logwbc`: log of WBC (white blood cell count, at\ndiagnosis)\n\n* `frac`: fractures at diagnosis (0=absent, 1=present)\n\n* `logpbm`: log of percent of plasma cells in bone marrow\n\n* `protein`: proteinuria (protein in urine) at\ndiagnosis. Most people have very little, so a larger than normal\namount indicates illness of some kind.\n\n* `scalc`: serum calcium at diagnosis.\n\n\nThe data, on 65 patients with multiple myeloma, are in\n[link](http://ritsokiguess.site/datafiles/myeloma.csv). Some of the\nvariables are logs because they could take very large values.\n\nThere are a lot of parts here, but each part is supposed to be short.\n\n\n\n(a) Read in the data and display (some of) the values. Confirm that\nyou have the right number of observations and the right variables.\n\n\n\n(b) Create a suitable response variable for a Cox\nproportional-hazards survival model, bearing in mind that the\n\"event\" here is death. Display your response variable, and explain\nbriefly what the `+` signs attached to some of the values\nmean, without using a technical term.\n\n\n\n(c) What is the technical term for those patients that have a\n`+` by their values for the response variable?\n\n\n\n(d) Fit a Cox proportional-hazards survival model predicting\nyour response variable from all the other variables (except for the\nones that you used to make the response variable). Display the\n`summary` of your model.\n\n\n\n(e) In your model, which explanatory variables have a P-value less than\n0.10? Fit a model containing only those and display the results.\n\n\n\n(f) Do a test to compare the two models that you fit. Why do \nyou prefer the second model? Explain briefly.\n\n\n\n(g) There should be two explanatory variables left in your\nmodel. These are both numerical variables. Find their first and\nthird quartiles, any way you like.\n\n\n\n(h) Create a data frame containing all possible combinations\nof the two quartiles for each of the two variables, and display the result.\n\n\n\n(i) Obtain predicted survival probabilities for each of the\ncombinations of variables you created above. You don't need to look\nat the results (they are rather long).\n\n\n\n(j) Obtain a graph of the predicted survival curves for each\ncombination of your variables.\n\n\n\n(k) Is it better to have high or low values for each of the\nvariables in your prediction? Explain briefly.\n\n\n\n\n\n\n\n\n##  Ovarian cancer\n\n\n R's `survival` package contains several data\nsets. One of these is called `ovarian`; it comes from a study\nof 26 ovarian cancer patients. The major purpose of this study was to\ncompare the effects of two treatments on survival time.\n\n\n\n(a) Obtain and display (all of) the data set. This is as simple as\nloading the package and typing the data set's name.\n\n\n(b) The columns of interest to us are:\n\n\n* `futime`: the time for which a patient was followed-up:\nthe number of days until either they died or the study ended (or\nthey withdrew from the study for some other reason).\n\n* `fustat`: follow-up status: 1 if the patient died of\novarian cancer, 0 if they were still alive when the study ended.\n\n* `age`: of patient, at diagnosis, in years\n\n* `rx`: treatment, numbered 1 or 2, but really labels for\nthe two treatments.\n\nCreate and display a suitable response variable `y` for a Cox\nproportional-hazards model.\n\n\n(c) In the display of your response variable, some values are\nmarked with a `+`. Why is that? Explain briefly. (If you use\na technical term, you should explain what it means.)\n\n\n(d) Fit a Cox proportional-hazards model for predicting\nsurvival time from age and treatment. Note that the numeric values\nfor treatment make sense only as labels for the two treatments, so\nin your model formula make treatment into a factor. Display the\nresults. \n\n\n(e) Is there a significant difference between the treatments in\nterms of their effects on survival (from ovarian cancer)?\n\n\n(f) Is there a significant effect of age? If there is, describe\nthe effect that age has on survival.\n\n\n(g) Make a martingale residual plot for this model. Do you see\nany problems? Explain briefly.\n\n\n(h) Find the quartiles of `age`, and make a data frame\ncontaining all combinations of those two ages and the two\ntreatments. Display what you have. (Feel free to copy the values by\nhand, rather than trying to save them and use them.)\n\n\n\n(i) Obtain predicted survival probabilities for each of your\nage-treatment combinations, for each of a variety of survival\ntimes. (This is only one thing, despite it sounding like a lot.)\n\n\n\n(j) Draw a plot that compares the survival probabilities at the\ndifferent times.\n\n\n\n(k) According to your plot, how would you describe the effects of\ntreatment and of age?\n\n\n\n\n\n\nMy solutions follow:\n\n\n\n\n##  The Worcester survey\n\n\n The Worcester survey was a long-term study of\nall myocardial-infarction^[Heart attack.] victims admitted to hospitals in the\nWorcester, Massachusetts area.^[Worcester is pronounced, by locals, *Woo-stuh*.] \nThe data have been well studied, and can be found in\nthe file [link](http://ritsokiguess.site/datafiles/whas100.csv).\n\n\n\n(a) Read the data and\n display the first few rows of the data frame. You might get an extra\n column, which you can ignore.\nFor your information, the variables are:\n\n\n* patient ID code\n\n* admission date\n\n* date of last followup (this is the date of death if the\npatient died)\n\n* length of hospital stay (days)\n\n* followup time (days) (time between admission and last followup)\n\n* followup status: 1=dead, 0=alive\n\n* Age in years (at admission)\n\n* gender (0=male, 1=female)\n\n* body mass index (kg/m$^2$)\n\n \nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/whas100.csv\"\nwhas100 <- read_csv(my_url)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nRows: 100 Columns: 10\n-- Column specification\n-------------------------------------------------------- Delimiter: \",\" chr\n(2): admitdate, foldate dbl (8): ...1, id, los, lenfol, fstat, age, gender, bmi\ni Use `spec()` to retrieve the full column specification for this data. i\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n* `` -> `...1`\n```\n\n\n:::\n\n```{.r .cell-code}\nwhas100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 x 10\n    ...1    id admitdate  foldate      los lenfol fstat   age gender   bmi\n   <dbl> <dbl> <chr>      <chr>      <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl>\n 1     1     1 3/13/1995  3/19/1995      4      6     1    65      0  31.4\n 2     2     2 1/14/1995  1/23/1996      5    374     1    88      1  22.7\n 3     3     3 2/17/1995  10/4/2001      5   2421     1    77      0  27.9\n 4     4     4 4/7/1995   7/14/1995      9     98     1    81      1  21.5\n 5     5     5 2/9/1995   5/29/1998      4   1205     1    78      0  30.7\n 6     6     6 1/16/1995  9/11/2000      7   2065     1    82      1  26.5\n 7     7     7 1/17/1995  10/15/1997     3   1002     1    66      1  35.7\n 8     8     8 11/15/1994 11/24/2000    56   2201     1    81      1  28.3\n 9     9     9 8/18/1995  2/23/1996      5    189     1    76      0  27.1\n10    10    10 7/22/1995  12/31/2002     9   2719     0    40      0  21.8\n# i 90 more rows\n```\n\n\n:::\n:::\n\n     \n\nI seem to have an extra column called `X1`. This is because I\nsaved my version of the data using the old `write.csv`, which\ncomes with row names, and I forgot to\nget rid of them. These came back as an extra unnamed variable to which\n`read_delim` gave the name `X1`.\n \n$\\blacksquare$\n\n(b) Create a suitable response variable for a Cox proportional\nhazards model for time of survival, using the followup time and\nfollowup status.\n \nSolution\n\n\n`Surv`. The event here is death, so the two parts of the\nresponse variable are followup time `lenfol` and followup\nstatus, 1 being \"dead\", `fstat`:\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- with(whas100, Surv(lenfol, fstat == 1))\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]    6   374  2421    98  1205  2065  1002  2201   189  2719+ 2638+  492 \n [13]  302  2574+ 2610+ 2641+ 1669  2624  2578+ 2595+  123  2613+  774  2012 \n [25] 2573+ 1874  2631+ 1907   538   104     6  1401  2710   841   148  2137+\n [37] 2190+ 2173+  461  2114+ 2157+ 2054+ 2124+ 2137+ 2031  2003+ 2074+  274 \n [49] 1984+ 1993+ 1939+ 1172    89   128  1939+   14  1011  1497  1929+ 2084+\n [61]  107   451  2183+ 1876+  936   363  1048  1889+ 2072+ 1879+ 1870+ 1859+\n [73] 2052+ 1846+ 2061+ 1912+ 1836+  114  1557  1278  1836+ 1916+ 1934+ 1923+\n [85]   44  1922+  274  1860+ 1806  2145+  182  2013+ 2174+ 1624   187  1883+\n [97] 1577    62  1969+ 1054 \n```\n\n\n:::\n:::\n\n     \n\nJust using `fstat` alone as the second thing in `Surv`\nalso works, because anything that gives `TRUE` or 1 when the\nevent (death) occurs is equally good. (In R, `TRUE` as a number\nis 1 and `FALSE` as a number is 0.) \n\nI listed the values by way of checking. The ones with a `+` are\ncensored: that is, the patient was still alive the last time the\ndoctor saw them. Most of the censored values are longer times. Usually\nthis happens because the patient was still alive at the end of the study.\n \nThis is perhaps now the old way of doing it, because you can now create `y` as a new column in your dataframe:\n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100 %>% mutate(y = Surv(lenfol, fstat == 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 x 11\n    ...1    id admitdate  foldate      los lenfol fstat   age gender   bmi     y\n   <dbl> <dbl> <chr>      <chr>      <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <Sur>\n 1     1     1 3/13/1995  3/19/1995      4      6     1    65      0  31.4    6 \n 2     2     2 1/14/1995  1/23/1996      5    374     1    88      1  22.7  374 \n 3     3     3 2/17/1995  10/4/2001      5   2421     1    77      0  27.9 2421 \n 4     4     4 4/7/1995   7/14/1995      9     98     1    81      1  21.5   98 \n 5     5     5 2/9/1995   5/29/1998      4   1205     1    78      0  30.7 1205 \n 6     6     6 1/16/1995  9/11/2000      7   2065     1    82      1  26.5 2065 \n 7     7     7 1/17/1995  10/15/1997     3   1002     1    66      1  35.7 1002 \n 8     8     8 11/15/1994 11/24/2000    56   2201     1    81      1  28.3 2201 \n 9     9     9 8/18/1995  2/23/1996      5    189     1    76      0  27.1  189 \n10    10    10 7/22/1995  12/31/2002     9   2719     0    40      0  21.8 2719+\n# i 90 more rows\n```\n\n\n:::\n:::\n\n\nIf you scroll across, this has a column `y` that contains the same values as the stand-alone `y` we defined earlier, including plus signs for censored ones. At the top of the column is an indication that this is a `Surv` object: that is, not just a column of numbers, but something that also contains censorship information.\n\n$\\blacksquare$\n\n(c) Fit a Cox proportional hazards model predicting survival time\nfrom age, gender and BMI. Obtain the `summary` (but you don't\nneed to comment on it yet).\n\n \nSolution\n\n\nThis, using the response variable that we just created:\n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100.1 <- coxph(y ~ age + gender + bmi, data = whas100)\nsummary(whas100.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + gender + bmi, data = whas100)\n\n  n= 100, number of events= 51 \n\n           coef exp(coef) se(coef)      z Pr(>|z|)   \nage     0.03713   1.03783  0.01272  2.918  0.00352 **\ngender  0.14325   1.15402  0.30604  0.468  0.63973   \nbmi    -0.07083   0.93162  0.03607 -1.964  0.04956 * \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n       exp(coef) exp(-coef) lower .95 upper .95\nage       1.0378     0.9636    1.0123    1.0640\ngender    1.1540     0.8665    0.6334    2.1024\nbmi       0.9316     1.0734    0.8680    0.9999\n\nConcordance= 0.683  (se = 0.037 )\nLikelihood ratio test= 21.54  on 3 df,   p=8e-05\nWald test            = 19.46  on 3 df,   p=2e-04\nScore (logrank) test = 20.82  on 3 df,   p=1e-04\n```\n\n\n:::\n:::\n\n   \n \n$\\blacksquare$\n\n(d) Test the overall fit of the model. What does the result mean?\n \nSolution\n\n\nLook at those three P-values at the bottom.  They are all small,\nso something in the model is helping to predict survival. As to\nwhat? Well, that's the next part.\n \n$\\blacksquare$\n\n(e) Can any of your explanatory variables be removed from the\nmodel? Explain briefly.\n \nSolution\n\n\n`gender` has a (very) large P-value, so that can be taken\nout of the model. The other two variables have small P-values\n(`bmi` only just under 0.05), so they need to stay.\nThe other way to think about this is `step`, or `drop1`:\n\n::: {.cell}\n\n```{.r .cell-code}\ndrop1(whas100.1, test = \"Chisq\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSingle term deletions\n\nModel:\ny ~ age + gender + bmi\n       Df    AIC    LRT Pr(>Chi)   \n<none>    402.66                   \nage     1 410.25 9.5972 0.001949 **\ngender  1 400.87 0.2185 0.640218   \nbmi     1 404.60 3.9389 0.047182 * \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n     \n\nThis is here equivalent to^[Not exactly the same as that output, because it  is doing a test that would be the same if you had an infinitely  large sample, but is slightly different with an ordinary finite number of observations.] the output \nfrom `summary`, but where it\nscores is if you have a categorical explanatory variable like\n\"treatment\" with more than two levels: `drop1` will tell you\nabout keeping or dropping it as a whole.^[Our categorical  variable *gender* has only two levels.]\n\nIf you prefer: \n\n::: {.cell}\n\n```{.r .cell-code}\nstep(whas100.1, trace = 0, test = \"Chisq\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + bmi, data = whas100)\n\n        coef exp(coef) se(coef)      z        p\nage  0.03927   1.04005  0.01187  3.309 0.000938\nbmi -0.07116   0.93131  0.03614 -1.969 0.048952\n\nLikelihood ratio test=21.32  on 2 df, p=2.346e-05\nn= 100, number of events= 51 \n```\n\n\n:::\n:::\n\n     \n`gender` comes out, but the others stay. As usual, put\n`trace=1` or `trace=2` to get more output, which will\nlook like a sequence of `drop1`'s one after the other.\n \n$\\blacksquare$\n\n(f) Remove your most non-significant explanatory variable from\nthe model and fit again. Take a look at the results. Are all your\nremaining explanatory variables significant? (If all your\nexplanatory variables were previously significant, you can skip this part.)\n \nSolution\n\n\nSo, take out `gender`:\n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100.2 <- update(whas100.1, . ~ . - gender)\nsummary(whas100.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + bmi, data = whas100)\n\n  n= 100, number of events= 51 \n\n        coef exp(coef) se(coef)      z Pr(>|z|)    \nage  0.03927   1.04005  0.01187  3.309 0.000938 ***\nbmi -0.07116   0.93131  0.03614 -1.969 0.048952 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n    exp(coef) exp(-coef) lower .95 upper .95\nage    1.0401     0.9615    1.0161    1.0645\nbmi    0.9313     1.0738    0.8676    0.9997\n\nConcordance= 0.681  (se = 0.037 )\nLikelihood ratio test= 21.32  on 2 df,   p=2e-05\nWald test            = 19  on 2 df,   p=7e-05\nScore (logrank) test = 19.99  on 2 df,   p=5e-05\n```\n\n\n:::\n:::\n\n     \n\nBoth explanatory variables are significant: `age` definitely,\n`bmi` only just. This is the same model as `step` gave me.\n \n$\\blacksquare$\n\n(g) Calculate the 1st quartile, median, and 3rd quartiles of\nage and BMI. (`quantile`.) Round these off to the\nnearest whole number. (Do the rounding off yourself, though R has a\nfunction `round` that does this, which you can investigate if\nyou want.) As an alternative, you can get these by passing the whole\ndata frame, or the columns of it you want, into `summary`.\n \nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(whas100$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   0%   25%   50%   75%  100% \n32.00 59.75 71.00 80.25 92.00 \n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(whas100$bmi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      0%      25%      50%      75%     100% \n14.91878 23.53717 27.19158 30.34770 39.93835 \n```\n\n\n:::\n:::\n\n \n\nor\n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100 %>%\n  select(age, bmi) %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      age             bmi       \n Min.   :32.00   Min.   :14.92  \n 1st Qu.:59.75   1st Qu.:23.54  \n Median :71.00   Median :27.19  \n Mean   :68.25   Mean   :27.04  \n 3rd Qu.:80.25   3rd Qu.:30.35  \n Max.   :92.00   Max.   :39.94  \n```\n\n\n:::\n:::\n\n \nOr, pure tidyverse: summarize all the columns (after you've done the `select`). \n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100 %>%\n  select(age, bmi) %>%\n  reframe(across(everything(), \\(x) quantile(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 2\n    age   bmi\n  <dbl> <dbl>\n1  32    14.9\n2  59.8  23.5\n3  71    27.2\n4  80.2  30.3\n5  92    39.9\n```\n\n\n:::\n:::\n\nThis one is `reframe` rather than `summarize` because the \"summaries\" are five numbers rather than one.\n\n\nUsing whichever of this multitude of ways appeals to you:\n\n60, 71 and 80 for age, 24, 27 and 30 for BMI. \n \n$\\blacksquare$\n\n(h) Make a data frame out of all the combinations of\nage and BMI values (that you obtained in the previous part) suitable for predicting\nwith. \n \nSolution\n\n\nThe inevitable `datagrid`. This is probably quickest, with the best model being the second one:\n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100.new <- datagrid(model = whas100.2, age = c(60, 71, 80), bmi = c(24, 27, 30))\nwhas100.new\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age bmi rowid\n1  60  24     1\n2  60  27     2\n3  60  30     3\n4  71  24     4\n5  71  27     5\n6  71  30     6\n7  80  24     7\n8  80  27     8\n9  80  30     9\n```\n\n\n:::\n:::\n\nExtra: I set it up this way so that you would find the median and quartiles and then type the values into the `datagrid` (easier conceptually), but there is nothing stopping us doing it all in one step:\n\n::: {.cell}\n\n```{.r .cell-code}\ndatagrid(model = whas100.2, \n         age = quantile(whas100$age, c(0.25, 0.5, 0.75)),\n         bmi = quantile(whas100$bmi, c(0.25, 0.5, 0.75))) %>% \n  mutate(across(everything(), \\(x) round(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age bmi rowid\n1  60  24     1\n2  60  27     2\n3  60  30     3\n4  71  24     4\n5  71  27     5\n6  71  30     6\n7  80  24     7\n8  80  27     8\n9  80  30     9\n```\n\n\n:::\n:::\n\nThe last line rounds everything off to the (default) 0 decimal places. The repetitiousness of the preceding two lines makes me wonder whether I should have written a function. \n \n \n$\\blacksquare$\n\n(i) Obtain predicted survival probabilities for each of the values\nin your new data frame. Use your best model. (You don't need to look\nat the results, though you can if you want to.)\n \nSolution\n\n\nThe magic word is `survfit` (which plays the role of\n`predictions` here). The best model is `whas100.2`,\nwith the non-significant `gender` removed:\n\n::: {.cell}\n\n```{.r .cell-code}\npp2 <- survfit(whas100.2, whas100.new, data = whas100)\n```\n:::\n\n      \n\nThis doesn't need the `data=` at the end (it works perfectly\nwell without), but the plot (later) seems to need it to be there. I\nthink the plot needs the information from the original data to be in\nthe predictions somewhere.\n\nThis is kind of long to look at (`summary(pp2)` would be the\nthing), so we will need to make a graph of it. I gave it a name, since\nI want to use it again later.\n \n$\\blacksquare$\n\n(j) Make a graph depicting the survival curves from\n`survfit` with different colours distinguishing the different\nsurvival curves.\n \nSolution\n\n\nThis is actually easy once you work out what to do:\n\n::: {.cell}\n\n```{.r .cell-code}\nggsurvplot(pp2, conf.int = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `gather_()` was deprecated in tidyr 1.2.0.\ni Please use `gather()` instead.\ni The deprecated feature was likely used in the survminer package.\n  Please report the issue at <https://github.com/kassambara/survminer/issues>.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/worcester-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n \n\nWithout the `conf.int` thing, you get confidence intervals for\neach survival curve, which overlap each other and generally make the\nplot look messy.\n\nThe \"strata\" are the different age-BMI combinations that you\npredicted for, so it's usually a good idea to list the \"new\"\nprediction data frame, either here or when you assess the effects of\nthe variables (next part) so that you can see which is which:\n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100.new\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age bmi rowid\n1  60  24     1\n2  60  27     2\n3  60  30     3\n4  71  24     4\n5  71  27     5\n6  71  30     6\n7  80  24     7\n8  80  27     8\n9  80  30     9\n```\n\n\n:::\n:::\n\n \n \n$\\blacksquare$\n\n(k) What is the effect of age on survival? What is the effect\nof BMI on survival? Explain briefly. (You will have to disentangle\nthe meaning of the different coloured lines on the plot to do this.)\n \nSolution\n\n\nBear in mind that up-and-to-the-right is best for a survival\ncurve, since that means that people in the upper-right group have\na higher chance of surviving for longer.   \n\nThe best survival curve is therefore the olive-green one. According\nto the legend, this goes with stratum 3, which is (according to\nthe listing of `whas100.new`) age 60 (the youngest) and BMI\n30 (the highest). So it looks as if the best survival goes with a\nlower age (not surprising) and a higher BMI (surprising; see\ndiscussion about BMI below).  \n\nYou can also leave one variable constant and see the effects of\nchanging the other one. Let's pick the oldest age 80: the BMI\nvalues are 24 (stratum 7, blue), 27 (stratum 8, purple), 30\n(stratum 9, pink). These survival curves are the bottom one, the\nsecond bottom one, and the fourth bottom one. At this age,\nsurvival chances are not great, but having a higher BMI goes with\na greater chance of surviving longer.  \n\nOr pick a BMI, say 30. These are strata 3 (olive green), 6 (light blue)\nand 9 (pink) respectively for ages 60, 71 and 80. These are the\nbest, 3rd best and 5th best survival curves; that is, as age\nincreases, the chance of surviving a long time decreases.  \n\nThe effect of BMI, though, seems backwards: a higher BMI is\nassociated with a *higher* chance of survival.   \n\nThat's the end of what I wanted you to do, but:\n\nA higher BMI is usually associated with being obese (and therefore\nunhealthy), so you'd expect the effect of BMI to be the other way\naround. According to Wikipedia\n([link](http://en.wikipedia.org/wiki/Body_mass_index)), the BMI values\nhere are \"overweight\" or close to it. Maybe being heavier helps\nthe body recover from a heart attack. \n\nLet's start with the martingale residual plot:\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoxdiagnostics(whas100.2) + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/worcester-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n     \n\nThere is a suspicion of bendiness here, though the left side of the\ncurve is entirely because of that one positive residual on the\nleft. In any case, this suggests that nonlinearity (evidently in terms\nof BMI, since that's the relationship that currently makes no sense)\nwould be worth exploring. \n\nThus:\n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100.3 <- update(whas100.2, . ~ . + I(bmi^2))\nsummary(whas100.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + bmi + I(bmi^2), data = whas100)\n\n  n= 100, number of events= 51 \n\n              coef exp(coef)  se(coef)      z Pr(>|z|)    \nage       0.040542  1.041375  0.012035  3.369 0.000755 ***\nbmi      -0.848949  0.427864  0.231562 -3.666 0.000246 ***\nI(bmi^2)  0.014500  1.014606  0.004227  3.430 0.000603 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n         exp(coef) exp(-coef) lower .95 upper .95\nage         1.0414     0.9603    1.0171    1.0662\nbmi         0.4279     2.3372    0.2718    0.6736\nI(bmi^2)    1.0146     0.9856    1.0062    1.0230\n\nConcordance= 0.693  (se = 0.04 )\nLikelihood ratio test= 30.71  on 3 df,   p=1e-06\nWald test            = 32.56  on 3 df,   p=4e-07\nScore (logrank) test = 36.57  on 3 df,   p=6e-08\n```\n\n\n:::\n:::\n\n     \n\nAh, that seems to be it. The significant positive coefficient on\n`bmi`-squared \nmeans that the \"hazard of dying\" increases faster with increasing\n`bmi`, so there ought to be an optimal BMI beyond which\nsurvival chances decrease again. \nHave we improved the residuals by adding the squared term?\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoxdiagnostics(whas100.3) + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/worcester-17-1.pdf){fig-pos='H'}\n:::\n:::\n\n \n\nI call those \"inconsequential wiggles\" now, so I think we are good.\nLet's explore the quadratic relationship on a graph.\n\nI'm going to focus on a close-to-median age of 70, since, in this\nmodel, the effect of BMI is the same for all ages (to make it\ndifferent, we would need an interaction term, ANOVA-style). \n\nFirst we create a data frame with a bunch of different BMIs in, and\none age 70:\n\n::: {.cell}\n\n```{.r .cell-code}\nbmis <- seq(20, 36, 4)\nages <- 70\nwhas100.new.2 <- datagrid(model = whas100.3, bmi = bmis, age = ages)\nwhas100.new.2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  bmi age rowid\n1  20  70     1\n2  24  70     2\n3  28  70     3\n4  32  70     4\n5  36  70     5\n```\n\n\n:::\n:::\n\n \n\nIt is rather absurd to have a plural `ages` with only one age\nin it, but that's the way it goes, if you're me and trying to avoid thinking.\n\nPredictions, using the model with the squared term in it:\n\n::: {.cell}\n\n```{.r .cell-code}\npp3 <- survfit(whas100.3, whas100.new.2, data = whas100)\n```\n:::\n\n \n\nAnd then the plot:\n\n::: {.cell}\n\n```{.r .cell-code}\nggsurvplot(pp3, conf.int = F)\n```\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/worcester-20-1.pdf){fig-pos='H'}\n:::\n:::\n\n \n\nand the customary reminder of which stratum is which, with its rather\nungainly name:\n\n::: {.cell}\n\n```{.r .cell-code}\nwhas100.new.2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  bmi age rowid\n1  20  70     1\n2  24  70     2\n3  28  70     3\n4  32  70     4\n5  36  70     5\n```\n\n\n:::\n:::\n\n \n\nThis time, the green survival curve is best, stratum 3, which means that\nsurvival is best at BMI 28, and worse for both higher BMIs and lower\nBMIs. You can follow the sequence of colours: red, olive-green, green,\nblue, pink, that goes up and then down again. But it's still true\nthat having a very *low* BMI is worst, which is why our (linear)\nmodel said that having a higher BMI was better.\n\nIt would have been better to have you put a squared term in the model,\nbut the question was already long and complicated enough, and I\ndidn't want to make your lives more of a nightmare than they are\nalready becoming!\n \n$\\blacksquare$\n\n\n\n\n\n##  Drug treatment programs\n\n\n One of the goals of drug treatment programs is to lengthen\nthe time until the patient returns to using drugs. (It is not\ngenerally possible to prevent patients from *ever* using drugs\nagain.) In one study, over 600 former drug users took part. Two\ndifferent programs, a short program and a long program, were offered\nat two different sites, labelled A and B. The data can be found in\n[link](http://ritsokiguess.site/datafiles/drugusers.txt). The\nvariables are these:\n\n\n\n* `ID`: patient ID number\n\n* `age`: patient age at enrollment into the study\n\n* `ndrugtx`: number of previous drug treatments\n\n* `treat`: 0 for short treatment program, 1 for long program\n\n* `site`: 0 for site A, 1 for site B\n\n* `time`: time until return to drug use\n\n* `censor`: whether the subject returned to drug use (1) or\nnot (0) during the follow-up period\n\n* `herco`: whether subject used heroine or cocaine in the\nlast 3 months: 1 is both, 2 is one (either heroine or cocaine), 3 is neither.\n\n\n\n(a) Read in the data and check in one way or another that you\nhave what was promised above.\n\n\nSolution\n\n\nThis:\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/drugusers.txt\"\ndrugusers <- read_delim(my_url, \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 628 Columns: 9\n-- Column specification --------------------------------------------------------\nDelimiter: \" \"\ndbl (9): row, ID, age, ndrugtx, treat, site, time, censor, herco\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndrugusers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 628 x 9\n     row    ID   age ndrugtx treat  site  time censor herco\n   <dbl> <dbl> <dbl>   <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>\n 1     1     1    39       1     1     0   188      1     3\n 2     2     2    33       8     1     0    26      1     3\n 3     3     3    33       3     1     0   207      1     2\n 4     4     4    32       1     0     0   144      1     3\n 5     5     5    24       5     1     0   551      0     2\n 6     6     6    30       1     1     0    32      1     1\n 7     7     7    39      34     1     0   459      1     3\n 8     8     8    27       2     1     0    22      1     3\n 9     9     9    40       3     1     0   210      1     2\n10    10    10    36       7     1     0   184      1     2\n# i 618 more rows\n```\n\n\n:::\n:::\n\n \n\nThis shows that you have over 600 rows and the variables described.\n    \n\n$\\blacksquare$\n\n(b) There are some missing values in the dataframe. Demonstrate\nthis using `summary`. Pipe the dataframe into\n`drop_na` and show that they have gone. (`drop_na`\nremoves all rows that have missing values in them.)\n\n\nSolution\n\n\nFirst off, `summary` is a quick way to show how many missing\nvalues there are:^[It doesn't work with text columns, but it  *does* work if you temporarily turn the text columns into  factors, eg. by using `mutate` with `where`. However, we don't have any text  columns here, so what we do here is good for this data set.]\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(drugusers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      row              ID             age           ndrugtx      \n Min.   :  1.0   Min.   :  1.0   Min.   :20.00   Min.   : 0.000  \n 1st Qu.:157.8   1st Qu.:157.8   1st Qu.:27.00   1st Qu.: 1.000  \n Median :314.5   Median :314.5   Median :32.00   Median : 3.000  \n Mean   :314.5   Mean   :314.5   Mean   :32.37   Mean   : 4.574  \n 3rd Qu.:471.2   3rd Qu.:471.2   3rd Qu.:37.00   3rd Qu.: 6.000  \n Max.   :628.0   Max.   :628.0   Max.   :56.00   Max.   :40.000  \n                                 NA's   :5       NA's   :17      \n     treat             site            time            censor      \n Min.   :0.0000   Min.   :0.000   Min.   :   2.0   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:  79.0   1st Qu.:1.0000  \n Median :0.0000   Median :0.000   Median : 166.0   Median :1.0000  \n Mean   :0.4904   Mean   :0.293   Mean   : 234.7   Mean   :0.8089  \n 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.: 365.2   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1172.0   Max.   :1.0000  \n                                                                   \n     herco      \n Min.   :1.000  \n 1st Qu.:1.000  \n Median :2.000  \n Mean   :1.898  \n 3rd Qu.:3.000  \n Max.   :3.000  \n                \n```\n\n\n:::\n:::\n\n \n\nAge has five missing values and \"number of previous drug treatments\"\nhas seventeen.\n\nFollowing the instructions, and saving back into the original dataframe:\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugusers %>% drop_na() -> drugusers\n```\n:::\n\n \nand then\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(drugusers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      row              ID             age           ndrugtx      \n Min.   :  1.0   Min.   :  1.0   Min.   :20.00   Min.   : 0.000  \n 1st Qu.:155.2   1st Qu.:155.2   1st Qu.:27.00   1st Qu.: 1.000  \n Median :312.5   Median :312.5   Median :32.00   Median : 3.000  \n Mean   :313.8   Mean   :313.8   Mean   :32.39   Mean   : 4.579  \n 3rd Qu.:473.8   3rd Qu.:473.8   3rd Qu.:37.00   3rd Qu.: 6.000  \n Max.   :628.0   Max.   :628.0   Max.   :56.00   Max.   :40.000  \n     treat             site             time            censor      \n Min.   :0.0000   Min.   :0.0000   Min.   :   2.0   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:  79.0   1st Qu.:1.0000  \n Median :0.0000   Median :0.0000   Median : 166.0   Median :1.0000  \n Mean   :0.4918   Mean   :0.2984   Mean   : 234.4   Mean   :0.8115  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.: 361.8   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1172.0   Max.   :1.0000  \n     herco     \n Min.   :1.00  \n 1st Qu.:1.00  \n Median :2.00  \n Mean   :1.89  \n 3rd Qu.:3.00  \n Max.   :3.00  \n```\n\n\n:::\n:::\n\n \n\nNo NA left. Gosh, as they say, that was easy.\nExtra: how many rows did we lose?\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(drugusers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 610\n```\n\n\n:::\n:::\n\n \n\nThere were 628 rows before, so we lost 18. (There were 22 missing\nvalues, but some of them were two on one row, so we only lost 18\nrows.)\n\nThis is a very unsophisticated way of dealing with missing\nvalues. Another way is to \"impute\" them, that is, to guess what they\nwould have been, and then fill in the guessed values and use them as\nif they were the truth, for example by regressing the columns with missing values on all the others, and using the regression predictions in place of the missing values.\n\n\n$\\blacksquare$\n\n(c) Some of these variables are recorded as numbers but are\nactually categorical. Which ones? Re-define these variables in your\ndata frame so that they have sensible (text) values.\n\n\nSolution\n\n\nThese variables are actually categorical rather than quantitative:\n\n\n* `treat`\n\n* `site`\n\n* `censor`\n\n* `herco`\n\nMost of them have only two levels, so it doesn't matter whether\nwe make them categorical or leave them as numbers, but for\n`herco` it matters. Let's give them all sensible values,\nmostly with `ifelse`,^[`case_when` is much clearer than using nested `if-else`s when you have three or more categories, as for `herco`.] thus:\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugusers %>% mutate(\n  treat = ifelse(treat == 0, \"short\", \"long\"),\n  site = ifelse(site == 0, \"A\", \"B\"),\n  censor = ifelse(censor == 1, \"returned\", \"no-return\"),\n  herco = case_when(\n    herco == 1 ~ \"both\",\n    herco == 2 ~ \"one\",\n    herco == 3 ~ \"neither\"\n  )\n) -> drugusers\n```\n:::\n\n       \n\nI'm living on the edge and overwriting everything:\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugusers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 610 x 9\n     row    ID   age ndrugtx treat site   time censor    herco  \n   <dbl> <dbl> <dbl>   <dbl> <chr> <chr> <dbl> <chr>     <chr>  \n 1     1     1    39       1 long  A       188 returned  neither\n 2     2     2    33       8 long  A        26 returned  neither\n 3     3     3    33       3 long  A       207 returned  one    \n 4     4     4    32       1 short A       144 returned  neither\n 5     5     5    24       5 long  A       551 no-return one    \n 6     6     6    30       1 long  A        32 returned  both   \n 7     7     7    39      34 long  A       459 returned  neither\n 8     8     8    27       2 long  A        22 returned  neither\n 9     9     9    40       3 long  A       210 returned  one    \n10    10    10    36       7 long  A       184 returned  one    \n# i 600 more rows\n```\n\n\n:::\n:::\n\n \n\n\n$\\blacksquare$\n\n(d) Create a suitable reponse variable for a Cox proportional\nhazards regression that predicts time until return to drug use from\nthe other variables.\nThis requires some care, because you need to be sure about what the\ncensoring variable actually represents and what you need it to represent.\n\n\nSolution\n\n\nThis is `Surv` in package `survival`. The response\nvariable needs to encode two things: the time until the event of\ninterest (return to drug use) and whether or not that event\nhappened for each patient.^[Some people define the response variable right inside the `coxph`, in the same way as putting something like `log(y)` as a response in an `lm`, but I think, especially while you're getting used to the process, it's better to create the response variable first and look at it to make sure it's the right thing.]\nIn this case, that is\n`censor=\"returned\"`. \n\n::: {.cell}\n\n```{.r .cell-code}\ny <- with(drugusers, Surv(time, censor == \"returned\"))\n```\n:::\n\n       \n\nUse whatever name you gave to the level of `censor` that means \"returned to drug use\". \n\nOnce again, there is no problem with adding a new column `y` to your dataframe, thus:\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugusers %>% \n  mutate(y = Surv(time, censor == \"returned\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 610 x 10\n     row    ID   age ndrugtx treat site   time censor    herco        y\n   <dbl> <dbl> <dbl>   <dbl> <chr> <chr> <dbl> <chr>     <chr>   <Surv>\n 1     1     1    39       1 long  A       188 returned  neither   188 \n 2     2     2    33       8 long  A        26 returned  neither    26 \n 3     3     3    33       3 long  A       207 returned  one       207 \n 4     4     4    32       1 short A       144 returned  neither   144 \n 5     5     5    24       5 long  A       551 no-return one       551+\n 6     6     6    30       1 long  A        32 returned  both       32 \n 7     7     7    39      34 long  A       459 returned  neither   459 \n 8     8     8    27       2 long  A        22 returned  neither    22 \n 9     9     9    40       3 long  A       210 returned  one       210 \n10    10    10    36       7 long  A       184 returned  one       184 \n# i 600 more rows\n```\n\n\n:::\n:::\n\nAdd your response as a stand-alone vector or as a new column; your choice.\n\n$\\blacksquare$\n\n(e) Look at the first few values of your response variable. Why\nis the fifth one marked with a `+`? Explain briefly.\n\n\nSolution\n\n\n`head` works as well with a vector (displaying the first\nsix values) as it does with a data frame:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 188   26  207  144  551+  32 \n```\n\n\n:::\n:::\n\n      \n\nThe fifth value is marked with a `+` because it is a censored\nvalue: this is a patient who was never observed to go back to drug\nuse. You can tell this by looking at the `head` of the entire\ndata frame:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(drugusers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 9\n    row    ID   age ndrugtx treat site   time censor    herco  \n  <dbl> <dbl> <dbl>   <dbl> <chr> <chr> <dbl> <chr>     <chr>  \n1     1     1    39       1 long  A       188 returned  neither\n2     2     2    33       8 long  A        26 returned  neither\n3     3     3    33       3 long  A       207 returned  one    \n4     4     4    32       1 short A       144 returned  neither\n5     5     5    24       5 long  A       551 no-return one    \n6     6     6    30       1 long  A        32 returned  both   \n```\n\n\n:::\n:::\n\n \n\nsince this patient has `censor=\"no-return\"`. The other ones have\n`censor=\"returned\"`; these are all \"uncensored\" in the jargon.\n\nIf you added a new column `y` to your dataframe, you can see all this in one go by looking at the fifth row of the dataframe.\n\nTypically, censored values will be bigger than uncensored ones,\nbecause (in general) the individual will be observed until the study\nends, and studies of this kind carry on for years:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drugusers, aes(x = censor, y = time)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/drug-treatment-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n \nYep. The smallest time for a censored observation would be an upper outlier\nif it were observed for an uncensored observation.\n\nOne nice side-effect of turning `censor` into a categorical variable is that it can now\ndistinguish groups as a boxplot requires.\n\nI discovered something rather amusing when I originally wrote this (a\nyear ago). Suppose you want to compare times for the two treatment\ngroups, and you *also* want to distinguish censored from\nnon-censored observations. Then, this works:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(drugusers, aes(x = treat, y = time, colour = censor)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/drug-treatment-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n \n\nFor each treatment, you get side-by-side boxplots of the times for\ncensored (red) and uncensored (blue) observations, and so you see for\nboth treatments (short and long) the censored times are typically\nlonger than the uncensored ones.\n\n(This you may recognize as a \"grouped boxplot\", for when we have two\ncategorical variables and one quantitative one.)\n\nI borrow this idea for two-way ANOVA (coming up later).\n    \n\n$\\blacksquare$\n\n(f) Fit a Cox proportional hazards model, predicting from all\nthe other variables (except for `row` and `ID`) that you haven't used\nyet. Display the results.\n\n\nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugusers.1 <- coxph(y ~ age + ndrugtx + treat + site + herco, data = drugusers)\nsummary(drugusers.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + ndrugtx + treat + site + herco, data = drugusers)\n\n  n= 610, number of events= 495 \n\n                  coef exp(coef)  se(coef)      z Pr(>|z|)    \nage          -0.023798  0.976483  0.007561 -3.148  0.00165 ** \nndrugtx       0.034815  1.035429  0.007755  4.490 7.14e-06 ***\ntreatshort    0.254606  1.289953  0.091006  2.798  0.00515 ** \nsiteB        -0.173021  0.841120  0.102105 -1.695  0.09016 .  \nherconeither  0.125779  1.134032  0.103075  1.220  0.22236    \nhercoone      0.247318  1.280586  0.122759  2.015  0.04394 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n             exp(coef) exp(-coef) lower .95 upper .95\nage             0.9765     1.0241    0.9621    0.9911\nndrugtx         1.0354     0.9658    1.0198    1.0513\ntreatshort      1.2900     0.7752    1.0792    1.5418\nsiteB           0.8411     1.1889    0.6886    1.0275\nherconeither    1.1340     0.8818    0.9266    1.3879\nhercoone        1.2806     0.7809    1.0067    1.6289\n\nConcordance= 0.581  (se = 0.014 )\nLikelihood ratio test= 35.08  on 6 df,   p=4e-06\nWald test            = 36.96  on 6 df,   p=2e-06\nScore (logrank) test = 37.36  on 6 df,   p=1e-06\n```\n\n\n:::\n:::\n\n   \n\nAnother way to handle \n\"all the other $x$'s except `row`, `ID`, `time` and `censor`\" is this:\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugusers.1a <- coxph(y ~ . - row - ID - time - censor, data = drugusers)\ntidy(drugusers.1a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 5\n  term         estimate std.error statistic    p.value\n  <chr>           <dbl>     <dbl>     <dbl>      <dbl>\n1 age           -0.0238   0.00756     -3.15 0.00165   \n2 ndrugtx        0.0348   0.00775      4.49 0.00000714\n3 treatshort     0.255    0.0910       2.80 0.00515   \n4 siteB         -0.173    0.102       -1.69 0.0902    \n5 herconeither   0.126    0.103        1.22 0.222     \n6 hercoone       0.247    0.123        2.01 0.0439    \n```\n\n\n:::\n:::\n\n \n\nSame. I used `tidy` from `broom` to shorten the output a bit.\n    \n\n$\\blacksquare$\n\n(g) Find which explanatory variables can be removed at $\\alpha=0.05$\n(there should be two of them). Bear in mind that we have categorical variables, so that looking at the output from `summary` is not enough.\n\n\nSolution\n\n\nThe hint is meant to suggest to you that looking at `drop1` is the right way to go:\n\n::: {.cell}\n\n```{.r .cell-code}\ndrop1(drugusers.1, test = \"Chisq\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSingle term deletions\n\nModel:\ny ~ age + ndrugtx + treat + site + herco\n        Df    AIC     LRT  Pr(>Chi)    \n<none>     5712.2                      \nage      1 5720.3 10.0972  0.001485 ** \nndrugtx  1 5727.3 17.1446 3.464e-05 ***\ntreat    1 5718.0  7.8352  0.005124 ** \nsite     1 5713.1  2.9335  0.086760 .  \nherco    2 5712.5  4.3182  0.115427    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n       \n\nNote that `herco`, a categorical variable with three levels,\nhas 2 degrees of freedom here, since a test of \n\"no effect of `herco`\" is testing that survival is the same at \n*all three* levels of `herco`.\n\n\n$\\blacksquare$\n\n(h) Remove *all* the non-significant explanatory variables\nand re-fit your model. By carrying out a suitable test demonstrate\nthat your smaller model is the better one.\n\n\nSolution\n\n\n`site` and `herco` are the two variables to come\nout.^[The researchers were probably relieved that there        was not quite a significant effect of `site`.] I like\n`update`, but there is no\nproblem about copying-pasting your `coxph` and taking out\nwhat you no longer need.\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugusers.2 <- update(drugusers.1, . ~ . - site - herco)\n```\n:::\n\n \n\nHaving fit two models, we can use `anova` to compare them. The\nright test gets done, so no need for `test=`:\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(drugusers.2, drugusers.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Deviance Table\n Cox model: response is  y\n Model 1: ~ age + ndrugtx + treat\n Model 2: ~ age + ndrugtx + treat + site + herco\n   loglik  Chisq Df Pr(>|Chi|)  \n1 -2853.7                       \n2 -2850.1 7.2117  3    0.06545 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n \n\nThere is no significant difference between these two \nmodels,^[Not at the 0.05 level, anyway.] so we can go with the \nsmaller, simpler one\n(with just `age`, `ndrugtx` and `treat`).\n    \n\n$\\blacksquare$\n\n(i) <a name=\"part:posneg\">*</a> Display your better model. Are all of the\nexplanatory variables significant? Do their slope coefficients have\nsensible signs (plus or minus), based on what you know or can guess\nabout drug treatments? Explain briefly.\n\n\nSolution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(drugusers.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + ndrugtx + treat, data = drugusers)\n\n  n= 610, number of events= 495 \n\n                coef exp(coef)  se(coef)      z Pr(>|z|)    \nage        -0.020801  0.979414  0.007419 -2.804  0.00505 ** \nndrugtx     0.035567  1.036207  0.007621  4.667 3.05e-06 ***\ntreatshort  0.231055  1.259929  0.090175  2.562  0.01040 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n           exp(coef) exp(-coef) lower .95 upper .95\nage           0.9794     1.0210    0.9653    0.9938\nndrugtx       1.0362     0.9651    1.0208    1.0518\ntreatshort    1.2599     0.7937    1.0558    1.5035\n\nConcordance= 0.572  (se = 0.014 )\nLikelihood ratio test= 27.87  on 3 df,   p=4e-06\nWald test            = 30.5  on 3 df,   p=1e-06\nScore (logrank) test = 30.62  on 3 df,   p=1e-06\n```\n\n\n:::\n:::\n\n       \n\nThe three remaining explanatory variables are all clearly significant:\nthe patient's age, the number of previous drug treatments, and whether\nthe treatment was short or long. This is legit (we don't need to run\n`drop1` again) because the remaining explanatory variables are\nall quantitative or have only two levels, so that the single-df tests\nin `summary` are what we need.\n\nDo their slope coefficients have sensible signs? Well, this requires\ncareful thought. A positive coefficient means that increasing that\nvariable *increases the hazard of the event*: ie., it makes the\nevent likelier to happen sooner. Here, the \"event\" is \n\"return to drug use\":\n\n\n\n* Age has a negative coefficient, so an older person is likely to take\n*longer* to return to drug use, other things being equal. This\nmakes some kind of sense, if you imagine drug use as being related to\nmaturity, or an older drug user as being more strongly committed to\n\"turning their life around\", so that a drug treatment of any kind is\ngoing to be more effective on an older patient.\n\n* The number of previous treatments has a positive coefficient, so that a\npatient who has had a lot of previous treatments is likely to go back\nto drugs sooner. Such a person might be an \"addict\" for whom\ntreatments really do not work, or might not be committed to giving up drugs.\n\n\n* `treatshort` has a positive coefficient.  This says that\nif you give a patient a short treatment, they are more likely (other\nthings being equal) to go back to drugs sooner, as compared to the\nbaseline long treatment.  That is, a longer treatment is more\neffective than a shorter one. Given a significant effect of\ntreatment length, this is the way around you would expect it to be.\n\n\n    \n\n$\\blacksquare$\n\n(j) We have three variables left in our model, `age`,\n`ndrugtx` and `treat`. The quartiles of age are 27 and\n37, the quartiles of `ndrugtx` are 1 and 6, and the two\npossible values of `treat` are `short` and `long`. Create a data frame\nwith variables of these names and all possible combinations of their\nvalues (so there should be 8 rows in the resulting data\nframe). Display the resulting data frame.\n\n\nSolution\n\n\nThis data frame is going to be used for prediction, so I will\ncall it `new` and construct it in pieces as I did before\n(thus meaning that I don't have to think too hard about what I'm doing):\n\n::: {.cell}\n\n```{.r .cell-code}\nages <- c(27, 37)\nndrugtxs <- c(1, 6)\ntreats <- c(\"short\", \"long\")\nnew <- datagrid(model = drugusers.2, age = ages, ndrugtx = ndrugtxs, treat = treats)\nnew\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age ndrugtx treat rowid\n1  27       1 short     1\n2  27       1  long     2\n3  27       6 short     3\n4  27       6  long     4\n5  37       1 short     5\n6  37       1  long     6\n7  37       6 short     7\n8  37       6  long     8\n```\n\n\n:::\n:::\n\n       \n\n8 rows as promised.\n    \n\n$\\blacksquare$\n\n(k) Obtain predicted survival probabilities for each of the\nvalues of `age`, `ndrugtx` and `treat` used in\nthe previous part. You don't need to display it (we are going to\nplot it shortly). \n\nSolution\n\n\n`survfit` is the survival analysis version of\n`predict` and works the same way, so this is all you need:\n\n::: {.cell}\n\n```{.r .cell-code}\npp <- survfit(drugusers.2, new, data = drugusers)\n```\n:::\n\n       \n\nMake sure that you use your best model, ie.\\ the second one. The\n`data=` is needed for the plot below, not in itself for the\nprediction. \n\n$\\blacksquare$\n\n(l) Plot your predicted survival curves. \n\n\nSolution\n\n\nThis:\n\n::: {.cell}\n\n```{.r .cell-code}\nggsurvplot(pp, conf.int = F)\n```\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/drug-treatment-21-1.pdf){fig-pos='H'}\n:::\n:::\n\n   \n\nThe only thing to remember is that you plot your *predictions*,\nnot the model from which they came.\n\nIf your plot didn't come out, you may have to go back and re-do the\n`survfit` with the `data=` at the end.\n\nFor reference in a minute:\n\n::: {.cell}\n\n```{.r .cell-code}\nnew\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age ndrugtx treat rowid\n1  27       1 short     1\n2  27       1  long     2\n3  27       6 short     3\n4  27       6  long     4\n5  37       1 short     5\n6  37       1  long     6\n7  37       6 short     7\n8  37       6  long     8\n```\n\n\n:::\n:::\n\n \n\n$\\blacksquare$\n\n(m) Which of your combinations of values is predicted to take\nthe longest to return to drug use? Which is predicted to take the\nshortest time? Explain briefly.\n\n\nSolution\n\n\nRemember that \"up and to the right\" is the best survival\ncurve: that is, the people on this survival curve are predicted\nto take the longest to return to drug use. On my plot, this is\nthe pale blue survival curve, stratum 5. Going back to my\ncombinations data frame, this is 37-year-olds with only one\nprevious drug treatment and the longer drug treatment this time.\n\nThe worst is my green survival curve, stratum 4, which is\nthe exact opposite of this: 27-year-olds, 6 previous drug\ntreatments, shorter treatment this time.\n\n\"Returning to drug use\" is like \"death\" in that you want it\nto be a long time before it happens, so \"best\" is top right on\nthe plot of survival curves. In other circumstances, you might\nwant the event to happen *sooner*, in which case the\nlower-left survival curve would be the \"best\" one.\n    \n\n$\\blacksquare$\n\n(n) Are your survival curve plot and your conclusions from part\n(<a href=\"#part:posneg\">here</a>) consistent, or not? Explain briefly.\n\n\nSolution\n\n\nThe survival curves say that being older, having fewer previous\ntreatments and being on the long treatment are better in terms\nof taking longer to return to drug use. Our analysis of whether\nthe slope coefficients in `drugusers.2` were positive or\nnegative came to exactly the same conclusion. So the survival\ncurves and part (<a href=\"#part:posneg\">here</a>) are entirely consistent.\n\nOn my plot with the legend, you can assess the effects of the\nindividual variables: for example, to assess the effect of age,\nfind two combos that differ only in age, say strata 1 and 5, the\nred and light blue ones. Of these, the light blue survival curve is\nhigher, so age 37 is better in terms of survival than age\n27. This will work whichever such pair you pick: for example,\nstrata 3 and 7, the olive green and purple curves, compare\nthe same way. \n\nExtra: more comparisons for you to do: to assess the effect of number of\nprevious treatments, compare eg. strata 1 and 3, red and olive\ngreen, and to assess the effect of treatment length, compare\neg. strata 5 and 6, light blue and darker blue.\n\nAll this struggling to identify colours makes me think of\n[link](https://blog.xkcd.com/2010/05/03/color-survey-results/), in\nwhich the guy behind the webcomic XKCD did a survey where he\nshowed people a whole bunch of different colours and asked the\npeople to name the colours.\n    \n$\\blacksquare$\n\n\n\n\n\n\n\n##  Multiple myeloma\n\n\n Multiple myeloma is a kind of cancer. It\nforms in a plasma cell (which is a type of white blood cell). It\ncauses cancer cells to accumulate in the bone marrow, where they crowd\nout healthy blood cells. Plasma cells make antibodies (to help fight\ninfections), while the cancer cells don't: they produce abnormal\nproteins that can cause kidney problems. (This adapted from\n[link](http://www.mayoclinic.org/diseases-conditions/multiple-myeloma/basics/definition/con-20026607).)\nThe variables are:\n\n\n\n* `time`: survival time from diagnosis (months)\n\n* `vstatus`: 0=alive, 1=dead at end of study\n\n* `logbun`: log of BUN test score (BUN test is a test of\nkidney function, not to be confused with cha siu\nbao^[Barbecued pork in a bun. A staple of Chinese dim sum and  Chinese bakeries, such as Ding Dong bakery on Spadina.]).\n\n* `hgb`: hemoglobin (at diagnosis).\n\n* `platelet`: platelets: 1=normal, 0=abnormal (at\ndiagnosis).\n\n* `age` at diagnosis, in years\n\n* `logwbc`: log of WBC (white blood cell count, at\ndiagnosis)\n\n* `frac`: fractures at diagnosis (0=absent, 1=present)\n\n* `logpbm`: log of percent of plasma cells in bone marrow\n\n* `protein`: proteinuria (protein in urine) at\ndiagnosis. Most people have very little, so a larger than normal\namount indicates illness of some kind.\n\n* `scalc`: serum calcium at diagnosis.\n\n\nThe data, on 65 patients with multiple myeloma, are in\n[link](http://ritsokiguess.site/datafiles/myeloma.csv). Some of the\nvariables are logs because they could take very large values.\n\nThere are a lot of parts here, but each part is supposed to be short.\n\n\n\n(a) Read in the data and display (some of) the values. Confirm that\nyou have the right number of observations and the right variables.\n\n\nSolution\n\n\nThe usual:\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/myeloma.csv\"\nmyeloma <- read_csv(my_url)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 65 Columns: 11\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\ndbl (11): time, vstatus, logbun, hgb, platelet, age, logwbc, frac, logpbm, p...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nmyeloma\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 65 x 11\n    time vstatus logbun   hgb platelet   age logwbc  frac logpbm protein scalc\n   <dbl>   <dbl>  <dbl> <dbl>    <dbl> <dbl>  <dbl> <dbl>  <dbl>   <dbl> <dbl>\n 1  1.25       1   2.22   9.4        1    67   3.66     1   1.95      12    10\n 2  1.25       1   1.94  12          1    38   3.99     1   1.95      20    18\n 3  2          1   1.52   9.8        1    81   3.88     1   2          2    15\n 4  2          1   1.75  11.3        0    75   3.81     1   1.26       0    12\n 5  2          1   1.30   5.1        0    57   3.72     1   2          3     9\n 6  3          1   1.54   6.7        1    46   4.48     0   1.93      12    10\n 7  5          1   2.24  10.1        1    50   4.95     1   1.66       4     9\n 8  5          1   1.68   6.5        1    74   3.73     0   1.73       5     9\n 9  6          1   1.36   9          1    77   3.54     0   1.46       1     8\n10  6          1   2.11  10.2        0    70   3.54     1   1.36       1     8\n# i 55 more rows\n```\n\n\n:::\n:::\n\n     \n\n65 observations, and all the variables listed. If you want to go\nfurther (not necessary here), you can check that the variables\n`vstatus`, `platelet` and `frac` that should be\nzero and one actually *are* zero and one, at least for the values\nshown (they are), and the ages look like ages (they do).\n\nThe tidyverse also offers:\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(myeloma)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 65\nColumns: 11\n$ time     <dbl> 1.25, 1.25, 2.00, 2.00, 2.00, 3.00, 5.00, 5.00, 6.00, 6.00, 6~\n$ vstatus  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n$ logbun   <dbl> 2.2175, 1.9395, 1.5185, 1.7482, 1.3010, 1.5441, 2.2355, 1.681~\n$ hgb      <dbl> 9.4, 12.0, 9.8, 11.3, 5.1, 6.7, 10.1, 6.5, 9.0, 10.2, 9.7, 10~\n$ platelet <dbl> 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1~\n$ age      <dbl> 67, 38, 81, 75, 57, 46, 50, 74, 77, 70, 60, 67, 48, 61, 53, 5~\n$ logwbc   <dbl> 3.6628, 3.9868, 3.8751, 3.8062, 3.7243, 4.4757, 4.9542, 3.732~\n$ frac     <dbl> 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1~\n$ logpbm   <dbl> 1.9542, 1.9542, 2.0000, 1.2553, 2.0000, 1.9345, 1.6628, 1.732~\n$ protein  <dbl> 12, 20, 2, 0, 3, 12, 4, 5, 1, 1, 0, 0, 5, 1, 1, 0, 0, 1, 1, 0~\n$ scalc    <dbl> 10, 18, 15, 12, 9, 10, 9, 9, 8, 8, 10, 8, 10, 10, 13, 12, 10,~\n```\n\n\n:::\n:::\n\n \n\nwhich gives a bit more of a picture of the values.^[Don't  confuse this with `glance` from `broom`, which gives a one-line summary of a *model*, containing things like R-squared and a test for the overall model significance.]\nOr if you were\nserious about checking, you could do\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(myeloma)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      time          vstatus           logbun            hgb      \n Min.   : 1.25   Min.   :0.0000   Min.   :0.7782   Min.   : 4.9  \n 1st Qu.: 7.00   1st Qu.:0.0000   1st Qu.:1.1461   1st Qu.: 8.8  \n Median :15.00   Median :1.0000   Median :1.3222   Median :10.2  \n Mean   :24.01   Mean   :0.7385   Mean   :1.3929   Mean   :10.2  \n 3rd Qu.:35.00   3rd Qu.:1.0000   3rd Qu.:1.5682   3rd Qu.:12.0  \n Max.   :92.00   Max.   :1.0000   Max.   :2.2355   Max.   :14.6  \n    platelet           age            logwbc           frac       \n Min.   :0.0000   Min.   :38.00   Min.   :3.362   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:51.00   1st Qu.:3.643   1st Qu.:1.0000  \n Median :1.0000   Median :60.00   Median :3.732   Median :1.0000  \n Mean   :0.8615   Mean   :60.15   Mean   :3.769   Mean   :0.7538  \n 3rd Qu.:1.0000   3rd Qu.:67.00   3rd Qu.:3.875   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :82.00   Max.   :4.954   Max.   :1.0000  \n     logpbm          protein           scalc      \n Min.   :0.4771   Min.   : 0.000   Min.   : 7.00  \n 1st Qu.:1.3617   1st Qu.: 0.000   1st Qu.: 9.00  \n Median :1.6232   Median : 1.000   Median :10.00  \n Mean   :1.5497   Mean   : 3.615   Mean   :10.12  \n 3rd Qu.:1.8451   3rd Qu.: 4.000   3rd Qu.:10.00  \n Max.   :2.0000   Max.   :27.000   Max.   :18.00  \n```\n\n\n:::\n:::\n\n \n\nwhich gives means and five-number summaries for each of the variables\n(the numeric ones, but they all are here, even the ones coded as 0 or\n1 that are really categorical).\n    \n\n$\\blacksquare$\n\n(b) Create a suitable response variable for a Cox\nproportional-hazards survival model, bearing in mind that the\n\"event\" here is death. Display your response variable, and explain\nbriefly what the `+` signs attached to some of the values\nmean, without using a technical term.\n\n\nSolution\n\n\nI seem to call my response variables `y`, but you can call\nyours whatever you like. Two things to consider: the survival times, here\n`time`, and the indicator of the event, here\n`vstatus` being 1.\n\nThe modern way is to define the response variable right back into the dataframe, thus:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyeloma %>% mutate(y = Surv(time, vstatus == 1)) -> myeloma\nmyeloma\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 65 x 12\n    time vstatus logbun   hgb platelet   age logwbc  frac logpbm protein scalc\n   <dbl>   <dbl>  <dbl> <dbl>    <dbl> <dbl>  <dbl> <dbl>  <dbl>   <dbl> <dbl>\n 1  1.25       1   2.22   9.4        1    67   3.66     1   1.95      12    10\n 2  1.25       1   1.94  12          1    38   3.99     1   1.95      20    18\n 3  2          1   1.52   9.8        1    81   3.88     1   2          2    15\n 4  2          1   1.75  11.3        0    75   3.81     1   1.26       0    12\n 5  2          1   1.30   5.1        0    57   3.72     1   2          3     9\n 6  3          1   1.54   6.7        1    46   4.48     0   1.93      12    10\n 7  5          1   2.24  10.1        1    50   4.95     1   1.66       4     9\n 8  5          1   1.68   6.5        1    74   3.73     0   1.73       5     9\n 9  6          1   1.36   9          1    77   3.54     0   1.46       1     8\n10  6          1   2.11  10.2        0    70   3.54     1   1.36       1     8\n# i 55 more rows\n# i 1 more variable: y <Surv>\n```\n\n\n:::\n:::\n\nYou see that the new column (on the end) is of type `Surv`, to reflect the fact that it is not just a number (a survival time) but also encodes whether or not the individual was observed to die at that time.\n\nThe old way (that still works) is to create `y` *outside* the dataframe, like this: \n\n::: {.cell}\n\n```{.r .cell-code}\ny <- with(myeloma, Surv(time, vstatus == 1))\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1.25   1.25   2.00   2.00   2.00   3.00   5.00   5.00   6.00   6.00 \n[11]  6.00   6.00   7.00   7.00   7.00   9.00  11.00  11.00  11.00  11.00 \n[21] 11.00  13.00  14.00  15.00  16.00  16.00  17.00  17.00  18.00  19.00 \n[31] 19.00  24.00  25.00  26.00  32.00  35.00  37.00  41.00  41.00  51.00 \n[41] 52.00  54.00  58.00  66.00  67.00  88.00  89.00  92.00   4.00+  4.00+\n[51]  7.00+  7.00+  8.00+ 12.00+ 11.00+ 12.00+ 13.00+ 16.00+ 19.00+ 19.00+\n[61] 28.00+ 41.00+ 53.00+ 57.00+ 77.00+\n```\n\n\n:::\n:::\n\n\n\nOr use\n`myeloma$` (twice) before the variable names.\n\nThe values of `y` that have a `+` by them go with\npatients who were never observed to die (or were still alive at the\nend of the study). There were 17 of these, listed at the end of the\ndata frame. Usually, these values of the response will be higher than\nthe others, but they weren't here. (Maybe some of these patients were\nwithdrawn from the study, or they joined it late.) \n    \nThe reason we used to have to do it this way is that `tibble`s didn't until recently have the ability to store a thing like the above `y` as a column, because it wasn't just a number. Now, it is stored like a list-column, and all that matters is that it is a column of *something*, one survival-time-plus-censorship-status for each observation.\n\n$\\blacksquare$\n\n(c) What is the technical term for those patients that have a\n`+` by their values for the response variable?\n\n\nSolution\n\n\nCensored. A quick one.\nI was trying to dissuade you from using the word \"censored\" in\nthe previous part, since I wanted you to demonstrate that you\nunderstood what it *meant*. But you should know the technical\nterm as well, which is why I asked you for it here.\nGrading note: if this part and the previous one contain,\nsomewhere, the word \"censored\" *and* a clear explanation of\nwhat \"censored\" means, then I don't mind what is where.\n    \n\n$\\blacksquare$\n\n(d) Fit a Cox proportional-hazards survival model predicting\nyour response variable from all the other variables (except for the\nones that you used to make the response variable). Display the\n`summary` of your model.\n\n\nSolution\n\n\nThe obvious way to do this is to list all the other variables on\nthe right side of the squiggle, but a faster way is this:\n\n::: {.cell}\n\n```{.r .cell-code}\ny.1 <- coxph(y ~ . - time - vstatus, data = myeloma)\nsummary(y.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ . - time - vstatus, data = myeloma)\n\n  n= 65, number of events= 48 \n\n             coef exp(coef) se(coef)      z Pr(>|z|)   \nlogbun    1.85557   6.39536  0.65628  2.827  0.00469 **\nhgb      -0.12629   0.88136  0.07212 -1.751  0.07994 . \nplatelet -0.25488   0.77501  0.51194 -0.498  0.61858   \nage      -0.01306   0.98702  0.01957 -0.668  0.50439   \nlogwbc    0.35389   1.42460  0.71576  0.494  0.62101   \nfrac      0.34232   1.40821  0.40725  0.841  0.40059   \nlogpbm    0.38165   1.46470  0.48743  0.783  0.43364   \nprotein   0.01302   1.01311  0.02612  0.498  0.61817   \nscalc     0.12976   1.13856  0.10502  1.236  0.21659   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n         exp(coef) exp(-coef) lower .95 upper .95\nlogbun      6.3954     0.1564    1.7670    23.147\nhgb         0.8814     1.1346    0.7652     1.015\nplatelet    0.7750     1.2903    0.2841     2.114\nage         0.9870     1.0131    0.9499     1.026\nlogwbc      1.4246     0.7020    0.3503     5.794\nfrac        1.4082     0.7101    0.6339     3.128\nlogpbm      1.4647     0.6827    0.5634     3.808\nprotein     1.0131     0.9871    0.9625     1.066\nscalc       1.1386     0.8783    0.9268     1.399\n\nConcordance= 0.675  (se = 0.051 )\nLikelihood ratio test= 17.62  on 9 df,   p=0.04\nWald test            = 17.93  on 9 df,   p=0.04\nScore (logrank) test = 18.97  on 9 df,   p=0.03\n```\n\n\n:::\n:::\n\n     \n\nThe `.` in this model formula means \n\"all the columns in the data frame\" \n(except for the response variable if it was in the data\nframe, which here it was not). I used `time` and\n`vstatus` to make `y`, so I had to exclude them explicitly.\n\nIf you forget to exclude `time` and `vstatus`, you are\nin danger of having a model that fits perfectly:\n\n::: {.cell}\n\n```{.r .cell-code}\ny.00 <- coxph(y ~ ., data = myeloma)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights, :\nRan out of iterations and did not converge\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(y.00)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ ., data = myeloma)\n\n  n= 65, number of events= 48 \n\n               coef  exp(coef)   se(coef)       z Pr(>|z|)    \ntime     -1.109e+01  1.526e-05  9.799e-01 -11.318   <2e-16 ***\nvstatus   1.543e+01  5.031e+06  6.233e+02   0.025     0.98    \nlogbun    1.759e-04  1.000e+00  7.904e-01   0.000     1.00    \nhgb       6.861e-06  1.000e+00  9.143e-02   0.000     1.00    \nplatelet  9.226e-05  1.000e+00  6.221e-01   0.000     1.00    \nage      -4.311e-06  1.000e+00  2.245e-02   0.000     1.00    \nlogwbc   -1.220e-06  1.000e+00  8.940e-01   0.000     1.00    \nfrac     -6.694e-05  9.999e-01  6.262e-01   0.000     1.00    \nlogpbm    2.400e-04  1.000e+00  7.307e-01   0.000     1.00    \nprotein   3.472e-05  1.000e+00  6.776e-02   0.001     1.00    \nscalc    -1.447e-05  1.000e+00  1.091e-01   0.000     1.00    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n         exp(coef) exp(-coef) lower .95 upper .95\ntime     1.526e-05  6.554e+04 2.236e-06 0.0001041\nvstatus  5.031e+06  1.988e-07 0.000e+00       Inf\nlogbun   1.000e+00  9.998e-01 2.124e-01 4.7087742\nhgb      1.000e+00  1.000e+00 8.359e-01 1.1962633\nplatelet 1.000e+00  9.999e-01 2.955e-01 3.3849492\nage      1.000e+00  1.000e+00 9.569e-01 1.0449881\nlogwbc   1.000e+00  1.000e+00 1.734e-01 5.7673011\nfrac     9.999e-01  1.000e+00 2.930e-01 3.4119518\nlogpbm   1.000e+00  9.998e-01 2.389e-01 4.1885763\nprotein  1.000e+00  1.000e+00 8.757e-01 1.1420792\nscalc    1.000e+00  1.000e+00 8.075e-01 1.2384242\n\nConcordance= 1  (se = 0 )\nLikelihood ratio test= 277  on 11 df,   p=<2e-16\nWald test            = 128.1  on 11 df,   p=<2e-16\nScore (logrank) test = 87.4  on 11 df,   p=5e-14\n```\n\n\n:::\n:::\n\n \n\nThe warning at the top is your clue that something has gone\nwrong. This kind of warning *can* happen with real data, but not\noften: it is usually an indication that something is wrong with the\nway you specified the model. If you look at the output, you'll realize\nthat predicting survival time from survival time makes no sense at all.\n\nThere is of course nothing wrong with typing out all the variable\nnames, except that the first time you type them out, you will likely\nmake a typo (unless you are more careful than I usually am). \n    \n\n$\\blacksquare$\n\n(e) In your model, which explanatory variables have a P-value less than\n0.10? Fit a model containing only those and display the results.\n\n\nSolution\n\n\nOnly `logbun` and `hgb`; the other P-values are\nlarger, usually much larger.\nBecause there are so many variables to remove, I am frightened\naway from `update` here (which I would normally try to use\nin this situation). I'm going to copy-and-paste my code for\n`y.1` and edit it:\n\n::: {.cell}\n\n```{.r .cell-code}\ny.2 <- coxph(y ~ logbun + hgb, data = myeloma)\nsummary(y.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ logbun + hgb, data = myeloma)\n\n  n= 65, number of events= 48 \n\n           coef exp(coef) se(coef)      z Pr(>|z|)   \nlogbun  1.71597   5.56209  0.61855  2.774  0.00553 **\nhgb    -0.11966   0.88722  0.05742 -2.084  0.03717 * \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n       exp(coef) exp(-coef) lower .95 upper .95\nlogbun    5.5621     0.1798    1.6547   18.6961\nhgb       0.8872     1.1271    0.7928    0.9929\n\nConcordance= 0.675  (se = 0.043 )\nLikelihood ratio test= 12.27  on 2 df,   p=0.002\nWald test            = 12.51  on 2 df,   p=0.002\nScore (logrank) test = 13.07  on 2 df,   p=0.001\n```\n\n\n:::\n:::\n\n     \n\nThat's all I wanted, but you can note that `hgb` has become\nsignificant at $\\alpha=0.05$. I suspect it was somewhat correlated\nwith a variable that we removed, so that its value to the regression\nhas become clearer.\n    \n\n$\\blacksquare$\n\n(f) Do a test to compare the two models that you fit. Why do \nyou prefer the second model? Explain briefly.\n\n\nSolution\n\n\nComparing two models is `anova`, which also works here. The\nright `test` is `Chisq`:\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(y.2, y.1, test = \"Chisq\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Deviance Table\n Cox model: response is  y\n Model 1: ~ logbun + hgb\n Model 2: ~ (time + vstatus + logbun + hgb + platelet + age + logwbc + frac + logpbm + protein + scalc) - time - vstatus\n   loglik Chisq Df Pr(>|Chi|)\n1 -148.06                    \n2 -145.39 5.347  7     0.6177\n```\n\n\n:::\n:::\n\n     \n\nThe usual logic here: this is far from significant, so the null\nhypothesis (that the two models are equally good) is not rejected, so\nwe prefer the smaller model `y.2` because it is simpler.\n\nI wasn't sure about the `Model 2` line of my `anova`\noutput (what are `time` and `vstatus` doing there?), but\nthe test has 7 degrees of freedom, which is correct since we started with 9\nexplanatory variables and finished with 2, so that we took out 7 of\nthem. I checked what went off the right side of the page: there is a\n`-time-vstatus` on the end, so that it is correct. What\nhappened is that the `.` got expanded out into all the\nvariables separated by `+`, and then whatever else (the\n\"minus\" variables) were on the end.\n\nIn case you are curious, `step` also works on models like these:\n\n::: {.cell}\n\n```{.r .cell-code}\ny.3 <- step(y.1, direction = \"backward\", trace = 0)\nsummary(y.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ logbun + hgb, data = myeloma)\n\n  n= 65, number of events= 48 \n\n           coef exp(coef) se(coef)      z Pr(>|z|)   \nlogbun  1.71597   5.56209  0.61855  2.774  0.00553 **\nhgb    -0.11966   0.88722  0.05742 -2.084  0.03717 * \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n       exp(coef) exp(-coef) lower .95 upper .95\nlogbun    5.5621     0.1798    1.6547   18.6961\nhgb       0.8872     1.1271    0.7928    0.9929\n\nConcordance= 0.675  (se = 0.043 )\nLikelihood ratio test= 12.27  on 2 df,   p=0.002\nWald test            = 12.51  on 2 df,   p=0.002\nScore (logrank) test = 13.07  on 2 df,   p=0.001\n```\n\n\n:::\n:::\n\n\n\nThe same model as the one we found by brute force. You can change the\nvalue of `trace` to see the progress, but in this case it's not\nvery illuminating, since `<none>` and the variables we end up\nkeeping are always at the bottom of the list to remove.\n\n`step` is built on `add1` and `drop1`. In this\ncase, `drop1` is run repeatedly and the variable with lowest\nAIC is removed. We had all numeric variables in this one, but if our\nmodel had something categorical like `treatment` with, let's\nsay, 4 levels, `drop1` would contemplate dropping all four of\nthese in one shot, the same way it works with a categorical variable\nin a regression of any other kind.\n\n    \n\n$\\blacksquare$\n\n(g) There should be two explanatory variables left in your\nmodel. These are both numerical variables. Find their first and\nthird quartiles, any way you like.\n\n\nSolution\n\n\nThe obvious way is probably this:\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(myeloma$logbun)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    0%    25%    50%    75%   100% \n0.7782 1.1461 1.3222 1.5682 2.2355 \n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(myeloma$hgb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  0%  25%  50%  75% 100% \n 4.9  8.8 10.2 12.0 14.6 \n```\n\n\n:::\n:::\n\n     \n\nSo the quartiles are 1.15 and 1.57 for `logbun`, and 8.8 and\n12.0 for `hgb`.\n\nThere are (at least) three other ways to do it. This is the easiest:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(myeloma)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      time          vstatus           logbun            hgb      \n Min.   : 1.25   Min.   :0.0000   Min.   :0.7782   Min.   : 4.9  \n 1st Qu.: 7.00   1st Qu.:0.0000   1st Qu.:1.1461   1st Qu.: 8.8  \n Median :15.00   Median :1.0000   Median :1.3222   Median :10.2  \n Mean   :24.01   Mean   :0.7385   Mean   :1.3929   Mean   :10.2  \n 3rd Qu.:35.00   3rd Qu.:1.0000   3rd Qu.:1.5682   3rd Qu.:12.0  \n Max.   :92.00   Max.   :1.0000   Max.   :2.2355   Max.   :14.6  \n    platelet           age            logwbc           frac       \n Min.   :0.0000   Min.   :38.00   Min.   :3.362   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:51.00   1st Qu.:3.643   1st Qu.:1.0000  \n Median :1.0000   Median :60.00   Median :3.732   Median :1.0000  \n Mean   :0.8615   Mean   :60.15   Mean   :3.769   Mean   :0.7538  \n 3rd Qu.:1.0000   3rd Qu.:67.00   3rd Qu.:3.875   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :82.00   Max.   :4.954   Max.   :1.0000  \n     logpbm          protein           scalc      \n Min.   :0.4771   Min.   : 0.000   Min.   : 7.00  \n 1st Qu.:1.3617   1st Qu.: 0.000   1st Qu.: 9.00  \n Median :1.6232   Median : 1.000   Median :10.00  \n Mean   :1.5497   Mean   : 3.615   Mean   :10.12  \n 3rd Qu.:1.8451   3rd Qu.: 4.000   3rd Qu.:10.00  \n Max.   :2.0000   Max.   :27.000   Max.   :18.00  \n       y.time              y.status      \n Min.   : 1.25000     Min.   :0.0000000  \n 1st Qu.: 7.00000     1st Qu.:0.0000000  \n Median :15.00000     Median :1.0000000  \n Mean   :24.00769     Mean   :0.7384615  \n 3rd Qu.:35.00000     3rd Qu.:1.0000000  \n Max.   :92.00000     Max.   :1.0000000  \n```\n\n\n:::\n:::\n\n \n\nfrom which you pick out the ones you need. Or, you `select` the\nones you need first:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyeloma %>% select(logbun, hgb) %>% summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     logbun            hgb      \n Min.   :0.7782   Min.   : 4.9  \n 1st Qu.:1.1461   1st Qu.: 8.8  \n Median :1.3222   Median :10.2  \n Mean   :1.3929   Mean   :10.2  \n 3rd Qu.:1.5682   3rd Qu.:12.0  \n Max.   :2.2355   Max.   :14.6  \n```\n\n\n:::\n:::\n\n \n\nThe obvious `tidyverse` way is actually a bit\ninelegant, because you have to calculate two things for two variables:^[Because *summarize* will only allow you to have a single-number answer.] \n\n::: {.cell}\n\n```{.r .cell-code}\nmyeloma %>% summarize(\n  logbun.q1 = quantile(logbun, 0.25),\n  logbun.q3 = quantile(logbun, 0.75),\n  hgb.q1 = quantile(hgb, 0.25),\n  hgb.q3 = quantile(hgb, 0.75)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 4\n  logbun.q1 logbun.q3 hgb.q1 hgb.q3\n      <dbl>     <dbl>  <dbl>  <dbl>\n1      1.15      1.57    8.8     12\n```\n\n\n:::\n:::\n\nNext is the tidyverse-approved way to get both quartiles for both variables at once. Use `across` to select the variables to use, and then something with a squiggle and a dot to say \"do this on each of the columns selected in the `across`\". If you have a cleverer way to select those two columns without naming them, go for it. Read this in English as \"for each of the columns `logbun` and `hgb`, work out the first and third quantiles of it\", where the dot is read as \"it\":\n\n::: {.cell}\n\n```{.r .cell-code}\nmyeloma %>% \n  summarize(across(c(logbun, hgb), \n                   \\(x) quantile(x, c(0.25, 0.75))))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\ni Please use `reframe()` instead.\ni When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 2\n  logbun   hgb\n   <dbl> <dbl>\n1   1.15   8.8\n2   1.57  12  \n```\n\n\n:::\n:::\n\nWe have lost which quartile is which, but of course the lower one must be Q1 and the higher one Q3 for each variable.^[The way, as we  have seen elsewhere, is to use `tidy(quantile)` or `enframe(quantile)`, which  produce a two-column data frame with the percentiles shown.]\n    \n\n$\\blacksquare$\n\n(h) Create a data frame containing all possible combinations\nof the two quartiles for each of the two variables, and display the result.\n\n\nSolution\n\nThis is `datagrid`. My best model is the one I called `y.2` (I had to scroll back a ways to find it), so:\n\n::: {.cell}\n\n```{.r .cell-code}\nnew <- datagrid(model = y.2, logbun = c(1.14561, 1.5682), hgb = c(8.8, 12.0))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Matrix columns are not supported as predictors and are therefore\n  omitted. This may prevent computation of the quantities of interest. You\n  can construct your own prediction dataset and supply it explicitly to\n  the `newdata` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nnew\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   logbun  hgb rowid\n1 1.14561  8.8     1\n2 1.14561 12.0     2\n3 1.56820  8.8     3\n4 1.56820 12.0     4\n```\n\n\n:::\n:::\n\n\nOr anything equivalent to that. \n\nThe place you have to get to in\nthe end is a data frame with columns called `logbun` and\n`hgb`, and the right four combinations of values. If you want\nto round the `logbun` values off more, for example to two\ndecimals, that's fine; it won't affect the graph that's coming up.\n    \n\n$\\blacksquare$\n\n(i) Obtain predicted survival probabilities for each of the\ncombinations of variables you created above. You don't need to look\nat the results (they are rather long).\n\n\nSolution\n\n\nThis seems as if it ought to be `predictions`, but the\n`survival` version of it is called `survfit`:\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- survfit(y.2, new, data = myeloma)\n```\n:::\n\n     \n\nIt works the same as `predictions`: a fitted model object (your\nsmaller survival model), and a data frame of values to predict\nfor. The `data=` is not strictly needed here, but if you want\n`ggsurvplot` to work right, you *do* need it to be here.\n    \n\n$\\blacksquare$\n\n(j) Obtain a graph of the predicted survival curves for each\ncombination of your variables.\n\n\nSolution\n\n\nThis is easier than you think: it's just `ggsurvplot` from `survminer`:\n\n::: {.cell}\n\n```{.r .cell-code}\nggsurvplot(s, conf.int = FALSE)\n```\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/myeloma-17-1.pdf){fig-pos='H'}\n:::\n:::\n\n     \n    \n\n$\\blacksquare$\n\n(k) Is it better to have high or low values for each of the\nvariables in your prediction? Explain briefly.\n\n\nSolution\n\n\nThose four \"strata\" are the four rows in your prediction data\nframe (the four combinations). They are in the same order that\nthey were in `new` (or whatever name you used):\n\n::: {.cell}\n\n```{.r .cell-code}\nnew\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   logbun  hgb rowid\n1 1.14561  8.8     1\n2 1.14561 12.0     2\n3 1.56820  8.8     3\n4 1.56820 12.0     4\n```\n\n\n:::\n:::\n\n  \n\nThe best survival curve is the top-right green one. This is\nstratum^[Strata is plural; the singular is *stratum*. Like  data and datum.] \n2, from the legend at the top. In `new`,\nthis goes with a low value of `logbun` and a *high* value\nof `hgb`. \n\nYou can check this by looking at the *worst* survival curve,\nwhich should be diametrically opposed. This is the blue one, stratum\n3, which is *high* `logbun` and *low* `hgb`,\nindeed exactly the opposite of the best one.\n\nThings that are tests, like `logbun`, are often set up so that\na high value is the abnormal one (so that an abnormal one will be easy\nto spot). Things that are measurements, like `hgb`, might have\nan ideal range, but the better value could be high or low, depending\non what is being measured.\n    \n$\\blacksquare$\n\n\n\n\n\n\n##  Ovarian cancer\n\n\n R's `survival` package contains several data\nsets. One of these is called `ovarian`; it comes from a study\nof 26 ovarian cancer patients. The major purpose of this study was to\ncompare the effects of two treatments on survival time.\n\n\n\n(a) Obtain and display (all of) the data set. This is as simple as\nloading the package and typing the data set's name.\n\nSolution\n\n\nThus. You may need to start with `library(survival)`:\n\n::: {.cell}\n\n```{.r .cell-code}\novarian\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   futime fustat     age resid.ds rx ecog.ps\n1      59      1 72.3315        2  1       1\n2     115      1 74.4932        2  1       1\n3     156      1 66.4658        2  1       2\n4     421      0 53.3644        2  2       1\n5     431      1 50.3397        2  1       1\n6     448      0 56.4301        1  1       2\n7     464      1 56.9370        2  2       2\n8     475      1 59.8548        2  2       2\n9     477      0 64.1753        2  1       1\n10    563      1 55.1781        1  2       2\n11    638      1 56.7562        1  1       2\n12    744      0 50.1096        1  2       1\n13    769      0 59.6301        2  2       2\n14    770      0 57.0521        2  2       1\n15    803      0 39.2712        1  1       1\n16    855      0 43.1233        1  1       2\n17   1040      0 38.8932        2  1       2\n18   1106      0 44.6000        1  1       1\n19   1129      0 53.9068        1  2       1\n20   1206      0 44.2055        2  2       1\n21   1227      0 59.5890        1  2       2\n22    268      1 74.5041        2  1       2\n23    329      1 43.1370        2  1       1\n24    353      1 63.2192        1  2       2\n25    365      1 64.4247        2  2       1\n26    377      0 58.3096        1  2       1\n```\n\n\n:::\n:::\n\n \n\nThere are indeed 26 rows. This is a `data.frame` rather than a\n`tibble`, so you might see the whole thing, in case you were\nexpecting something like this:\n\n::: {.cell}\n\n```{.r .cell-code}\novarian %>% as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 26 x 6\n   futime fustat   age resid.ds    rx ecog.ps\n    <dbl>  <dbl> <dbl>    <dbl> <dbl>   <dbl>\n 1     59      1  72.3        2     1       1\n 2    115      1  74.5        2     1       1\n 3    156      1  66.5        2     1       2\n 4    421      0  53.4        2     2       1\n 5    431      1  50.3        2     1       1\n 6    448      0  56.4        1     1       2\n 7    464      1  56.9        2     2       2\n 8    475      1  59.9        2     2       2\n 9    477      0  64.2        2     1       1\n10    563      1  55.2        1     2       2\n# i 16 more rows\n```\n\n\n:::\n:::\n\n \n\nwhich doesn't change anything in `ovarian`, but changes what\nkind of thing it is (and thus how it displays). Usually when you read\nsomething in from a file, you use something like `read_delim`\nthat makes a `tibble`, but this one wasn't read in from a\nfile. It was stored in the package as an old-fashioned\n`data.frame`, and so that's how it stays.\n\n$\\blacksquare$\n\n(b) The columns of interest to us are:\n\n\n* `futime`: the time for which a patient was followed-up:\nthe number of days until either they died or the study ended (or\nthey withdrew from the study for some other reason).\n\n* `fustat`: follow-up status: 1 if the patient died of\novarian cancer, 0 if they were still alive when the study ended.\n\n* `age`: of patient, at diagnosis, in years\n\n* `rx`: treatment, numbered 1 or 2, but really labels for\nthe two treatments.\n\nCreate and display a suitable response variable `y` for a Cox\nproportional-hazards model.\n\nSolution\n\n\nThe idea is to use the appropriate one(s) of these columns in\n`Surv`. Remember that the response variable in a survival\nmodel encodes two things: the survival time, and whether or not\nthe event (here death) actually happened to that patient or not.\nI always forget whether the second thing in `Surv` has to\nbe 1 or 0 if the event happened. The help says that it needs to be\n1 or `TRUE` if the event (death) happened, which is what\n`fustat` is, so we can use it as it is:\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- with(ovarian, Surv(futime, fustat))\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   59   115   156   421+  431   448+  464   475   477+  563   638   744+\n[13]  769+  770+  803+  855+ 1040+ 1106+ 1129+ 1206+ 1227+  268   329   353 \n[25]  365   377+\n```\n\n\n:::\n:::\n\n     \n\nThis creates a separate variable `y` outside of any data\nframe. This is how, in the past, it had to be done, because although `y`\nlooks as if it is 26 long (one per patient), it's actually more\ncomplicated than that. But adding it as a column to a dataframe now works just fine:\n\n::: {.cell}\n\n```{.r .cell-code}\novarian %>% mutate(y = Surv(futime, fustat)) -> ov2\nov2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   futime fustat     age resid.ds rx ecog.ps     y\n1      59      1 72.3315        2  1       1    59\n2     115      1 74.4932        2  1       1   115\n3     156      1 66.4658        2  1       2   156\n4     421      0 53.3644        2  2       1  421+\n5     431      1 50.3397        2  1       1   431\n6     448      0 56.4301        1  1       2  448+\n7     464      1 56.9370        2  2       2   464\n8     475      1 59.8548        2  2       2   475\n9     477      0 64.1753        2  1       1  477+\n10    563      1 55.1781        1  2       2   563\n11    638      1 56.7562        1  1       2   638\n12    744      0 50.1096        1  2       1  744+\n13    769      0 59.6301        2  2       2  769+\n14    770      0 57.0521        2  2       1  770+\n15    803      0 39.2712        1  1       1  803+\n16    855      0 43.1233        1  1       2  855+\n17   1040      0 38.8932        2  1       2 1040+\n18   1106      0 44.6000        1  1       1 1106+\n19   1129      0 53.9068        1  2       1 1129+\n20   1206      0 44.2055        2  2       1 1206+\n21   1227      0 59.5890        1  2       2 1227+\n22    268      1 74.5041        2  1       2   268\n23    329      1 43.1370        2  1       1   329\n24    353      1 63.2192        1  2       2   353\n25    365      1 64.4247        2  2       1   365\n26    377      0 58.3096        1  2       1  377+\n```\n\n\n:::\n:::\n\n \n\nInternally `y` is a `matrix` with two columns:\n\n::: {.cell}\n\n```{.r .cell-code}\nprint.default(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      time status\n [1,]   59      1\n [2,]  115      1\n [3,]  156      1\n [4,]  421      0\n [5,]  431      1\n [6,]  448      0\n [7,]  464      1\n [8,]  475      1\n [9,]  477      0\n[10,]  563      1\n[11,]  638      1\n[12,]  744      0\n[13,]  769      0\n[14,]  770      0\n[15,]  803      0\n[16,]  855      0\n[17,] 1040      0\n[18,] 1106      0\n[19,] 1129      0\n[20,] 1206      0\n[21,] 1227      0\n[22,]  268      1\n[23,]  329      1\n[24,]  353      1\n[25,]  365      1\n[26,]  377      0\nattr(,\"type\")\n[1] \"right\"\nattr(,\"class\")\n[1] \"Surv\"\n```\n\n\n:::\n:::\n\nbut everything is handled properly when you add it to a dataframe (note the `Surv` at the top of the column to indicated that it is a survival-time object, encoding a survival time and survivorship status both).\n\n\n$\\blacksquare$\n\n(c) In the display of your response variable, some values are\nmarked with a `+`. Why is that? Explain briefly. (If you use\na technical term, you should explain what it means.)\n\nSolution\n\n\n\nThese are the censored observations. You can say this, but you\nalso need to say what that means (this is the \"technical term\"\nreferred to in the question). The observations with a `+`\nare individuals who were never observed to die, or who were still\nalive at the end of the study.\n\nI want you to demonstrate that you know what censored\n*means*, not just that you know when you have a censored\nobservation.\n\nExtra: in a study like this, patients are typically \"recruited\"\ninto the study at various different times. Patients who happened\nto be in the study near the beginning and who survived can have a\nlarge (censored) value of `y` (like those values over 1000\ndays). But a patient might join the study later on; if they\nsurvive, they might produce a censored observation with a small\nsurvival time, like the last value 377. I'm sure the doctor would\nhave liked to follow them for longer, but the funding ran out, and\nthe doctor had a paper to write. (There is *some* information\nin these small censored values, but not much, because most of the\npatients, even the ones who eventually died, survived for longer\nthan 377 days.)\n\nThe other thing that might have happened is that a patient with\nthe 377-censored value died *from something else* unrelated\nto ovarian cancer. The study is only concerned with deaths from\novarian cancer, so such a patient is treated as censored at their\ndeath time. After this point we cannot assess how long\nthis patient survived *ovarian cancer*.\n\n$\\blacksquare$\n\n(d) Fit a Cox proportional-hazards model for predicting\nsurvival time from age and treatment. Note that the numeric values\nfor treatment make sense only as labels for the two treatments, so\nin your model formula make treatment into a factor. Display the\nresults. \n\nSolution\n\n\nThe hint suggests something like this:\n\n::: {.cell}\n\n```{.r .cell-code}\ntime.1 <- coxph(y ~ age + factor(rx), data = ovarian)\nsummary(time.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + factor(rx), data = ovarian)\n\n  n= 26, number of events= 12 \n\n                coef exp(coef) se(coef)      z Pr(>|z|)   \nage          0.14733   1.15873  0.04615  3.193  0.00141 **\nfactor(rx)2 -0.80397   0.44755  0.63205 -1.272  0.20337   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n            exp(coef) exp(-coef) lower .95 upper .95\nage            1.1587      0.863    1.0585     1.268\nfactor(rx)2    0.4475      2.234    0.1297     1.545\n\nConcordance= 0.798  (se = 0.076 )\nLikelihood ratio test= 15.89  on 2 df,   p=4e-04\nWald test            = 13.47  on 2 df,   p=0.001\nScore (logrank) test = 18.56  on 2 df,   p=9e-05\n```\n\n\n:::\n:::\n\n     \n\nAlternatively, define the factor version of `rx` in the data\nframe first. This is the slick way to do that:\n\n::: {.cell}\n\n```{.r .cell-code}\ntime.1a <- ovarian %>%\n  mutate(rxf = factor(rx)) %>%\n  coxph(y ~ age + rxf, data = .)\nsummary(time.1a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + rxf, data = .)\n\n  n= 26, number of events= 12 \n\n         coef exp(coef) se(coef)      z Pr(>|z|)   \nage   0.14733   1.15873  0.04615  3.193  0.00141 **\nrxf2 -0.80397   0.44755  0.63205 -1.272  0.20337   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n     exp(coef) exp(-coef) lower .95 upper .95\nage     1.1587      0.863    1.0585     1.268\nrxf2    0.4475      2.234    0.1297     1.545\n\nConcordance= 0.798  (se = 0.076 )\nLikelihood ratio test= 15.89  on 2 df,   p=4e-04\nWald test            = 13.47  on 2 df,   p=0.001\nScore (logrank) test = 18.56  on 2 df,   p=9e-05\n```\n\n\n:::\n:::\n\n \n\nThe answer is the same either way. \nThe `data=.` means \"use the data frame that came out of the previous step, the one with `rxf` in it.\"\n\nAlternatively, use the dataframe I called `ov2` with `y` in it:\n\n::: {.cell}\n\n```{.r .cell-code}\ntime.1b <- coxph(y ~ age + factor(rx), data = ov2)\nsummary(time.1b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + factor(rx), data = ov2)\n\n  n= 26, number of events= 12 \n\n                coef exp(coef) se(coef)      z Pr(>|z|)   \nage          0.14733   1.15873  0.04615  3.193  0.00141 **\nfactor(rx)2 -0.80397   0.44755  0.63205 -1.272  0.20337   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n            exp(coef) exp(-coef) lower .95 upper .95\nage            1.1587      0.863    1.0585     1.268\nfactor(rx)2    0.4475      2.234    0.1297     1.545\n\nConcordance= 0.798  (se = 0.076 )\nLikelihood ratio test= 15.89  on 2 df,   p=4e-04\nWald test            = 13.47  on 2 df,   p=0.001\nScore (logrank) test = 18.56  on 2 df,   p=9e-05\n```\n\n\n:::\n:::\n\n\n$\\blacksquare$\n\n(e) Is there a significant difference between the treatments in\nterms of their effects on survival (from ovarian cancer)?\n\nSolution\n\n\n\nLook at the P-value for my `factor(rx)2`, 0.203. This is\nnot small, so there is no evidence of a difference between\ntreatments. \n\nExtra: the reason for the odd label is that we have turned\ntreatment into a categorical variable; treatment 1 is used as the\nbaseline, and the negative slope says that the \"hazard of death\"\nis lower for treatment 2 than for treatment 1: that is, people\nsurvive longer on treatment 2, but the difference is not big\nenough to be significant (we also have a smallish sample size).\n\nSince there are only two treatments, it would in fact have been OK\nto leave them as numbers (with two numbers one unit apart, the\nslope would have been the same size as here), but I think it's a\ngood idea to treat categorical variables as categorical. My own habit\nis to use letters or something non-numerical to distinguish\ncategories. I might have used `t1` and `t2` in this\ncase, or the names of the different treatments.\n\n\n$\\blacksquare$\n\n(f) Is there a significant effect of age? If there is, describe\nthe effect that age has on survival.\n\nSolution\n\n\n\nThe P-value for age is 0.0014, small, so age definitely has a\nsignificant effect on survival. As to what kind of effect, look at\nthe slope coefficient, 0.15, positive, which means that increased\nage-at-diagnosis goes with an *increased* hazard of death, or\nthat older patients do not survive as long.\n\nI would like you to get to the plain-English words at the\nend. Part of your job as a statistician is explaining what you got\nto people who are doctors, managers, etc., who won't\nunderstand the terminology. \n\nThus, one mark for assessing significance\nvia P-value, one for looking at the slope coefficient and noting\nthat it is positive, and one for getting to \"older patients do     not survive as long\", or \n\"older patients have a larger chance of dying sooner\". \n(Strictly, this is also \"all else equal\" as usual,\nsince survival time might also have depended on treatment, but the\npoint of this question is for you to get to \"older patients do not survive as long\".) \n\n(The interpretation of the slope may seem backwards: a positive\nslope means a *shorter* survival time for a larger age. This\nis why I talk about \"hazard of death\", since that guides us to\nthe correct interpretation.)\n\nExtra: I was curious about what would happen if I just included\n`rx` in the model:\n\n::: {.cell}\n\n```{.r .cell-code}\ntime.2 <- update(time.1, . ~ . - age)\nsummary(time.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ factor(rx), data = ovarian)\n\n  n= 26, number of events= 12 \n\n               coef exp(coef) se(coef)      z Pr(>|z|)\nfactor(rx)2 -0.5964    0.5508   0.5870 -1.016     0.31\n\n            exp(coef) exp(-coef) lower .95 upper .95\nfactor(rx)2    0.5508      1.816    0.1743      1.74\n\nConcordance= 0.608  (se = 0.07 )\nLikelihood ratio test= 1.05  on 1 df,   p=0.3\nWald test            = 1.03  on 1 df,   p=0.3\nScore (logrank) test = 1.06  on 1 df,   p=0.3\n```\n\n\n:::\n:::\n\n     \n\nStill not significant, but this model is a *lot worse* because I\ntook out the significant `age`. What this is doing is mixing up\nall the people of different ages (and we know that age has an effect\non survival) and trying (and failing) to discern an effect of\ntreatment. \n\nWe could have been badly misled by this model if one of the treatments\nhad predominantly older patients. We know that older patients have\nworse survival, so the treatment with older patients would have looked\nworse, even if it actually wasn't. The model `time.1` which\ncontained `age` properly adjusted for the effect of age, so\nthat was the best way to see whether there was a difference between\ntreatments. \n\nWhat you often see early on in a paper on this kind of stuff is a\ngraph showing that the treatment groups are similar in terms of\nimportant things like `age`. Here, that could be a boxplot:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ovarian, aes(x = factor(rx), y = age)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/ovarian-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n 0.14733\n\nI needed to do `factor(rx)` because `geom_boxplot`\nneeds a genuine categorical variable, not just a numerical variable\nmasquerading as one. If you just leave it as `rx`, as I\ndiscovered, you get *one* boxplot of all the ages together\nregardless of treatment. The key, for you as user of software, is not\n(necessarily) to get it right the first time, but to know what to do\nto fix up the errors you will inevitably get. If you have worked\nthrough the boxplot examples in C32 and D29, you will have enough\nexperience to remember that a boxplot has to have a categorical `x`\n(text will do, but definitely not numbers). This is why I give you so\nmany things to work through: so that you gain the experience to know\nhow to fix up problems.\n\nTreatment 1 has a larger spread of ages and treatment 2 has a low\noutlier age, but the median ages are very similar.\n\n$\\blacksquare$\n\n(g) Make a martingale residual plot for this model. Do you see\nany problems? Explain briefly.\n\nSolution\n\n\nThe plot is just the same idea as the one in the notes. Make sure\nyou have `survminer` installed and loaded:\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoxdiagnostics(time.1) + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/ovarian-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n     \n\nMake a call about whether you think the smooth trend deviates too much\nfrom the red dotted line going across at zero. Martingale residuals\ncan get very negative (and that is OK), so that residual of $-2$ is\nnot a problem, and this is pulling the smooth trend down a bit (it's\nthe reason for the dip on the right side of the smooth trend). So I'd\ncall this OK, but you can make whatever call you like as long as it's\nsupported by what you see here.\n\nI observe that the obvious fixable thing is where you have a curve\nhere, one that looks like a parabola (at which point you add squared\nterms to your explanatory variables and see if that helps, as for\n`bmi` in one of the other problems). This one\nis too wiggly to be a parabola (it bends *twice*), and so is more\nlike a cubic than anything.\n\nThe other thing you can note is that the grey envelope is \n\"not significantly different from zero\", since 0 is clearly within the grey\nenvelope all the way across.\n\n\n\n$\\blacksquare$\n\n(h) Find the quartiles of `age`, and make a data frame\ncontaining all combinations of those two ages and the two\ntreatments. Display what you have. (Feel free to copy the values by\nhand, rather than trying to save them and use them.)\n\n\nSolution\n\n\nI imagine you can guess what we are going to be doing with these:\npredictions, so we'll call the data frame `new` when we get\nthere. \n\nQuartiles first:\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(ovarian$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      0%      25%      50%      75%     100% \n38.89320 50.16712 56.84660 62.37810 74.50410 \n```\n\n\n:::\n:::\n\n   \n\nor, if you prefer,\n\n::: {.cell}\n\n```{.r .cell-code}\novarian %>%\n  summarize(\n    q1 = quantile(age, 0.25),\n    q3 = quantile(age, 0.75)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        q1      q3\n1 50.16712 62.3781\n```\n\n\n:::\n:::\n\n \n\nThe quartiles are 50.17 and 62.38 (rounding slightly).\n\nEither way is good. \n\nThen follow my standard procedure (or one of your own devising),\nremembering that \"treatment\" is called `rx` here:\n\n::: {.cell}\n\n```{.r .cell-code}\nages <- c(50.17, 62.38)\nrxs <- c(1, 2)\nnew <- datagrid(model = time.1, age = ages, rx = rxs)\n```\n:::\n\n \n\n\n$\\blacksquare$\n\n(i) Obtain predicted survival probabilities for each of your\nage-treatment combinations, for each of a variety of survival\ntimes. (This is only one thing, despite it sounding like a lot.)\n\n\nSolution\n\n\nThe magic word here is `survfit`. The structure is the same\nas for `predictions`:\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- survfit(time.1, new, data = ovarian)\nsummary(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall: survfit(formula = time.1, newdata = new, data = ovarian)\n\n time n.risk n.event survival1 survival2 survival3 survival4\n   59     26       1     0.993     0.997     0.959     0.981\n  115     25       1     0.985     0.993     0.911     0.959\n  156     24       1     0.973     0.988     0.846     0.928\n  268     23       1     0.959     0.981     0.777     0.893\n  329     22       1     0.932     0.969     0.653     0.826\n  353     21       1     0.905     0.956     0.548     0.764\n  365     20       1     0.877     0.943     0.452     0.701\n  431     17       1     0.843     0.926     0.356     0.630\n  464     15       1     0.805     0.908     0.271     0.557\n  475     14       1     0.768     0.888     0.202     0.489\n  563     12       1     0.701     0.853     0.117     0.382\n  638     11       1     0.634     0.816     0.064     0.292\n```\n\n\n:::\n:::\n\n   \n\nI didn't ask you to display it, so doing so is optional. Also, you\ndon't need (here) that `data=ovarian` (the predictions will\nwork just fine without it), but the plot coming up *will not*. So\nmy recommendation is to put it in.\n\nExtra: The four columns `survival1` through `survival4` are the\nsurvival probabilities for the times shown in the left-hand column\n(these are numbers of days), for the four *rows* of my\n`new`, in the same order.\n\nThere are only a few different times, because these are the numbers of\ndays at which somebody in the data set died, and the estimated\nsurvival probability does not change at the times in between\nthese. (You'll see this on a plot in a minute.)\n\nThese survival probabilities are pretty easy to eyeball: the best\nsurvival is in stratum 2, which is the younger patients in treatment\n2. This we'll come back to.\n\n\n$\\blacksquare$\n\n(j) Draw a plot that compares the survival probabilities at the\ndifferent times.\n\n\nSolution\n\n\nThus. The `conf.int=F` means to skip the confidence interval\n\"envelopes\" that I find make the plot rather messy:\n\n::: {.cell}\n\n```{.r .cell-code}\nggsurvplot(s, conf.int = FALSE)\n```\n\n::: {.cell-output-display}\n![](survival-analysis_files/figure-pdf/ovarian-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n   \n\n$\\blacksquare$\n\n(k) According to your plot, how would you describe the effects of\ntreatment and of age?\n50.17\t1\t\t\t\n50.17\t2\t\n\nSolution\n\n\nThe best survival curve, in terms of surviving longest, is up and to\nthe right, so the green one is best and the blue one is\nworst.^[In other cases, having the event happen sooner is    better. For example, you might be poisoning rats, in which case    you want them to die quicker. Or the event might be something    desirable like becoming qualified to fly an airplane. In those    cases, down and to the left is better.] To figure out which those\nare, we have to go back to the data frame we created:\n\n::: {.cell}\n\n```{.r .cell-code}\nnew\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    age rx rowid\n1 50.17  1     1\n2 50.17  2     2\n3 62.38  1     3\n4 62.38  2     4\n```\n\n\n:::\n:::\n\n  \n\nTo see the effect of age, compare strata 1 and 3 (or 2 and 4). This\nmeans comparing the red and blue curves; the red one is clearly better\n(in the sense of longer survival time), which means that age has a big\neffect on survival, with younger people living longer, other things\nbeing equal (that we saw earlier was significant). You could\nequally well compare the green and purple survival curves and come to\nthe same conclusion.\n\nTo assess the effect of treatment, compare strata 1 and 2 (red and\ngreen), or strata 3 and 4 (blue and purple). In both cases, the\nstratum corresponding to treatment 2 has slightly better survival (has\na higher chance of living for longer), but there is not as big an\neffect as for age. (You'll recall that the treatment difference was\nnot significant).\n\nState or imply that you know which stratum is\nwhich, say something about the effects of age and\nof treatment, including which one is better.\n\nExtra: recall the output from the Cox model:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(time.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = y ~ age + factor(rx), data = ovarian)\n\n  n= 26, number of events= 12 \n\n                coef exp(coef) se(coef)      z Pr(>|z|)   \nage          0.14733   1.15873  0.04615  3.193  0.00141 **\nfactor(rx)2 -0.80397   0.44755  0.63205 -1.272  0.20337   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n            exp(coef) exp(-coef) lower .95 upper .95\nage            1.1587      0.863    1.0585     1.268\nfactor(rx)2    0.4475      2.234    0.1297     1.545\n\nConcordance= 0.798  (se = 0.076 )\nLikelihood ratio test= 15.89  on 2 df,   p=4e-04\nWald test            = 13.47  on 2 df,   p=0.001\nScore (logrank) test = 18.56  on 2 df,   p=9e-05\n```\n\n\n:::\n:::\n\n \n\nThe slope coefficient for treatment 2 (as compared to the baseline\ntreatment 1) was $-0.83097$, *negative*, which meant that patients on\ntreatment 2 had a *lower* hazard of death than patients on\ntreatment 1: that is, that treatment 2 was better for survival than\ntreatment 1. That is what the plot said also (and the relatively small\ndifference is consistent with that difference not being significant). \n\n$\\blacksquare$\n\n",
    "supporting": [
      "survival-analysis_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}